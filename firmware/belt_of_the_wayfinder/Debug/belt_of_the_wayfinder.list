
belt_of_the_wayfinder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800a1b0  0800a1b0  0001a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7cc  0800a7cc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7cc  0800a7cc  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7cc  0800a7cc  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7cc  0800a7cc  0001a7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7d0  0800a7d0  0001a7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a7d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000020c  0800a9e0  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800a9e0  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132a5  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c7  00000000  00000000  000334d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000359a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e07  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c47  00000000  00000000  0004a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071b10  00000000  00000000  0005d2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cedf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e78  00000000  00000000  000cee4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000020c 	.word	0x2000020c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a198 	.word	0x0800a198

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000210 	.word	0x20000210
 8000100:	0800a198 	.word	0x0800a198

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fc51 	bl	8001ce0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fb9b 	bl	8001b84 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fc43 	bl	8001ce0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc39 	bl	8001ce0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fbbd 	bl	8001bfc <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fbb3 	bl	8001bfc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fb6d 	bl	8000b8c <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 faf1 	bl	8000aa4 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb5f 	bl	8000b8c <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb55 	bl	8000b8c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 faff 	bl	8000af4 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 faf5 	bl	8000af4 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_d2uiz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__aeabi_d2uiz+0x38>)
 800051e:	0004      	movs	r4, r0
 8000520:	000d      	movs	r5, r1
 8000522:	f7ff ffb5 	bl	8000490 <__aeabi_dcmpge>
 8000526:	2800      	cmp	r0, #0
 8000528:	d104      	bne.n	8000534 <__aeabi_d2uiz+0x1c>
 800052a:	0020      	movs	r0, r4
 800052c:	0029      	movs	r1, r5
 800052e:	f002 fa63 	bl	80029f8 <__aeabi_d2iz>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <__aeabi_d2uiz+0x38>)
 8000536:	2200      	movs	r2, #0
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 feac 	bl	8002298 <__aeabi_dsub>
 8000540:	f002 fa5a 	bl	80029f8 <__aeabi_d2iz>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	061b      	lsls	r3, r3, #24
 8000548:	469c      	mov	ip, r3
 800054a:	4460      	add	r0, ip
 800054c:	e7f1      	b.n	8000532 <__aeabi_d2uiz+0x1a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	41e00000 	.word	0x41e00000

08000554 <__aeabi_fadd>:
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	4646      	mov	r6, r8
 8000558:	46d6      	mov	lr, sl
 800055a:	464f      	mov	r7, r9
 800055c:	024d      	lsls	r5, r1, #9
 800055e:	0242      	lsls	r2, r0, #9
 8000560:	b5c0      	push	{r6, r7, lr}
 8000562:	0a52      	lsrs	r2, r2, #9
 8000564:	0a6e      	lsrs	r6, r5, #9
 8000566:	0047      	lsls	r7, r0, #1
 8000568:	46b0      	mov	r8, r6
 800056a:	0e3f      	lsrs	r7, r7, #24
 800056c:	004e      	lsls	r6, r1, #1
 800056e:	0fc4      	lsrs	r4, r0, #31
 8000570:	00d0      	lsls	r0, r2, #3
 8000572:	4694      	mov	ip, r2
 8000574:	003b      	movs	r3, r7
 8000576:	4682      	mov	sl, r0
 8000578:	0e36      	lsrs	r6, r6, #24
 800057a:	0fc9      	lsrs	r1, r1, #31
 800057c:	09ad      	lsrs	r5, r5, #6
 800057e:	428c      	cmp	r4, r1
 8000580:	d06d      	beq.n	800065e <__aeabi_fadd+0x10a>
 8000582:	1bb8      	subs	r0, r7, r6
 8000584:	4681      	mov	r9, r0
 8000586:	2800      	cmp	r0, #0
 8000588:	dd4d      	ble.n	8000626 <__aeabi_fadd+0xd2>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x3c>
 800058e:	e088      	b.n	80006a2 <__aeabi_fadd+0x14e>
 8000590:	2fff      	cmp	r7, #255	; 0xff
 8000592:	d05a      	beq.n	800064a <__aeabi_fadd+0xf6>
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	04db      	lsls	r3, r3, #19
 8000598:	431d      	orrs	r5, r3
 800059a:	464b      	mov	r3, r9
 800059c:	2201      	movs	r2, #1
 800059e:	2b1b      	cmp	r3, #27
 80005a0:	dc0a      	bgt.n	80005b8 <__aeabi_fadd+0x64>
 80005a2:	002b      	movs	r3, r5
 80005a4:	464a      	mov	r2, r9
 80005a6:	4649      	mov	r1, r9
 80005a8:	40d3      	lsrs	r3, r2
 80005aa:	2220      	movs	r2, #32
 80005ac:	1a52      	subs	r2, r2, r1
 80005ae:	4095      	lsls	r5, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	1e55      	subs	r5, r2, #1
 80005b4:	41aa      	sbcs	r2, r5
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	1a9a      	subs	r2, r3, r2
 80005bc:	0153      	lsls	r3, r2, #5
 80005be:	d400      	bmi.n	80005c2 <__aeabi_fadd+0x6e>
 80005c0:	e0b9      	b.n	8000736 <__aeabi_fadd+0x1e2>
 80005c2:	0192      	lsls	r2, r2, #6
 80005c4:	0996      	lsrs	r6, r2, #6
 80005c6:	0030      	movs	r0, r6
 80005c8:	f002 fb72 	bl	8002cb0 <__clzsi2>
 80005cc:	3805      	subs	r0, #5
 80005ce:	4086      	lsls	r6, r0
 80005d0:	4287      	cmp	r7, r0
 80005d2:	dd00      	ble.n	80005d6 <__aeabi_fadd+0x82>
 80005d4:	e0d4      	b.n	8000780 <__aeabi_fadd+0x22c>
 80005d6:	0033      	movs	r3, r6
 80005d8:	1bc7      	subs	r7, r0, r7
 80005da:	2020      	movs	r0, #32
 80005dc:	3701      	adds	r7, #1
 80005de:	40fb      	lsrs	r3, r7
 80005e0:	1bc7      	subs	r7, r0, r7
 80005e2:	40be      	lsls	r6, r7
 80005e4:	0032      	movs	r2, r6
 80005e6:	1e56      	subs	r6, r2, #1
 80005e8:	41b2      	sbcs	r2, r6
 80005ea:	2700      	movs	r7, #0
 80005ec:	431a      	orrs	r2, r3
 80005ee:	0753      	lsls	r3, r2, #29
 80005f0:	d004      	beq.n	80005fc <__aeabi_fadd+0xa8>
 80005f2:	230f      	movs	r3, #15
 80005f4:	4013      	ands	r3, r2
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d000      	beq.n	80005fc <__aeabi_fadd+0xa8>
 80005fa:	3204      	adds	r2, #4
 80005fc:	0153      	lsls	r3, r2, #5
 80005fe:	d400      	bmi.n	8000602 <__aeabi_fadd+0xae>
 8000600:	e09c      	b.n	800073c <__aeabi_fadd+0x1e8>
 8000602:	1c7b      	adds	r3, r7, #1
 8000604:	2ffe      	cmp	r7, #254	; 0xfe
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0xb6>
 8000608:	e09a      	b.n	8000740 <__aeabi_fadd+0x1ec>
 800060a:	0192      	lsls	r2, r2, #6
 800060c:	0a52      	lsrs	r2, r2, #9
 800060e:	4694      	mov	ip, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	05d8      	lsls	r0, r3, #23
 8000614:	4663      	mov	r3, ip
 8000616:	07e4      	lsls	r4, r4, #31
 8000618:	4318      	orrs	r0, r3
 800061a:	4320      	orrs	r0, r4
 800061c:	bce0      	pop	{r5, r6, r7}
 800061e:	46ba      	mov	sl, r7
 8000620:	46b1      	mov	r9, r6
 8000622:	46a8      	mov	r8, r5
 8000624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000626:	2800      	cmp	r0, #0
 8000628:	d049      	beq.n	80006be <__aeabi_fadd+0x16a>
 800062a:	1bf3      	subs	r3, r6, r7
 800062c:	2f00      	cmp	r7, #0
 800062e:	d000      	beq.n	8000632 <__aeabi_fadd+0xde>
 8000630:	e0b6      	b.n	80007a0 <__aeabi_fadd+0x24c>
 8000632:	4652      	mov	r2, sl
 8000634:	2a00      	cmp	r2, #0
 8000636:	d060      	beq.n	80006fa <__aeabi_fadd+0x1a6>
 8000638:	3b01      	subs	r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fadd+0xec>
 800063e:	e0fc      	b.n	800083a <__aeabi_fadd+0x2e6>
 8000640:	2eff      	cmp	r6, #255	; 0xff
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0xf2>
 8000644:	e0b4      	b.n	80007b0 <__aeabi_fadd+0x25c>
 8000646:	000c      	movs	r4, r1
 8000648:	4642      	mov	r2, r8
 800064a:	2a00      	cmp	r2, #0
 800064c:	d078      	beq.n	8000740 <__aeabi_fadd+0x1ec>
 800064e:	2080      	movs	r0, #128	; 0x80
 8000650:	03c0      	lsls	r0, r0, #15
 8000652:	4310      	orrs	r0, r2
 8000654:	0242      	lsls	r2, r0, #9
 8000656:	0a53      	lsrs	r3, r2, #9
 8000658:	469c      	mov	ip, r3
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	e7d9      	b.n	8000612 <__aeabi_fadd+0xbe>
 800065e:	1bb9      	subs	r1, r7, r6
 8000660:	2900      	cmp	r1, #0
 8000662:	dd71      	ble.n	8000748 <__aeabi_fadd+0x1f4>
 8000664:	2e00      	cmp	r6, #0
 8000666:	d03f      	beq.n	80006e8 <__aeabi_fadd+0x194>
 8000668:	2fff      	cmp	r7, #255	; 0xff
 800066a:	d0ee      	beq.n	800064a <__aeabi_fadd+0xf6>
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	04db      	lsls	r3, r3, #19
 8000670:	431d      	orrs	r5, r3
 8000672:	2201      	movs	r2, #1
 8000674:	291b      	cmp	r1, #27
 8000676:	dc07      	bgt.n	8000688 <__aeabi_fadd+0x134>
 8000678:	002a      	movs	r2, r5
 800067a:	2320      	movs	r3, #32
 800067c:	40ca      	lsrs	r2, r1
 800067e:	1a59      	subs	r1, r3, r1
 8000680:	408d      	lsls	r5, r1
 8000682:	1e6b      	subs	r3, r5, #1
 8000684:	419d      	sbcs	r5, r3
 8000686:	432a      	orrs	r2, r5
 8000688:	4452      	add	r2, sl
 800068a:	0153      	lsls	r3, r2, #5
 800068c:	d553      	bpl.n	8000736 <__aeabi_fadd+0x1e2>
 800068e:	3701      	adds	r7, #1
 8000690:	2fff      	cmp	r7, #255	; 0xff
 8000692:	d055      	beq.n	8000740 <__aeabi_fadd+0x1ec>
 8000694:	2301      	movs	r3, #1
 8000696:	497b      	ldr	r1, [pc, #492]	; (8000884 <__aeabi_fadd+0x330>)
 8000698:	4013      	ands	r3, r2
 800069a:	0852      	lsrs	r2, r2, #1
 800069c:	400a      	ands	r2, r1
 800069e:	431a      	orrs	r2, r3
 80006a0:	e7a5      	b.n	80005ee <__aeabi_fadd+0x9a>
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d02c      	beq.n	8000700 <__aeabi_fadd+0x1ac>
 80006a6:	2301      	movs	r3, #1
 80006a8:	425b      	negs	r3, r3
 80006aa:	469c      	mov	ip, r3
 80006ac:	44e1      	add	r9, ip
 80006ae:	464b      	mov	r3, r9
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x162>
 80006b4:	e0ad      	b.n	8000812 <__aeabi_fadd+0x2be>
 80006b6:	2fff      	cmp	r7, #255	; 0xff
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x168>
 80006ba:	e76e      	b.n	800059a <__aeabi_fadd+0x46>
 80006bc:	e7c5      	b.n	800064a <__aeabi_fadd+0xf6>
 80006be:	20fe      	movs	r0, #254	; 0xfe
 80006c0:	1c7e      	adds	r6, r7, #1
 80006c2:	4230      	tst	r0, r6
 80006c4:	d160      	bne.n	8000788 <__aeabi_fadd+0x234>
 80006c6:	2f00      	cmp	r7, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_fadd+0x178>
 80006ca:	e093      	b.n	80007f4 <__aeabi_fadd+0x2a0>
 80006cc:	4652      	mov	r2, sl
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x180>
 80006d2:	e0b6      	b.n	8000842 <__aeabi_fadd+0x2ee>
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d09c      	beq.n	8000612 <__aeabi_fadd+0xbe>
 80006d8:	1b52      	subs	r2, r2, r5
 80006da:	0150      	lsls	r0, r2, #5
 80006dc:	d400      	bmi.n	80006e0 <__aeabi_fadd+0x18c>
 80006de:	e0c3      	b.n	8000868 <__aeabi_fadd+0x314>
 80006e0:	4653      	mov	r3, sl
 80006e2:	000c      	movs	r4, r1
 80006e4:	1aea      	subs	r2, r5, r3
 80006e6:	e782      	b.n	80005ee <__aeabi_fadd+0x9a>
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d009      	beq.n	8000700 <__aeabi_fadd+0x1ac>
 80006ec:	3901      	subs	r1, #1
 80006ee:	2900      	cmp	r1, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fadd+0x1a0>
 80006f2:	e08b      	b.n	800080c <__aeabi_fadd+0x2b8>
 80006f4:	2fff      	cmp	r7, #255	; 0xff
 80006f6:	d1bc      	bne.n	8000672 <__aeabi_fadd+0x11e>
 80006f8:	e7a7      	b.n	800064a <__aeabi_fadd+0xf6>
 80006fa:	000c      	movs	r4, r1
 80006fc:	4642      	mov	r2, r8
 80006fe:	0037      	movs	r7, r6
 8000700:	2fff      	cmp	r7, #255	; 0xff
 8000702:	d0a2      	beq.n	800064a <__aeabi_fadd+0xf6>
 8000704:	0252      	lsls	r2, r2, #9
 8000706:	0a53      	lsrs	r3, r2, #9
 8000708:	469c      	mov	ip, r3
 800070a:	b2fb      	uxtb	r3, r7
 800070c:	e781      	b.n	8000612 <__aeabi_fadd+0xbe>
 800070e:	21fe      	movs	r1, #254	; 0xfe
 8000710:	3701      	adds	r7, #1
 8000712:	4239      	tst	r1, r7
 8000714:	d165      	bne.n	80007e2 <__aeabi_fadd+0x28e>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d17e      	bne.n	8000818 <__aeabi_fadd+0x2c4>
 800071a:	2800      	cmp	r0, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fadd+0x1cc>
 800071e:	e0aa      	b.n	8000876 <__aeabi_fadd+0x322>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_fadd+0x1d2>
 8000724:	e775      	b.n	8000612 <__aeabi_fadd+0xbe>
 8000726:	002a      	movs	r2, r5
 8000728:	4452      	add	r2, sl
 800072a:	2700      	movs	r7, #0
 800072c:	0153      	lsls	r3, r2, #5
 800072e:	d502      	bpl.n	8000736 <__aeabi_fadd+0x1e2>
 8000730:	4b55      	ldr	r3, [pc, #340]	; (8000888 <__aeabi_fadd+0x334>)
 8000732:	3701      	adds	r7, #1
 8000734:	401a      	ands	r2, r3
 8000736:	0753      	lsls	r3, r2, #29
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x1e8>
 800073a:	e75a      	b.n	80005f2 <__aeabi_fadd+0x9e>
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	e7df      	b.n	8000700 <__aeabi_fadd+0x1ac>
 8000740:	2200      	movs	r2, #0
 8000742:	23ff      	movs	r3, #255	; 0xff
 8000744:	4694      	mov	ip, r2
 8000746:	e764      	b.n	8000612 <__aeabi_fadd+0xbe>
 8000748:	2900      	cmp	r1, #0
 800074a:	d0e0      	beq.n	800070e <__aeabi_fadd+0x1ba>
 800074c:	1bf3      	subs	r3, r6, r7
 800074e:	2f00      	cmp	r7, #0
 8000750:	d03e      	beq.n	80007d0 <__aeabi_fadd+0x27c>
 8000752:	2eff      	cmp	r6, #255	; 0xff
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x204>
 8000756:	e777      	b.n	8000648 <__aeabi_fadd+0xf4>
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0001      	movs	r1, r0
 800075c:	04d2      	lsls	r2, r2, #19
 800075e:	4311      	orrs	r1, r2
 8000760:	468a      	mov	sl, r1
 8000762:	2201      	movs	r2, #1
 8000764:	2b1b      	cmp	r3, #27
 8000766:	dc08      	bgt.n	800077a <__aeabi_fadd+0x226>
 8000768:	4652      	mov	r2, sl
 800076a:	2120      	movs	r1, #32
 800076c:	4650      	mov	r0, sl
 800076e:	40da      	lsrs	r2, r3
 8000770:	1acb      	subs	r3, r1, r3
 8000772:	4098      	lsls	r0, r3
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	4302      	orrs	r2, r0
 800077a:	0037      	movs	r7, r6
 800077c:	1952      	adds	r2, r2, r5
 800077e:	e784      	b.n	800068a <__aeabi_fadd+0x136>
 8000780:	4a41      	ldr	r2, [pc, #260]	; (8000888 <__aeabi_fadd+0x334>)
 8000782:	1a3f      	subs	r7, r7, r0
 8000784:	4032      	ands	r2, r6
 8000786:	e732      	b.n	80005ee <__aeabi_fadd+0x9a>
 8000788:	4653      	mov	r3, sl
 800078a:	1b5e      	subs	r6, r3, r5
 800078c:	0173      	lsls	r3, r6, #5
 800078e:	d42d      	bmi.n	80007ec <__aeabi_fadd+0x298>
 8000790:	2e00      	cmp	r6, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_fadd+0x242>
 8000794:	e717      	b.n	80005c6 <__aeabi_fadd+0x72>
 8000796:	2200      	movs	r2, #0
 8000798:	2400      	movs	r4, #0
 800079a:	2300      	movs	r3, #0
 800079c:	4694      	mov	ip, r2
 800079e:	e738      	b.n	8000612 <__aeabi_fadd+0xbe>
 80007a0:	2eff      	cmp	r6, #255	; 0xff
 80007a2:	d100      	bne.n	80007a6 <__aeabi_fadd+0x252>
 80007a4:	e74f      	b.n	8000646 <__aeabi_fadd+0xf2>
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	4650      	mov	r0, sl
 80007aa:	04d2      	lsls	r2, r2, #19
 80007ac:	4310      	orrs	r0, r2
 80007ae:	4682      	mov	sl, r0
 80007b0:	2201      	movs	r2, #1
 80007b2:	2b1b      	cmp	r3, #27
 80007b4:	dc08      	bgt.n	80007c8 <__aeabi_fadd+0x274>
 80007b6:	4652      	mov	r2, sl
 80007b8:	2420      	movs	r4, #32
 80007ba:	4650      	mov	r0, sl
 80007bc:	40da      	lsrs	r2, r3
 80007be:	1ae3      	subs	r3, r4, r3
 80007c0:	4098      	lsls	r0, r3
 80007c2:	1e43      	subs	r3, r0, #1
 80007c4:	4198      	sbcs	r0, r3
 80007c6:	4302      	orrs	r2, r0
 80007c8:	000c      	movs	r4, r1
 80007ca:	0037      	movs	r7, r6
 80007cc:	1aaa      	subs	r2, r5, r2
 80007ce:	e6f5      	b.n	80005bc <__aeabi_fadd+0x68>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d093      	beq.n	80006fc <__aeabi_fadd+0x1a8>
 80007d4:	3b01      	subs	r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d04f      	beq.n	800087a <__aeabi_fadd+0x326>
 80007da:	2eff      	cmp	r6, #255	; 0xff
 80007dc:	d1c1      	bne.n	8000762 <__aeabi_fadd+0x20e>
 80007de:	4642      	mov	r2, r8
 80007e0:	e733      	b.n	800064a <__aeabi_fadd+0xf6>
 80007e2:	2fff      	cmp	r7, #255	; 0xff
 80007e4:	d0ac      	beq.n	8000740 <__aeabi_fadd+0x1ec>
 80007e6:	4455      	add	r5, sl
 80007e8:	086a      	lsrs	r2, r5, #1
 80007ea:	e7a4      	b.n	8000736 <__aeabi_fadd+0x1e2>
 80007ec:	4653      	mov	r3, sl
 80007ee:	000c      	movs	r4, r1
 80007f0:	1aee      	subs	r6, r5, r3
 80007f2:	e6e8      	b.n	80005c6 <__aeabi_fadd+0x72>
 80007f4:	4653      	mov	r3, sl
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d128      	bne.n	800084c <__aeabi_fadd+0x2f8>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x2ac>
 80007fe:	e722      	b.n	8000646 <__aeabi_fadd+0xf2>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	03db      	lsls	r3, r3, #15
 8000804:	469c      	mov	ip, r3
 8000806:	2400      	movs	r4, #0
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	e702      	b.n	8000612 <__aeabi_fadd+0xbe>
 800080c:	002a      	movs	r2, r5
 800080e:	4452      	add	r2, sl
 8000810:	e73b      	b.n	800068a <__aeabi_fadd+0x136>
 8000812:	4653      	mov	r3, sl
 8000814:	1b5a      	subs	r2, r3, r5
 8000816:	e6d1      	b.n	80005bc <__aeabi_fadd+0x68>
 8000818:	2800      	cmp	r0, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2ca>
 800081c:	e714      	b.n	8000648 <__aeabi_fadd+0xf4>
 800081e:	2d00      	cmp	r5, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x2d0>
 8000822:	e712      	b.n	800064a <__aeabi_fadd+0xf6>
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	03db      	lsls	r3, r3, #15
 8000828:	421a      	tst	r2, r3
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x2da>
 800082c:	e70d      	b.n	800064a <__aeabi_fadd+0xf6>
 800082e:	4641      	mov	r1, r8
 8000830:	4219      	tst	r1, r3
 8000832:	d000      	beq.n	8000836 <__aeabi_fadd+0x2e2>
 8000834:	e709      	b.n	800064a <__aeabi_fadd+0xf6>
 8000836:	4642      	mov	r2, r8
 8000838:	e707      	b.n	800064a <__aeabi_fadd+0xf6>
 800083a:	000c      	movs	r4, r1
 800083c:	0037      	movs	r7, r6
 800083e:	1aaa      	subs	r2, r5, r2
 8000840:	e6bc      	b.n	80005bc <__aeabi_fadd+0x68>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d013      	beq.n	800086e <__aeabi_fadd+0x31a>
 8000846:	000c      	movs	r4, r1
 8000848:	46c4      	mov	ip, r8
 800084a:	e6e2      	b.n	8000612 <__aeabi_fadd+0xbe>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x2fe>
 8000850:	e6fb      	b.n	800064a <__aeabi_fadd+0xf6>
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	03db      	lsls	r3, r3, #15
 8000856:	421a      	tst	r2, r3
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x308>
 800085a:	e6f6      	b.n	800064a <__aeabi_fadd+0xf6>
 800085c:	4640      	mov	r0, r8
 800085e:	4218      	tst	r0, r3
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x310>
 8000862:	e6f2      	b.n	800064a <__aeabi_fadd+0xf6>
 8000864:	000c      	movs	r4, r1
 8000866:	e6ef      	b.n	8000648 <__aeabi_fadd+0xf4>
 8000868:	2a00      	cmp	r2, #0
 800086a:	d000      	beq.n	800086e <__aeabi_fadd+0x31a>
 800086c:	e763      	b.n	8000736 <__aeabi_fadd+0x1e2>
 800086e:	2200      	movs	r2, #0
 8000870:	2400      	movs	r4, #0
 8000872:	4694      	mov	ip, r2
 8000874:	e6cd      	b.n	8000612 <__aeabi_fadd+0xbe>
 8000876:	46c4      	mov	ip, r8
 8000878:	e6cb      	b.n	8000612 <__aeabi_fadd+0xbe>
 800087a:	002a      	movs	r2, r5
 800087c:	0037      	movs	r7, r6
 800087e:	4452      	add	r2, sl
 8000880:	e703      	b.n	800068a <__aeabi_fadd+0x136>
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	7dffffff 	.word	0x7dffffff
 8000888:	fbffffff 	.word	0xfbffffff

0800088c <__aeabi_fdiv>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	464f      	mov	r7, r9
 8000890:	4646      	mov	r6, r8
 8000892:	46d6      	mov	lr, sl
 8000894:	0245      	lsls	r5, r0, #9
 8000896:	b5c0      	push	{r6, r7, lr}
 8000898:	0047      	lsls	r7, r0, #1
 800089a:	1c0c      	adds	r4, r1, #0
 800089c:	0a6d      	lsrs	r5, r5, #9
 800089e:	0e3f      	lsrs	r7, r7, #24
 80008a0:	0fc6      	lsrs	r6, r0, #31
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d066      	beq.n	8000974 <__aeabi_fdiv+0xe8>
 80008a6:	2fff      	cmp	r7, #255	; 0xff
 80008a8:	d06c      	beq.n	8000984 <__aeabi_fdiv+0xf8>
 80008aa:	2300      	movs	r3, #0
 80008ac:	00ea      	lsls	r2, r5, #3
 80008ae:	2580      	movs	r5, #128	; 0x80
 80008b0:	4699      	mov	r9, r3
 80008b2:	469a      	mov	sl, r3
 80008b4:	04ed      	lsls	r5, r5, #19
 80008b6:	4315      	orrs	r5, r2
 80008b8:	3f7f      	subs	r7, #127	; 0x7f
 80008ba:	0260      	lsls	r0, r4, #9
 80008bc:	0061      	lsls	r1, r4, #1
 80008be:	0a43      	lsrs	r3, r0, #9
 80008c0:	4698      	mov	r8, r3
 80008c2:	0e09      	lsrs	r1, r1, #24
 80008c4:	0fe4      	lsrs	r4, r4, #31
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d048      	beq.n	800095c <__aeabi_fdiv+0xd0>
 80008ca:	29ff      	cmp	r1, #255	; 0xff
 80008cc:	d010      	beq.n	80008f0 <__aeabi_fdiv+0x64>
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	00d8      	lsls	r0, r3, #3
 80008d2:	04d2      	lsls	r2, r2, #19
 80008d4:	4302      	orrs	r2, r0
 80008d6:	4690      	mov	r8, r2
 80008d8:	2000      	movs	r0, #0
 80008da:	397f      	subs	r1, #127	; 0x7f
 80008dc:	464a      	mov	r2, r9
 80008de:	0033      	movs	r3, r6
 80008e0:	1a7f      	subs	r7, r7, r1
 80008e2:	4302      	orrs	r2, r0
 80008e4:	496c      	ldr	r1, [pc, #432]	; (8000a98 <__aeabi_fdiv+0x20c>)
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	588a      	ldr	r2, [r1, r2]
 80008ea:	4063      	eors	r3, r4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4697      	mov	pc, r2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d16d      	bne.n	80009d0 <__aeabi_fdiv+0x144>
 80008f4:	2002      	movs	r0, #2
 80008f6:	3fff      	subs	r7, #255	; 0xff
 80008f8:	e033      	b.n	8000962 <__aeabi_fdiv+0xd6>
 80008fa:	2300      	movs	r3, #0
 80008fc:	4698      	mov	r8, r3
 80008fe:	0026      	movs	r6, r4
 8000900:	4645      	mov	r5, r8
 8000902:	4682      	mov	sl, r0
 8000904:	4653      	mov	r3, sl
 8000906:	2b02      	cmp	r3, #2
 8000908:	d100      	bne.n	800090c <__aeabi_fdiv+0x80>
 800090a:	e07f      	b.n	8000a0c <__aeabi_fdiv+0x180>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d100      	bne.n	8000912 <__aeabi_fdiv+0x86>
 8000910:	e094      	b.n	8000a3c <__aeabi_fdiv+0x1b0>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d017      	beq.n	8000946 <__aeabi_fdiv+0xba>
 8000916:	0038      	movs	r0, r7
 8000918:	307f      	adds	r0, #127	; 0x7f
 800091a:	2800      	cmp	r0, #0
 800091c:	dd5f      	ble.n	80009de <__aeabi_fdiv+0x152>
 800091e:	076b      	lsls	r3, r5, #29
 8000920:	d004      	beq.n	800092c <__aeabi_fdiv+0xa0>
 8000922:	230f      	movs	r3, #15
 8000924:	402b      	ands	r3, r5
 8000926:	2b04      	cmp	r3, #4
 8000928:	d000      	beq.n	800092c <__aeabi_fdiv+0xa0>
 800092a:	3504      	adds	r5, #4
 800092c:	012b      	lsls	r3, r5, #4
 800092e:	d503      	bpl.n	8000938 <__aeabi_fdiv+0xac>
 8000930:	0038      	movs	r0, r7
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <__aeabi_fdiv+0x210>)
 8000934:	3080      	adds	r0, #128	; 0x80
 8000936:	401d      	ands	r5, r3
 8000938:	28fe      	cmp	r0, #254	; 0xfe
 800093a:	dc67      	bgt.n	8000a0c <__aeabi_fdiv+0x180>
 800093c:	01ad      	lsls	r5, r5, #6
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	b2c0      	uxtb	r0, r0
 8000942:	e002      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000944:	001e      	movs	r6, r3
 8000946:	2000      	movs	r0, #0
 8000948:	2500      	movs	r5, #0
 800094a:	05c0      	lsls	r0, r0, #23
 800094c:	4328      	orrs	r0, r5
 800094e:	07f6      	lsls	r6, r6, #31
 8000950:	4330      	orrs	r0, r6
 8000952:	bce0      	pop	{r5, r6, r7}
 8000954:	46ba      	mov	sl, r7
 8000956:	46b1      	mov	r9, r6
 8000958:	46a8      	mov	r8, r5
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	2b00      	cmp	r3, #0
 800095e:	d12b      	bne.n	80009b8 <__aeabi_fdiv+0x12c>
 8000960:	2001      	movs	r0, #1
 8000962:	464a      	mov	r2, r9
 8000964:	0033      	movs	r3, r6
 8000966:	494e      	ldr	r1, [pc, #312]	; (8000aa0 <__aeabi_fdiv+0x214>)
 8000968:	4302      	orrs	r2, r0
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	588a      	ldr	r2, [r1, r2]
 800096e:	4063      	eors	r3, r4
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4697      	mov	pc, r2
 8000974:	2d00      	cmp	r5, #0
 8000976:	d113      	bne.n	80009a0 <__aeabi_fdiv+0x114>
 8000978:	2304      	movs	r3, #4
 800097a:	4699      	mov	r9, r3
 800097c:	3b03      	subs	r3, #3
 800097e:	2700      	movs	r7, #0
 8000980:	469a      	mov	sl, r3
 8000982:	e79a      	b.n	80008ba <__aeabi_fdiv+0x2e>
 8000984:	2d00      	cmp	r5, #0
 8000986:	d105      	bne.n	8000994 <__aeabi_fdiv+0x108>
 8000988:	2308      	movs	r3, #8
 800098a:	4699      	mov	r9, r3
 800098c:	3b06      	subs	r3, #6
 800098e:	27ff      	movs	r7, #255	; 0xff
 8000990:	469a      	mov	sl, r3
 8000992:	e792      	b.n	80008ba <__aeabi_fdiv+0x2e>
 8000994:	230c      	movs	r3, #12
 8000996:	4699      	mov	r9, r3
 8000998:	3b09      	subs	r3, #9
 800099a:	27ff      	movs	r7, #255	; 0xff
 800099c:	469a      	mov	sl, r3
 800099e:	e78c      	b.n	80008ba <__aeabi_fdiv+0x2e>
 80009a0:	0028      	movs	r0, r5
 80009a2:	f002 f985 	bl	8002cb0 <__clzsi2>
 80009a6:	2776      	movs	r7, #118	; 0x76
 80009a8:	1f43      	subs	r3, r0, #5
 80009aa:	409d      	lsls	r5, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	427f      	negs	r7, r7
 80009b0:	4699      	mov	r9, r3
 80009b2:	469a      	mov	sl, r3
 80009b4:	1a3f      	subs	r7, r7, r0
 80009b6:	e780      	b.n	80008ba <__aeabi_fdiv+0x2e>
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 f979 	bl	8002cb0 <__clzsi2>
 80009be:	4642      	mov	r2, r8
 80009c0:	1f43      	subs	r3, r0, #5
 80009c2:	2176      	movs	r1, #118	; 0x76
 80009c4:	409a      	lsls	r2, r3
 80009c6:	4249      	negs	r1, r1
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	4690      	mov	r8, r2
 80009cc:	2000      	movs	r0, #0
 80009ce:	e785      	b.n	80008dc <__aeabi_fdiv+0x50>
 80009d0:	21ff      	movs	r1, #255	; 0xff
 80009d2:	2003      	movs	r0, #3
 80009d4:	e782      	b.n	80008dc <__aeabi_fdiv+0x50>
 80009d6:	001e      	movs	r6, r3
 80009d8:	20ff      	movs	r0, #255	; 0xff
 80009da:	2500      	movs	r5, #0
 80009dc:	e7b5      	b.n	800094a <__aeabi_fdiv+0xbe>
 80009de:	2301      	movs	r3, #1
 80009e0:	1a1b      	subs	r3, r3, r0
 80009e2:	2b1b      	cmp	r3, #27
 80009e4:	dcaf      	bgt.n	8000946 <__aeabi_fdiv+0xba>
 80009e6:	379e      	adds	r7, #158	; 0x9e
 80009e8:	0029      	movs	r1, r5
 80009ea:	40bd      	lsls	r5, r7
 80009ec:	40d9      	lsrs	r1, r3
 80009ee:	1e6a      	subs	r2, r5, #1
 80009f0:	4195      	sbcs	r5, r2
 80009f2:	430d      	orrs	r5, r1
 80009f4:	076b      	lsls	r3, r5, #29
 80009f6:	d004      	beq.n	8000a02 <__aeabi_fdiv+0x176>
 80009f8:	230f      	movs	r3, #15
 80009fa:	402b      	ands	r3, r5
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fdiv+0x176>
 8000a00:	3504      	adds	r5, #4
 8000a02:	016b      	lsls	r3, r5, #5
 8000a04:	d544      	bpl.n	8000a90 <__aeabi_fdiv+0x204>
 8000a06:	2001      	movs	r0, #1
 8000a08:	2500      	movs	r5, #0
 8000a0a:	e79e      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000a0c:	20ff      	movs	r0, #255	; 0xff
 8000a0e:	2500      	movs	r5, #0
 8000a10:	e79b      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000a12:	2580      	movs	r5, #128	; 0x80
 8000a14:	2600      	movs	r6, #0
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	03ed      	lsls	r5, r5, #15
 8000a1a:	e796      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	4698      	mov	r8, r3
 8000a20:	2080      	movs	r0, #128	; 0x80
 8000a22:	03c0      	lsls	r0, r0, #15
 8000a24:	4205      	tst	r5, r0
 8000a26:	d009      	beq.n	8000a3c <__aeabi_fdiv+0x1b0>
 8000a28:	4643      	mov	r3, r8
 8000a2a:	4203      	tst	r3, r0
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_fdiv+0x1b0>
 8000a2e:	4645      	mov	r5, r8
 8000a30:	4305      	orrs	r5, r0
 8000a32:	026d      	lsls	r5, r5, #9
 8000a34:	0026      	movs	r6, r4
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	0a6d      	lsrs	r5, r5, #9
 8000a3a:	e786      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	03c0      	lsls	r0, r0, #15
 8000a40:	4305      	orrs	r5, r0
 8000a42:	026d      	lsls	r5, r5, #9
 8000a44:	20ff      	movs	r0, #255	; 0xff
 8000a46:	0a6d      	lsrs	r5, r5, #9
 8000a48:	e77f      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	016a      	lsls	r2, r5, #5
 8000a4e:	0148      	lsls	r0, r1, #5
 8000a50:	4282      	cmp	r2, r0
 8000a52:	d219      	bcs.n	8000a88 <__aeabi_fdiv+0x1fc>
 8000a54:	211b      	movs	r1, #27
 8000a56:	2500      	movs	r5, #0
 8000a58:	3f01      	subs	r7, #1
 8000a5a:	2601      	movs	r6, #1
 8000a5c:	0014      	movs	r4, r2
 8000a5e:	006d      	lsls	r5, r5, #1
 8000a60:	0052      	lsls	r2, r2, #1
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	db01      	blt.n	8000a6a <__aeabi_fdiv+0x1de>
 8000a66:	4290      	cmp	r0, r2
 8000a68:	d801      	bhi.n	8000a6e <__aeabi_fdiv+0x1e2>
 8000a6a:	1a12      	subs	r2, r2, r0
 8000a6c:	4335      	orrs	r5, r6
 8000a6e:	3901      	subs	r1, #1
 8000a70:	2900      	cmp	r1, #0
 8000a72:	d1f3      	bne.n	8000a5c <__aeabi_fdiv+0x1d0>
 8000a74:	1e50      	subs	r0, r2, #1
 8000a76:	4182      	sbcs	r2, r0
 8000a78:	0038      	movs	r0, r7
 8000a7a:	307f      	adds	r0, #127	; 0x7f
 8000a7c:	001e      	movs	r6, r3
 8000a7e:	4315      	orrs	r5, r2
 8000a80:	2800      	cmp	r0, #0
 8000a82:	dd00      	ble.n	8000a86 <__aeabi_fdiv+0x1fa>
 8000a84:	e74b      	b.n	800091e <__aeabi_fdiv+0x92>
 8000a86:	e7aa      	b.n	80009de <__aeabi_fdiv+0x152>
 8000a88:	211a      	movs	r1, #26
 8000a8a:	2501      	movs	r5, #1
 8000a8c:	1a12      	subs	r2, r2, r0
 8000a8e:	e7e4      	b.n	8000a5a <__aeabi_fdiv+0x1ce>
 8000a90:	01ad      	lsls	r5, r5, #6
 8000a92:	2000      	movs	r0, #0
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	e758      	b.n	800094a <__aeabi_fdiv+0xbe>
 8000a98:	0800a21c 	.word	0x0800a21c
 8000a9c:	f7ffffff 	.word	0xf7ffffff
 8000aa0:	0800a25c 	.word	0x0800a25c

08000aa4 <__eqsf2>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	0042      	lsls	r2, r0, #1
 8000aa8:	024e      	lsls	r6, r1, #9
 8000aaa:	004c      	lsls	r4, r1, #1
 8000aac:	0245      	lsls	r5, r0, #9
 8000aae:	0a6d      	lsrs	r5, r5, #9
 8000ab0:	0e12      	lsrs	r2, r2, #24
 8000ab2:	0fc3      	lsrs	r3, r0, #31
 8000ab4:	0a76      	lsrs	r6, r6, #9
 8000ab6:	0e24      	lsrs	r4, r4, #24
 8000ab8:	0fc9      	lsrs	r1, r1, #31
 8000aba:	2aff      	cmp	r2, #255	; 0xff
 8000abc:	d00f      	beq.n	8000ade <__eqsf2+0x3a>
 8000abe:	2cff      	cmp	r4, #255	; 0xff
 8000ac0:	d011      	beq.n	8000ae6 <__eqsf2+0x42>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	42a2      	cmp	r2, r4
 8000ac6:	d000      	beq.n	8000aca <__eqsf2+0x26>
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
 8000aca:	42b5      	cmp	r5, r6
 8000acc:	d1fc      	bne.n	8000ac8 <__eqsf2+0x24>
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d00d      	beq.n	8000aee <__eqsf2+0x4a>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d1f8      	bne.n	8000ac8 <__eqsf2+0x24>
 8000ad6:	0028      	movs	r0, r5
 8000ad8:	1e45      	subs	r5, r0, #1
 8000ada:	41a8      	sbcs	r0, r5
 8000adc:	e7f4      	b.n	8000ac8 <__eqsf2+0x24>
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d1f1      	bne.n	8000ac8 <__eqsf2+0x24>
 8000ae4:	e7eb      	b.n	8000abe <__eqsf2+0x1a>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2e00      	cmp	r6, #0
 8000aea:	d1ed      	bne.n	8000ac8 <__eqsf2+0x24>
 8000aec:	e7e9      	b.n	8000ac2 <__eqsf2+0x1e>
 8000aee:	2000      	movs	r0, #0
 8000af0:	e7ea      	b.n	8000ac8 <__eqsf2+0x24>
 8000af2:	46c0      	nop			; (mov r8, r8)

08000af4 <__gesf2>:
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	0042      	lsls	r2, r0, #1
 8000af8:	0246      	lsls	r6, r0, #9
 8000afa:	024d      	lsls	r5, r1, #9
 8000afc:	004c      	lsls	r4, r1, #1
 8000afe:	0fc3      	lsrs	r3, r0, #31
 8000b00:	0a76      	lsrs	r6, r6, #9
 8000b02:	0e12      	lsrs	r2, r2, #24
 8000b04:	0a6d      	lsrs	r5, r5, #9
 8000b06:	0e24      	lsrs	r4, r4, #24
 8000b08:	0fc8      	lsrs	r0, r1, #31
 8000b0a:	2aff      	cmp	r2, #255	; 0xff
 8000b0c:	d01f      	beq.n	8000b4e <__gesf2+0x5a>
 8000b0e:	2cff      	cmp	r4, #255	; 0xff
 8000b10:	d010      	beq.n	8000b34 <__gesf2+0x40>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	d11f      	bne.n	8000b56 <__gesf2+0x62>
 8000b16:	4271      	negs	r1, r6
 8000b18:	4171      	adcs	r1, r6
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d101      	bne.n	8000b22 <__gesf2+0x2e>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d01e      	beq.n	8000b60 <__gesf2+0x6c>
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d10e      	bne.n	8000b44 <__gesf2+0x50>
 8000b26:	4283      	cmp	r3, r0
 8000b28:	d01e      	beq.n	8000b68 <__gesf2+0x74>
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	1e58      	subs	r0, r3, #1
 8000b2e:	4008      	ands	r0, r1
 8000b30:	3801      	subs	r0, #1
 8000b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d126      	bne.n	8000b86 <__gesf2+0x92>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d1f4      	bne.n	8000b26 <__gesf2+0x32>
 8000b3c:	4271      	negs	r1, r6
 8000b3e:	4171      	adcs	r1, r6
 8000b40:	2900      	cmp	r1, #0
 8000b42:	d0f0      	beq.n	8000b26 <__gesf2+0x32>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d1f4      	bne.n	8000b32 <__gesf2+0x3e>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	e7f1      	b.n	8000b32 <__gesf2+0x3e>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d119      	bne.n	8000b86 <__gesf2+0x92>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d0ee      	beq.n	8000b34 <__gesf2+0x40>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d1e5      	bne.n	8000b26 <__gesf2+0x32>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d1e3      	bne.n	8000b26 <__gesf2+0x32>
 8000b5e:	e7e4      	b.n	8000b2a <__gesf2+0x36>
 8000b60:	2000      	movs	r0, #0
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d0e5      	beq.n	8000b32 <__gesf2+0x3e>
 8000b66:	e7e0      	b.n	8000b2a <__gesf2+0x36>
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	dc05      	bgt.n	8000b78 <__gesf2+0x84>
 8000b6c:	dbea      	blt.n	8000b44 <__gesf2+0x50>
 8000b6e:	42ae      	cmp	r6, r5
 8000b70:	d802      	bhi.n	8000b78 <__gesf2+0x84>
 8000b72:	d3e7      	bcc.n	8000b44 <__gesf2+0x50>
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7dc      	b.n	8000b32 <__gesf2+0x3e>
 8000b78:	4241      	negs	r1, r0
 8000b7a:	4141      	adcs	r1, r0
 8000b7c:	4248      	negs	r0, r1
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4008      	ands	r0, r1
 8000b82:	3801      	subs	r0, #1
 8000b84:	e7d5      	b.n	8000b32 <__gesf2+0x3e>
 8000b86:	2002      	movs	r0, #2
 8000b88:	4240      	negs	r0, r0
 8000b8a:	e7d2      	b.n	8000b32 <__gesf2+0x3e>

08000b8c <__lesf2>:
 8000b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8e:	0042      	lsls	r2, r0, #1
 8000b90:	0246      	lsls	r6, r0, #9
 8000b92:	024d      	lsls	r5, r1, #9
 8000b94:	004c      	lsls	r4, r1, #1
 8000b96:	0fc3      	lsrs	r3, r0, #31
 8000b98:	0a76      	lsrs	r6, r6, #9
 8000b9a:	0e12      	lsrs	r2, r2, #24
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e24      	lsrs	r4, r4, #24
 8000ba0:	0fc8      	lsrs	r0, r1, #31
 8000ba2:	2aff      	cmp	r2, #255	; 0xff
 8000ba4:	d00d      	beq.n	8000bc2 <__lesf2+0x36>
 8000ba6:	2cff      	cmp	r4, #255	; 0xff
 8000ba8:	d00f      	beq.n	8000bca <__lesf2+0x3e>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d123      	bne.n	8000bf6 <__lesf2+0x6a>
 8000bae:	4271      	negs	r1, r6
 8000bb0:	4171      	adcs	r1, r6
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d10f      	bne.n	8000bd6 <__lesf2+0x4a>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d10d      	bne.n	8000bd6 <__lesf2+0x4a>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d014      	beq.n	8000bea <__lesf2+0x5e>
 8000bc0:	e00d      	b.n	8000bde <__lesf2+0x52>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d110      	bne.n	8000be8 <__lesf2+0x5c>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d115      	bne.n	8000bf6 <__lesf2+0x6a>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d10c      	bne.n	8000be8 <__lesf2+0x5c>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d103      	bne.n	8000bda <__lesf2+0x4e>
 8000bd2:	4271      	negs	r1, r6
 8000bd4:	4171      	adcs	r1, r6
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d108      	bne.n	8000bec <__lesf2+0x60>
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	d010      	beq.n	8000c00 <__lesf2+0x74>
 8000bde:	2102      	movs	r1, #2
 8000be0:	1e58      	subs	r0, r3, #1
 8000be2:	4008      	ands	r0, r1
 8000be4:	3801      	subs	r0, #1
 8000be6:	e000      	b.n	8000bea <__lesf2+0x5e>
 8000be8:	2002      	movs	r0, #2
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d1fc      	bne.n	8000bea <__lesf2+0x5e>
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	e7f9      	b.n	8000bea <__lesf2+0x5e>
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d1ef      	bne.n	8000bda <__lesf2+0x4e>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d1ed      	bne.n	8000bda <__lesf2+0x4e>
 8000bfe:	e7ee      	b.n	8000bde <__lesf2+0x52>
 8000c00:	42a2      	cmp	r2, r4
 8000c02:	dc05      	bgt.n	8000c10 <__lesf2+0x84>
 8000c04:	dbf2      	blt.n	8000bec <__lesf2+0x60>
 8000c06:	42ae      	cmp	r6, r5
 8000c08:	d802      	bhi.n	8000c10 <__lesf2+0x84>
 8000c0a:	d3ef      	bcc.n	8000bec <__lesf2+0x60>
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e7ec      	b.n	8000bea <__lesf2+0x5e>
 8000c10:	4241      	negs	r1, r0
 8000c12:	4141      	adcs	r1, r0
 8000c14:	4248      	negs	r0, r1
 8000c16:	2102      	movs	r1, #2
 8000c18:	4008      	ands	r0, r1
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	e7e5      	b.n	8000bea <__lesf2+0x5e>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <__aeabi_fmul>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4657      	mov	r7, sl
 8000c24:	464e      	mov	r6, r9
 8000c26:	4645      	mov	r5, r8
 8000c28:	46de      	mov	lr, fp
 8000c2a:	0244      	lsls	r4, r0, #9
 8000c2c:	b5e0      	push	{r5, r6, r7, lr}
 8000c2e:	0045      	lsls	r5, r0, #1
 8000c30:	1c0f      	adds	r7, r1, #0
 8000c32:	0a64      	lsrs	r4, r4, #9
 8000c34:	0e2d      	lsrs	r5, r5, #24
 8000c36:	0fc6      	lsrs	r6, r0, #31
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d047      	beq.n	8000ccc <__aeabi_fmul+0xac>
 8000c3c:	2dff      	cmp	r5, #255	; 0xff
 8000c3e:	d04d      	beq.n	8000cdc <__aeabi_fmul+0xbc>
 8000c40:	2300      	movs	r3, #0
 8000c42:	2080      	movs	r0, #128	; 0x80
 8000c44:	469a      	mov	sl, r3
 8000c46:	469b      	mov	fp, r3
 8000c48:	00e4      	lsls	r4, r4, #3
 8000c4a:	04c0      	lsls	r0, r0, #19
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	3d7f      	subs	r5, #127	; 0x7f
 8000c50:	0278      	lsls	r0, r7, #9
 8000c52:	0a43      	lsrs	r3, r0, #9
 8000c54:	4699      	mov	r9, r3
 8000c56:	007a      	lsls	r2, r7, #1
 8000c58:	0ffb      	lsrs	r3, r7, #31
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	0e12      	lsrs	r2, r2, #24
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d044      	beq.n	8000cec <__aeabi_fmul+0xcc>
 8000c62:	2aff      	cmp	r2, #255	; 0xff
 8000c64:	d011      	beq.n	8000c8a <__aeabi_fmul+0x6a>
 8000c66:	00d8      	lsls	r0, r3, #3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	04db      	lsls	r3, r3, #19
 8000c6c:	4303      	orrs	r3, r0
 8000c6e:	4699      	mov	r9, r3
 8000c70:	2000      	movs	r0, #0
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	18ad      	adds	r5, r5, r2
 8000c76:	4647      	mov	r7, r8
 8000c78:	4653      	mov	r3, sl
 8000c7a:	4077      	eors	r7, r6
 8000c7c:	1c69      	adds	r1, r5, #1
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d83f      	bhi.n	8000d02 <__aeabi_fmul+0xe2>
 8000c82:	4a72      	ldr	r2, [pc, #456]	; (8000e4c <__aeabi_fmul+0x22c>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	35ff      	adds	r5, #255	; 0xff
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fmul+0x72>
 8000c90:	e079      	b.n	8000d86 <__aeabi_fmul+0x166>
 8000c92:	4652      	mov	r2, sl
 8000c94:	2302      	movs	r3, #2
 8000c96:	431a      	orrs	r2, r3
 8000c98:	4692      	mov	sl, r2
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	e7eb      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000c9e:	4647      	mov	r7, r8
 8000ca0:	464c      	mov	r4, r9
 8000ca2:	4683      	mov	fp, r0
 8000ca4:	465b      	mov	r3, fp
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d028      	beq.n	8000cfc <__aeabi_fmul+0xdc>
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x90>
 8000cae:	e0c6      	b.n	8000e3e <__aeabi_fmul+0x21e>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d14f      	bne.n	8000d54 <__aeabi_fmul+0x134>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	05c0      	lsls	r0, r0, #23
 8000cba:	07ff      	lsls	r7, r7, #31
 8000cbc:	4320      	orrs	r0, r4
 8000cbe:	4338      	orrs	r0, r7
 8000cc0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc2:	46bb      	mov	fp, r7
 8000cc4:	46b2      	mov	sl, r6
 8000cc6:	46a9      	mov	r9, r5
 8000cc8:	46a0      	mov	r8, r4
 8000cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d171      	bne.n	8000db4 <__aeabi_fmul+0x194>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b9      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d163      	bne.n	8000da8 <__aeabi_fmul+0x188>
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	3b06      	subs	r3, #6
 8000ce6:	25ff      	movs	r5, #255	; 0xff
 8000ce8:	469b      	mov	fp, r3
 8000cea:	e7b1      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d150      	bne.n	8000d92 <__aeabi_fmul+0x172>
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	4692      	mov	sl, r2
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	e7bc      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000cfc:	20ff      	movs	r0, #255	; 0xff
 8000cfe:	2400      	movs	r4, #0
 8000d00:	e7da      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000d02:	4648      	mov	r0, r9
 8000d04:	0c26      	lsrs	r6, r4, #16
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c22      	lsrs	r2, r4, #16
 8000d0a:	0404      	lsls	r4, r0, #16
 8000d0c:	0c24      	lsrs	r4, r4, #16
 8000d0e:	464b      	mov	r3, r9
 8000d10:	0020      	movs	r0, r4
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	4350      	muls	r0, r2
 8000d16:	4374      	muls	r4, r6
 8000d18:	435a      	muls	r2, r3
 8000d1a:	435e      	muls	r6, r3
 8000d1c:	1912      	adds	r2, r2, r4
 8000d1e:	0c03      	lsrs	r3, r0, #16
 8000d20:	189b      	adds	r3, r3, r2
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d903      	bls.n	8000d2e <__aeabi_fmul+0x10e>
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0252      	lsls	r2, r2, #9
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	4466      	add	r6, ip
 8000d2e:	0400      	lsls	r0, r0, #16
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	0c00      	lsrs	r0, r0, #16
 8000d34:	1812      	adds	r2, r2, r0
 8000d36:	0194      	lsls	r4, r2, #6
 8000d38:	1e60      	subs	r0, r4, #1
 8000d3a:	4184      	sbcs	r4, r0
 8000d3c:	0c1b      	lsrs	r3, r3, #16
 8000d3e:	0e92      	lsrs	r2, r2, #26
 8000d40:	199b      	adds	r3, r3, r6
 8000d42:	4314      	orrs	r4, r2
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	d572      	bpl.n	8000e32 <__aeabi_fmul+0x212>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	0863      	lsrs	r3, r4, #1
 8000d50:	4004      	ands	r4, r0
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0008      	movs	r0, r1
 8000d56:	307f      	adds	r0, #127	; 0x7f
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	dd3c      	ble.n	8000dd6 <__aeabi_fmul+0x1b6>
 8000d5c:	0763      	lsls	r3, r4, #29
 8000d5e:	d004      	beq.n	8000d6a <__aeabi_fmul+0x14a>
 8000d60:	230f      	movs	r3, #15
 8000d62:	4023      	ands	r3, r4
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fmul+0x14a>
 8000d68:	3404      	adds	r4, #4
 8000d6a:	0123      	lsls	r3, r4, #4
 8000d6c:	d503      	bpl.n	8000d76 <__aeabi_fmul+0x156>
 8000d6e:	3180      	adds	r1, #128	; 0x80
 8000d70:	0008      	movs	r0, r1
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <__aeabi_fmul+0x230>)
 8000d74:	401c      	ands	r4, r3
 8000d76:	28fe      	cmp	r0, #254	; 0xfe
 8000d78:	dcc0      	bgt.n	8000cfc <__aeabi_fmul+0xdc>
 8000d7a:	01a4      	lsls	r4, r4, #6
 8000d7c:	0a64      	lsrs	r4, r4, #9
 8000d7e:	b2c0      	uxtb	r0, r0
 8000d80:	e79a      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000d82:	0037      	movs	r7, r6
 8000d84:	e78e      	b.n	8000ca4 <__aeabi_fmul+0x84>
 8000d86:	4652      	mov	r2, sl
 8000d88:	2303      	movs	r3, #3
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	4692      	mov	sl, r2
 8000d8e:	2003      	movs	r0, #3
 8000d90:	e771      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000d92:	4648      	mov	r0, r9
 8000d94:	f001 ff8c 	bl	8002cb0 <__clzsi2>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1f43      	subs	r3, r0, #5
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4691      	mov	r9, r2
 8000da2:	2000      	movs	r0, #0
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e766      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000da8:	230c      	movs	r3, #12
 8000daa:	469a      	mov	sl, r3
 8000dac:	3b09      	subs	r3, #9
 8000dae:	25ff      	movs	r5, #255	; 0xff
 8000db0:	469b      	mov	fp, r3
 8000db2:	e74d      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000db4:	0020      	movs	r0, r4
 8000db6:	f001 ff7b 	bl	8002cb0 <__clzsi2>
 8000dba:	2576      	movs	r5, #118	; 0x76
 8000dbc:	1f43      	subs	r3, r0, #5
 8000dbe:	409c      	lsls	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	426d      	negs	r5, r5
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	1a2d      	subs	r5, r5, r0
 8000dca:	e741      	b.n	8000c50 <__aeabi_fmul+0x30>
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	2700      	movs	r7, #0
 8000dd0:	20ff      	movs	r0, #255	; 0xff
 8000dd2:	03e4      	lsls	r4, r4, #15
 8000dd4:	e770      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	1a1b      	subs	r3, r3, r0
 8000dda:	2b1b      	cmp	r3, #27
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_fmul+0x1c0>
 8000dde:	e769      	b.n	8000cb4 <__aeabi_fmul+0x94>
 8000de0:	319e      	adds	r1, #158	; 0x9e
 8000de2:	0020      	movs	r0, r4
 8000de4:	408c      	lsls	r4, r1
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	1e63      	subs	r3, r4, #1
 8000dea:	419c      	sbcs	r4, r3
 8000dec:	4304      	orrs	r4, r0
 8000dee:	0763      	lsls	r3, r4, #29
 8000df0:	d004      	beq.n	8000dfc <__aeabi_fmul+0x1dc>
 8000df2:	230f      	movs	r3, #15
 8000df4:	4023      	ands	r3, r4
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fmul+0x1dc>
 8000dfa:	3404      	adds	r4, #4
 8000dfc:	0163      	lsls	r3, r4, #5
 8000dfe:	d51a      	bpl.n	8000e36 <__aeabi_fmul+0x216>
 8000e00:	2001      	movs	r0, #1
 8000e02:	2400      	movs	r4, #0
 8000e04:	e758      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e06:	2080      	movs	r0, #128	; 0x80
 8000e08:	03c0      	lsls	r0, r0, #15
 8000e0a:	4204      	tst	r4, r0
 8000e0c:	d009      	beq.n	8000e22 <__aeabi_fmul+0x202>
 8000e0e:	464b      	mov	r3, r9
 8000e10:	4203      	tst	r3, r0
 8000e12:	d106      	bne.n	8000e22 <__aeabi_fmul+0x202>
 8000e14:	464c      	mov	r4, r9
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	4647      	mov	r7, r8
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e74a      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e22:	2080      	movs	r0, #128	; 0x80
 8000e24:	03c0      	lsls	r0, r0, #15
 8000e26:	4304      	orrs	r4, r0
 8000e28:	0264      	lsls	r4, r4, #9
 8000e2a:	0037      	movs	r7, r6
 8000e2c:	20ff      	movs	r0, #255	; 0xff
 8000e2e:	0a64      	lsrs	r4, r4, #9
 8000e30:	e742      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e32:	0029      	movs	r1, r5
 8000e34:	e78e      	b.n	8000d54 <__aeabi_fmul+0x134>
 8000e36:	01a4      	lsls	r4, r4, #6
 8000e38:	2000      	movs	r0, #0
 8000e3a:	0a64      	lsrs	r4, r4, #9
 8000e3c:	e73c      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e3e:	2080      	movs	r0, #128	; 0x80
 8000e40:	03c0      	lsls	r0, r0, #15
 8000e42:	4304      	orrs	r4, r0
 8000e44:	0264      	lsls	r4, r4, #9
 8000e46:	20ff      	movs	r0, #255	; 0xff
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e735      	b.n	8000cb8 <__aeabi_fmul+0x98>
 8000e4c:	0800a29c 	.word	0x0800a29c
 8000e50:	f7ffffff 	.word	0xf7ffffff

08000e54 <__aeabi_i2f>:
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d013      	beq.n	8000e82 <__aeabi_i2f+0x2e>
 8000e5a:	17c3      	asrs	r3, r0, #31
 8000e5c:	18c5      	adds	r5, r0, r3
 8000e5e:	405d      	eors	r5, r3
 8000e60:	0fc4      	lsrs	r4, r0, #31
 8000e62:	0028      	movs	r0, r5
 8000e64:	f001 ff24 	bl	8002cb0 <__clzsi2>
 8000e68:	239e      	movs	r3, #158	; 0x9e
 8000e6a:	0001      	movs	r1, r0
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b96      	cmp	r3, #150	; 0x96
 8000e70:	dc0f      	bgt.n	8000e92 <__aeabi_i2f+0x3e>
 8000e72:	2808      	cmp	r0, #8
 8000e74:	dd01      	ble.n	8000e7a <__aeabi_i2f+0x26>
 8000e76:	3908      	subs	r1, #8
 8000e78:	408d      	lsls	r5, r1
 8000e7a:	026d      	lsls	r5, r5, #9
 8000e7c:	0a6d      	lsrs	r5, r5, #9
 8000e7e:	b2d8      	uxtb	r0, r3
 8000e80:	e002      	b.n	8000e88 <__aeabi_i2f+0x34>
 8000e82:	2400      	movs	r4, #0
 8000e84:	2000      	movs	r0, #0
 8000e86:	2500      	movs	r5, #0
 8000e88:	05c0      	lsls	r0, r0, #23
 8000e8a:	4328      	orrs	r0, r5
 8000e8c:	07e4      	lsls	r4, r4, #31
 8000e8e:	4320      	orrs	r0, r4
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
 8000e92:	2b99      	cmp	r3, #153	; 0x99
 8000e94:	dd0b      	ble.n	8000eae <__aeabi_i2f+0x5a>
 8000e96:	2205      	movs	r2, #5
 8000e98:	002e      	movs	r6, r5
 8000e9a:	1a12      	subs	r2, r2, r0
 8000e9c:	40d6      	lsrs	r6, r2
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	321b      	adds	r2, #27
 8000ea2:	4095      	lsls	r5, r2
 8000ea4:	0028      	movs	r0, r5
 8000ea6:	1e45      	subs	r5, r0, #1
 8000ea8:	41a8      	sbcs	r0, r5
 8000eaa:	0035      	movs	r5, r6
 8000eac:	4305      	orrs	r5, r0
 8000eae:	2905      	cmp	r1, #5
 8000eb0:	dd01      	ble.n	8000eb6 <__aeabi_i2f+0x62>
 8000eb2:	1f4a      	subs	r2, r1, #5
 8000eb4:	4095      	lsls	r5, r2
 8000eb6:	002a      	movs	r2, r5
 8000eb8:	4e08      	ldr	r6, [pc, #32]	; (8000edc <__aeabi_i2f+0x88>)
 8000eba:	4032      	ands	r2, r6
 8000ebc:	0768      	lsls	r0, r5, #29
 8000ebe:	d009      	beq.n	8000ed4 <__aeabi_i2f+0x80>
 8000ec0:	200f      	movs	r0, #15
 8000ec2:	4028      	ands	r0, r5
 8000ec4:	2804      	cmp	r0, #4
 8000ec6:	d005      	beq.n	8000ed4 <__aeabi_i2f+0x80>
 8000ec8:	3204      	adds	r2, #4
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d502      	bpl.n	8000ed4 <__aeabi_i2f+0x80>
 8000ece:	239f      	movs	r3, #159	; 0x9f
 8000ed0:	4032      	ands	r2, r6
 8000ed2:	1a5b      	subs	r3, r3, r1
 8000ed4:	0192      	lsls	r2, r2, #6
 8000ed6:	0a55      	lsrs	r5, r2, #9
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	e7d5      	b.n	8000e88 <__aeabi_i2f+0x34>
 8000edc:	fbffffff 	.word	0xfbffffff

08000ee0 <__aeabi_dadd>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	464f      	mov	r7, r9
 8000ee4:	46d6      	mov	lr, sl
 8000ee6:	4646      	mov	r6, r8
 8000ee8:	000d      	movs	r5, r1
 8000eea:	0001      	movs	r1, r0
 8000eec:	0018      	movs	r0, r3
 8000eee:	b5c0      	push	{r6, r7, lr}
 8000ef0:	0017      	movs	r7, r2
 8000ef2:	032b      	lsls	r3, r5, #12
 8000ef4:	0a5a      	lsrs	r2, r3, #9
 8000ef6:	0f4b      	lsrs	r3, r1, #29
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	00ca      	lsls	r2, r1, #3
 8000efc:	4691      	mov	r9, r2
 8000efe:	0302      	lsls	r2, r0, #12
 8000f00:	006e      	lsls	r6, r5, #1
 8000f02:	0041      	lsls	r1, r0, #1
 8000f04:	0a52      	lsrs	r2, r2, #9
 8000f06:	0fec      	lsrs	r4, r5, #31
 8000f08:	0f7d      	lsrs	r5, r7, #29
 8000f0a:	4315      	orrs	r5, r2
 8000f0c:	0d76      	lsrs	r6, r6, #21
 8000f0e:	0d49      	lsrs	r1, r1, #21
 8000f10:	0fc0      	lsrs	r0, r0, #31
 8000f12:	4682      	mov	sl, r0
 8000f14:	46ac      	mov	ip, r5
 8000f16:	00ff      	lsls	r7, r7, #3
 8000f18:	1a72      	subs	r2, r6, r1
 8000f1a:	4284      	cmp	r4, r0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dadd+0x40>
 8000f1e:	e098      	b.n	8001052 <__aeabi_dadd+0x172>
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	dc00      	bgt.n	8000f26 <__aeabi_dadd+0x46>
 8000f24:	e081      	b.n	800102a <__aeabi_dadd+0x14a>
 8000f26:	2900      	cmp	r1, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dadd+0x4c>
 8000f2a:	e0b6      	b.n	800109a <__aeabi_dadd+0x1ba>
 8000f2c:	49c9      	ldr	r1, [pc, #804]	; (8001254 <__aeabi_dadd+0x374>)
 8000f2e:	428e      	cmp	r6, r1
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x54>
 8000f32:	e172      	b.n	800121a <__aeabi_dadd+0x33a>
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0028      	movs	r0, r5
 8000f38:	0409      	lsls	r1, r1, #16
 8000f3a:	4308      	orrs	r0, r1
 8000f3c:	4684      	mov	ip, r0
 8000f3e:	2a38      	cmp	r2, #56	; 0x38
 8000f40:	dd00      	ble.n	8000f44 <__aeabi_dadd+0x64>
 8000f42:	e15e      	b.n	8001202 <__aeabi_dadd+0x322>
 8000f44:	2a1f      	cmp	r2, #31
 8000f46:	dd00      	ble.n	8000f4a <__aeabi_dadd+0x6a>
 8000f48:	e1ee      	b.n	8001328 <__aeabi_dadd+0x448>
 8000f4a:	2020      	movs	r0, #32
 8000f4c:	0039      	movs	r1, r7
 8000f4e:	4665      	mov	r5, ip
 8000f50:	1a80      	subs	r0, r0, r2
 8000f52:	4087      	lsls	r7, r0
 8000f54:	40d1      	lsrs	r1, r2
 8000f56:	4085      	lsls	r5, r0
 8000f58:	430d      	orrs	r5, r1
 8000f5a:	0039      	movs	r1, r7
 8000f5c:	1e4f      	subs	r7, r1, #1
 8000f5e:	41b9      	sbcs	r1, r7
 8000f60:	4667      	mov	r7, ip
 8000f62:	40d7      	lsrs	r7, r2
 8000f64:	4329      	orrs	r1, r5
 8000f66:	1bdb      	subs	r3, r3, r7
 8000f68:	464a      	mov	r2, r9
 8000f6a:	1a55      	subs	r5, r2, r1
 8000f6c:	45a9      	cmp	r9, r5
 8000f6e:	4189      	sbcs	r1, r1
 8000f70:	4249      	negs	r1, r1
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	4698      	mov	r8, r3
 8000f76:	4643      	mov	r3, r8
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	d400      	bmi.n	8000f7e <__aeabi_dadd+0x9e>
 8000f7c:	e0cc      	b.n	8001118 <__aeabi_dadd+0x238>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	0a5b      	lsrs	r3, r3, #9
 8000f84:	4698      	mov	r8, r3
 8000f86:	4643      	mov	r3, r8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0xae>
 8000f8c:	e12c      	b.n	80011e8 <__aeabi_dadd+0x308>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	f001 fe8e 	bl	8002cb0 <__clzsi2>
 8000f94:	0001      	movs	r1, r0
 8000f96:	3908      	subs	r1, #8
 8000f98:	2220      	movs	r2, #32
 8000f9a:	0028      	movs	r0, r5
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	1a52      	subs	r2, r2, r1
 8000fa0:	408b      	lsls	r3, r1
 8000fa2:	40d0      	lsrs	r0, r2
 8000fa4:	408d      	lsls	r5, r1
 8000fa6:	4303      	orrs	r3, r0
 8000fa8:	428e      	cmp	r6, r1
 8000faa:	dd00      	ble.n	8000fae <__aeabi_dadd+0xce>
 8000fac:	e117      	b.n	80011de <__aeabi_dadd+0x2fe>
 8000fae:	1b8e      	subs	r6, r1, r6
 8000fb0:	1c72      	adds	r2, r6, #1
 8000fb2:	2a1f      	cmp	r2, #31
 8000fb4:	dd00      	ble.n	8000fb8 <__aeabi_dadd+0xd8>
 8000fb6:	e1a7      	b.n	8001308 <__aeabi_dadd+0x428>
 8000fb8:	2120      	movs	r1, #32
 8000fba:	0018      	movs	r0, r3
 8000fbc:	002e      	movs	r6, r5
 8000fbe:	1a89      	subs	r1, r1, r2
 8000fc0:	408d      	lsls	r5, r1
 8000fc2:	4088      	lsls	r0, r1
 8000fc4:	40d6      	lsrs	r6, r2
 8000fc6:	40d3      	lsrs	r3, r2
 8000fc8:	1e69      	subs	r1, r5, #1
 8000fca:	418d      	sbcs	r5, r1
 8000fcc:	4330      	orrs	r0, r6
 8000fce:	4698      	mov	r8, r3
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	4305      	orrs	r5, r0
 8000fd4:	076b      	lsls	r3, r5, #29
 8000fd6:	d009      	beq.n	8000fec <__aeabi_dadd+0x10c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	402b      	ands	r3, r5
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d005      	beq.n	8000fec <__aeabi_dadd+0x10c>
 8000fe0:	1d2b      	adds	r3, r5, #4
 8000fe2:	42ab      	cmp	r3, r5
 8000fe4:	41ad      	sbcs	r5, r5
 8000fe6:	426d      	negs	r5, r5
 8000fe8:	44a8      	add	r8, r5
 8000fea:	001d      	movs	r5, r3
 8000fec:	4643      	mov	r3, r8
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_dadd+0x114>
 8000ff2:	e094      	b.n	800111e <__aeabi_dadd+0x23e>
 8000ff4:	4b97      	ldr	r3, [pc, #604]	; (8001254 <__aeabi_dadd+0x374>)
 8000ff6:	1c72      	adds	r2, r6, #1
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x11e>
 8000ffc:	e09d      	b.n	800113a <__aeabi_dadd+0x25a>
 8000ffe:	4641      	mov	r1, r8
 8001000:	4b95      	ldr	r3, [pc, #596]	; (8001258 <__aeabi_dadd+0x378>)
 8001002:	08ed      	lsrs	r5, r5, #3
 8001004:	4019      	ands	r1, r3
 8001006:	000b      	movs	r3, r1
 8001008:	0552      	lsls	r2, r2, #21
 800100a:	0749      	lsls	r1, r1, #29
 800100c:	025b      	lsls	r3, r3, #9
 800100e:	4329      	orrs	r1, r5
 8001010:	0b1b      	lsrs	r3, r3, #12
 8001012:	0d52      	lsrs	r2, r2, #21
 8001014:	0512      	lsls	r2, r2, #20
 8001016:	4313      	orrs	r3, r2
 8001018:	07e4      	lsls	r4, r4, #31
 800101a:	4323      	orrs	r3, r4
 800101c:	0008      	movs	r0, r1
 800101e:	0019      	movs	r1, r3
 8001020:	bce0      	pop	{r5, r6, r7}
 8001022:	46ba      	mov	sl, r7
 8001024:	46b1      	mov	r9, r6
 8001026:	46a8      	mov	r8, r5
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102a:	2a00      	cmp	r2, #0
 800102c:	d043      	beq.n	80010b6 <__aeabi_dadd+0x1d6>
 800102e:	1b8a      	subs	r2, r1, r6
 8001030:	2e00      	cmp	r6, #0
 8001032:	d000      	beq.n	8001036 <__aeabi_dadd+0x156>
 8001034:	e12a      	b.n	800128c <__aeabi_dadd+0x3ac>
 8001036:	464c      	mov	r4, r9
 8001038:	431c      	orrs	r4, r3
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x15e>
 800103c:	e1d1      	b.n	80013e2 <__aeabi_dadd+0x502>
 800103e:	1e54      	subs	r4, r2, #1
 8001040:	2a01      	cmp	r2, #1
 8001042:	d100      	bne.n	8001046 <__aeabi_dadd+0x166>
 8001044:	e21f      	b.n	8001486 <__aeabi_dadd+0x5a6>
 8001046:	4d83      	ldr	r5, [pc, #524]	; (8001254 <__aeabi_dadd+0x374>)
 8001048:	42aa      	cmp	r2, r5
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x16e>
 800104c:	e272      	b.n	8001534 <__aeabi_dadd+0x654>
 800104e:	0022      	movs	r2, r4
 8001050:	e123      	b.n	800129a <__aeabi_dadd+0x3ba>
 8001052:	2a00      	cmp	r2, #0
 8001054:	dc00      	bgt.n	8001058 <__aeabi_dadd+0x178>
 8001056:	e098      	b.n	800118a <__aeabi_dadd+0x2aa>
 8001058:	2900      	cmp	r1, #0
 800105a:	d042      	beq.n	80010e2 <__aeabi_dadd+0x202>
 800105c:	497d      	ldr	r1, [pc, #500]	; (8001254 <__aeabi_dadd+0x374>)
 800105e:	428e      	cmp	r6, r1
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x184>
 8001062:	e0da      	b.n	800121a <__aeabi_dadd+0x33a>
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0028      	movs	r0, r5
 8001068:	0409      	lsls	r1, r1, #16
 800106a:	4308      	orrs	r0, r1
 800106c:	4684      	mov	ip, r0
 800106e:	2a38      	cmp	r2, #56	; 0x38
 8001070:	dd00      	ble.n	8001074 <__aeabi_dadd+0x194>
 8001072:	e129      	b.n	80012c8 <__aeabi_dadd+0x3e8>
 8001074:	2a1f      	cmp	r2, #31
 8001076:	dc00      	bgt.n	800107a <__aeabi_dadd+0x19a>
 8001078:	e187      	b.n	800138a <__aeabi_dadd+0x4aa>
 800107a:	0011      	movs	r1, r2
 800107c:	4665      	mov	r5, ip
 800107e:	3920      	subs	r1, #32
 8001080:	40cd      	lsrs	r5, r1
 8001082:	2a20      	cmp	r2, #32
 8001084:	d004      	beq.n	8001090 <__aeabi_dadd+0x1b0>
 8001086:	2040      	movs	r0, #64	; 0x40
 8001088:	4661      	mov	r1, ip
 800108a:	1a82      	subs	r2, r0, r2
 800108c:	4091      	lsls	r1, r2
 800108e:	430f      	orrs	r7, r1
 8001090:	0039      	movs	r1, r7
 8001092:	1e4f      	subs	r7, r1, #1
 8001094:	41b9      	sbcs	r1, r7
 8001096:	430d      	orrs	r5, r1
 8001098:	e11b      	b.n	80012d2 <__aeabi_dadd+0x3f2>
 800109a:	0029      	movs	r1, r5
 800109c:	4339      	orrs	r1, r7
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x1c2>
 80010a0:	e0b5      	b.n	800120e <__aeabi_dadd+0x32e>
 80010a2:	1e51      	subs	r1, r2, #1
 80010a4:	2a01      	cmp	r2, #1
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x1ca>
 80010a8:	e1ab      	b.n	8001402 <__aeabi_dadd+0x522>
 80010aa:	486a      	ldr	r0, [pc, #424]	; (8001254 <__aeabi_dadd+0x374>)
 80010ac:	4282      	cmp	r2, r0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x1d2>
 80010b0:	e1b2      	b.n	8001418 <__aeabi_dadd+0x538>
 80010b2:	000a      	movs	r2, r1
 80010b4:	e743      	b.n	8000f3e <__aeabi_dadd+0x5e>
 80010b6:	4969      	ldr	r1, [pc, #420]	; (800125c <__aeabi_dadd+0x37c>)
 80010b8:	1c75      	adds	r5, r6, #1
 80010ba:	420d      	tst	r5, r1
 80010bc:	d000      	beq.n	80010c0 <__aeabi_dadd+0x1e0>
 80010be:	e0cf      	b.n	8001260 <__aeabi_dadd+0x380>
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_dadd+0x1e6>
 80010c4:	e193      	b.n	80013ee <__aeabi_dadd+0x50e>
 80010c6:	4649      	mov	r1, r9
 80010c8:	4319      	orrs	r1, r3
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x1ee>
 80010cc:	e1d1      	b.n	8001472 <__aeabi_dadd+0x592>
 80010ce:	4661      	mov	r1, ip
 80010d0:	4339      	orrs	r1, r7
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x1f6>
 80010d4:	e1e3      	b.n	800149e <__aeabi_dadd+0x5be>
 80010d6:	4649      	mov	r1, r9
 80010d8:	0758      	lsls	r0, r3, #29
 80010da:	08c9      	lsrs	r1, r1, #3
 80010dc:	4301      	orrs	r1, r0
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	e026      	b.n	8001130 <__aeabi_dadd+0x250>
 80010e2:	0029      	movs	r1, r5
 80010e4:	4339      	orrs	r1, r7
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x20a>
 80010e8:	e091      	b.n	800120e <__aeabi_dadd+0x32e>
 80010ea:	1e51      	subs	r1, r2, #1
 80010ec:	2a01      	cmp	r2, #1
 80010ee:	d005      	beq.n	80010fc <__aeabi_dadd+0x21c>
 80010f0:	4858      	ldr	r0, [pc, #352]	; (8001254 <__aeabi_dadd+0x374>)
 80010f2:	4282      	cmp	r2, r0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dadd+0x218>
 80010f6:	e18f      	b.n	8001418 <__aeabi_dadd+0x538>
 80010f8:	000a      	movs	r2, r1
 80010fa:	e7b8      	b.n	800106e <__aeabi_dadd+0x18e>
 80010fc:	003d      	movs	r5, r7
 80010fe:	444d      	add	r5, r9
 8001100:	454d      	cmp	r5, r9
 8001102:	4189      	sbcs	r1, r1
 8001104:	4463      	add	r3, ip
 8001106:	4698      	mov	r8, r3
 8001108:	4249      	negs	r1, r1
 800110a:	4488      	add	r8, r1
 800110c:	4643      	mov	r3, r8
 800110e:	2602      	movs	r6, #2
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	d500      	bpl.n	8001116 <__aeabi_dadd+0x236>
 8001114:	e0eb      	b.n	80012ee <__aeabi_dadd+0x40e>
 8001116:	3e01      	subs	r6, #1
 8001118:	076b      	lsls	r3, r5, #29
 800111a:	d000      	beq.n	800111e <__aeabi_dadd+0x23e>
 800111c:	e75c      	b.n	8000fd8 <__aeabi_dadd+0xf8>
 800111e:	4643      	mov	r3, r8
 8001120:	08e9      	lsrs	r1, r5, #3
 8001122:	075a      	lsls	r2, r3, #29
 8001124:	4311      	orrs	r1, r2
 8001126:	0032      	movs	r2, r6
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	484a      	ldr	r0, [pc, #296]	; (8001254 <__aeabi_dadd+0x374>)
 800112c:	4282      	cmp	r2, r0
 800112e:	d021      	beq.n	8001174 <__aeabi_dadd+0x294>
 8001130:	031b      	lsls	r3, r3, #12
 8001132:	0552      	lsls	r2, r2, #21
 8001134:	0b1b      	lsrs	r3, r3, #12
 8001136:	0d52      	lsrs	r2, r2, #21
 8001138:	e76c      	b.n	8001014 <__aeabi_dadd+0x134>
 800113a:	2300      	movs	r3, #0
 800113c:	2100      	movs	r1, #0
 800113e:	e769      	b.n	8001014 <__aeabi_dadd+0x134>
 8001140:	002a      	movs	r2, r5
 8001142:	433a      	orrs	r2, r7
 8001144:	d069      	beq.n	800121a <__aeabi_dadd+0x33a>
 8001146:	464a      	mov	r2, r9
 8001148:	0758      	lsls	r0, r3, #29
 800114a:	08d1      	lsrs	r1, r2, #3
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	031b      	lsls	r3, r3, #12
 8001152:	4308      	orrs	r0, r1
 8001154:	421a      	tst	r2, r3
 8001156:	d007      	beq.n	8001168 <__aeabi_dadd+0x288>
 8001158:	0029      	movs	r1, r5
 800115a:	08ed      	lsrs	r5, r5, #3
 800115c:	421d      	tst	r5, r3
 800115e:	d103      	bne.n	8001168 <__aeabi_dadd+0x288>
 8001160:	002a      	movs	r2, r5
 8001162:	08ff      	lsrs	r7, r7, #3
 8001164:	0748      	lsls	r0, r1, #29
 8001166:	4338      	orrs	r0, r7
 8001168:	0f43      	lsrs	r3, r0, #29
 800116a:	00c1      	lsls	r1, r0, #3
 800116c:	075b      	lsls	r3, r3, #29
 800116e:	08c9      	lsrs	r1, r1, #3
 8001170:	4319      	orrs	r1, r3
 8001172:	0013      	movs	r3, r2
 8001174:	000a      	movs	r2, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	d100      	bne.n	800117c <__aeabi_dadd+0x29c>
 800117a:	e213      	b.n	80015a4 <__aeabi_dadd+0x6c4>
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	0312      	lsls	r2, r2, #12
 8001180:	4313      	orrs	r3, r2
 8001182:	031b      	lsls	r3, r3, #12
 8001184:	4a33      	ldr	r2, [pc, #204]	; (8001254 <__aeabi_dadd+0x374>)
 8001186:	0b1b      	lsrs	r3, r3, #12
 8001188:	e744      	b.n	8001014 <__aeabi_dadd+0x134>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d04b      	beq.n	8001226 <__aeabi_dadd+0x346>
 800118e:	1b8a      	subs	r2, r1, r6
 8001190:	2e00      	cmp	r6, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0x2b6>
 8001194:	e0e7      	b.n	8001366 <__aeabi_dadd+0x486>
 8001196:	482f      	ldr	r0, [pc, #188]	; (8001254 <__aeabi_dadd+0x374>)
 8001198:	4281      	cmp	r1, r0
 800119a:	d100      	bne.n	800119e <__aeabi_dadd+0x2be>
 800119c:	e195      	b.n	80014ca <__aeabi_dadd+0x5ea>
 800119e:	2080      	movs	r0, #128	; 0x80
 80011a0:	0400      	lsls	r0, r0, #16
 80011a2:	4303      	orrs	r3, r0
 80011a4:	2a38      	cmp	r2, #56	; 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_dadd+0x2ca>
 80011a8:	e143      	b.n	8001432 <__aeabi_dadd+0x552>
 80011aa:	2a1f      	cmp	r2, #31
 80011ac:	dd00      	ble.n	80011b0 <__aeabi_dadd+0x2d0>
 80011ae:	e1db      	b.n	8001568 <__aeabi_dadd+0x688>
 80011b0:	2020      	movs	r0, #32
 80011b2:	001d      	movs	r5, r3
 80011b4:	464e      	mov	r6, r9
 80011b6:	1a80      	subs	r0, r0, r2
 80011b8:	4085      	lsls	r5, r0
 80011ba:	40d6      	lsrs	r6, r2
 80011bc:	4335      	orrs	r5, r6
 80011be:	464e      	mov	r6, r9
 80011c0:	4086      	lsls	r6, r0
 80011c2:	0030      	movs	r0, r6
 80011c4:	40d3      	lsrs	r3, r2
 80011c6:	1e46      	subs	r6, r0, #1
 80011c8:	41b0      	sbcs	r0, r6
 80011ca:	449c      	add	ip, r3
 80011cc:	4305      	orrs	r5, r0
 80011ce:	19ed      	adds	r5, r5, r7
 80011d0:	42bd      	cmp	r5, r7
 80011d2:	419b      	sbcs	r3, r3
 80011d4:	425b      	negs	r3, r3
 80011d6:	4463      	add	r3, ip
 80011d8:	4698      	mov	r8, r3
 80011da:	000e      	movs	r6, r1
 80011dc:	e07f      	b.n	80012de <__aeabi_dadd+0x3fe>
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <__aeabi_dadd+0x378>)
 80011e0:	1a76      	subs	r6, r6, r1
 80011e2:	4013      	ands	r3, r2
 80011e4:	4698      	mov	r8, r3
 80011e6:	e6f5      	b.n	8000fd4 <__aeabi_dadd+0xf4>
 80011e8:	0028      	movs	r0, r5
 80011ea:	f001 fd61 	bl	8002cb0 <__clzsi2>
 80011ee:	0001      	movs	r1, r0
 80011f0:	3118      	adds	r1, #24
 80011f2:	291f      	cmp	r1, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x318>
 80011f6:	e6cf      	b.n	8000f98 <__aeabi_dadd+0xb8>
 80011f8:	002b      	movs	r3, r5
 80011fa:	3808      	subs	r0, #8
 80011fc:	4083      	lsls	r3, r0
 80011fe:	2500      	movs	r5, #0
 8001200:	e6d2      	b.n	8000fa8 <__aeabi_dadd+0xc8>
 8001202:	4662      	mov	r2, ip
 8001204:	433a      	orrs	r2, r7
 8001206:	0011      	movs	r1, r2
 8001208:	1e4f      	subs	r7, r1, #1
 800120a:	41b9      	sbcs	r1, r7
 800120c:	e6ac      	b.n	8000f68 <__aeabi_dadd+0x88>
 800120e:	4649      	mov	r1, r9
 8001210:	0758      	lsls	r0, r3, #29
 8001212:	08c9      	lsrs	r1, r1, #3
 8001214:	4301      	orrs	r1, r0
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	e787      	b.n	800112a <__aeabi_dadd+0x24a>
 800121a:	4649      	mov	r1, r9
 800121c:	075a      	lsls	r2, r3, #29
 800121e:	08c9      	lsrs	r1, r1, #3
 8001220:	4311      	orrs	r1, r2
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	e7a6      	b.n	8001174 <__aeabi_dadd+0x294>
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <__aeabi_dadd+0x37c>)
 8001228:	1c70      	adds	r0, r6, #1
 800122a:	4208      	tst	r0, r1
 800122c:	d000      	beq.n	8001230 <__aeabi_dadd+0x350>
 800122e:	e0bb      	b.n	80013a8 <__aeabi_dadd+0x4c8>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d000      	beq.n	8001236 <__aeabi_dadd+0x356>
 8001234:	e114      	b.n	8001460 <__aeabi_dadd+0x580>
 8001236:	4649      	mov	r1, r9
 8001238:	4319      	orrs	r1, r3
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x35e>
 800123c:	e175      	b.n	800152a <__aeabi_dadd+0x64a>
 800123e:	0029      	movs	r1, r5
 8001240:	4339      	orrs	r1, r7
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x366>
 8001244:	e17e      	b.n	8001544 <__aeabi_dadd+0x664>
 8001246:	4649      	mov	r1, r9
 8001248:	0758      	lsls	r0, r3, #29
 800124a:	08c9      	lsrs	r1, r1, #3
 800124c:	4301      	orrs	r1, r0
 800124e:	08db      	lsrs	r3, r3, #3
 8001250:	e76e      	b.n	8001130 <__aeabi_dadd+0x250>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	000007ff 	.word	0x000007ff
 8001258:	ff7fffff 	.word	0xff7fffff
 800125c:	000007fe 	.word	0x000007fe
 8001260:	4649      	mov	r1, r9
 8001262:	1bcd      	subs	r5, r1, r7
 8001264:	4661      	mov	r1, ip
 8001266:	1a58      	subs	r0, r3, r1
 8001268:	45a9      	cmp	r9, r5
 800126a:	4189      	sbcs	r1, r1
 800126c:	4249      	negs	r1, r1
 800126e:	4688      	mov	r8, r1
 8001270:	0001      	movs	r1, r0
 8001272:	4640      	mov	r0, r8
 8001274:	1a09      	subs	r1, r1, r0
 8001276:	4688      	mov	r8, r1
 8001278:	0209      	lsls	r1, r1, #8
 800127a:	d500      	bpl.n	800127e <__aeabi_dadd+0x39e>
 800127c:	e0a6      	b.n	80013cc <__aeabi_dadd+0x4ec>
 800127e:	4641      	mov	r1, r8
 8001280:	4329      	orrs	r1, r5
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x3a6>
 8001284:	e67f      	b.n	8000f86 <__aeabi_dadd+0xa6>
 8001286:	2300      	movs	r3, #0
 8001288:	2400      	movs	r4, #0
 800128a:	e751      	b.n	8001130 <__aeabi_dadd+0x250>
 800128c:	4cc7      	ldr	r4, [pc, #796]	; (80015ac <__aeabi_dadd+0x6cc>)
 800128e:	42a1      	cmp	r1, r4
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x3b4>
 8001292:	e0c7      	b.n	8001424 <__aeabi_dadd+0x544>
 8001294:	2480      	movs	r4, #128	; 0x80
 8001296:	0424      	lsls	r4, r4, #16
 8001298:	4323      	orrs	r3, r4
 800129a:	2a38      	cmp	r2, #56	; 0x38
 800129c:	dc54      	bgt.n	8001348 <__aeabi_dadd+0x468>
 800129e:	2a1f      	cmp	r2, #31
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_dadd+0x3c4>
 80012a2:	e0cc      	b.n	800143e <__aeabi_dadd+0x55e>
 80012a4:	2420      	movs	r4, #32
 80012a6:	4648      	mov	r0, r9
 80012a8:	1aa4      	subs	r4, r4, r2
 80012aa:	001d      	movs	r5, r3
 80012ac:	464e      	mov	r6, r9
 80012ae:	40a0      	lsls	r0, r4
 80012b0:	40d6      	lsrs	r6, r2
 80012b2:	40a5      	lsls	r5, r4
 80012b4:	0004      	movs	r4, r0
 80012b6:	40d3      	lsrs	r3, r2
 80012b8:	4662      	mov	r2, ip
 80012ba:	4335      	orrs	r5, r6
 80012bc:	1e66      	subs	r6, r4, #1
 80012be:	41b4      	sbcs	r4, r6
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	469c      	mov	ip, r3
 80012c4:	4325      	orrs	r5, r4
 80012c6:	e044      	b.n	8001352 <__aeabi_dadd+0x472>
 80012c8:	4662      	mov	r2, ip
 80012ca:	433a      	orrs	r2, r7
 80012cc:	0015      	movs	r5, r2
 80012ce:	1e6f      	subs	r7, r5, #1
 80012d0:	41bd      	sbcs	r5, r7
 80012d2:	444d      	add	r5, r9
 80012d4:	454d      	cmp	r5, r9
 80012d6:	4189      	sbcs	r1, r1
 80012d8:	4249      	negs	r1, r1
 80012da:	4688      	mov	r8, r1
 80012dc:	4498      	add	r8, r3
 80012de:	4643      	mov	r3, r8
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	d400      	bmi.n	80012e6 <__aeabi_dadd+0x406>
 80012e4:	e718      	b.n	8001118 <__aeabi_dadd+0x238>
 80012e6:	4bb1      	ldr	r3, [pc, #708]	; (80015ac <__aeabi_dadd+0x6cc>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d049      	beq.n	8001382 <__aeabi_dadd+0x4a2>
 80012ee:	4642      	mov	r2, r8
 80012f0:	4baf      	ldr	r3, [pc, #700]	; (80015b0 <__aeabi_dadd+0x6d0>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	401a      	ands	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	086a      	lsrs	r2, r5, #1
 80012fa:	400d      	ands	r5, r1
 80012fc:	4315      	orrs	r5, r2
 80012fe:	07d9      	lsls	r1, r3, #31
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	4698      	mov	r8, r3
 8001304:	430d      	orrs	r5, r1
 8001306:	e665      	b.n	8000fd4 <__aeabi_dadd+0xf4>
 8001308:	0018      	movs	r0, r3
 800130a:	3e1f      	subs	r6, #31
 800130c:	40f0      	lsrs	r0, r6
 800130e:	2a20      	cmp	r2, #32
 8001310:	d003      	beq.n	800131a <__aeabi_dadd+0x43a>
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	1a8a      	subs	r2, r1, r2
 8001316:	4093      	lsls	r3, r2
 8001318:	431d      	orrs	r5, r3
 800131a:	1e69      	subs	r1, r5, #1
 800131c:	418d      	sbcs	r5, r1
 800131e:	2300      	movs	r3, #0
 8001320:	2600      	movs	r6, #0
 8001322:	4698      	mov	r8, r3
 8001324:	4305      	orrs	r5, r0
 8001326:	e6f7      	b.n	8001118 <__aeabi_dadd+0x238>
 8001328:	0011      	movs	r1, r2
 800132a:	4665      	mov	r5, ip
 800132c:	3920      	subs	r1, #32
 800132e:	40cd      	lsrs	r5, r1
 8001330:	2a20      	cmp	r2, #32
 8001332:	d004      	beq.n	800133e <__aeabi_dadd+0x45e>
 8001334:	2040      	movs	r0, #64	; 0x40
 8001336:	4661      	mov	r1, ip
 8001338:	1a82      	subs	r2, r0, r2
 800133a:	4091      	lsls	r1, r2
 800133c:	430f      	orrs	r7, r1
 800133e:	0039      	movs	r1, r7
 8001340:	1e4f      	subs	r7, r1, #1
 8001342:	41b9      	sbcs	r1, r7
 8001344:	4329      	orrs	r1, r5
 8001346:	e60f      	b.n	8000f68 <__aeabi_dadd+0x88>
 8001348:	464a      	mov	r2, r9
 800134a:	4313      	orrs	r3, r2
 800134c:	001d      	movs	r5, r3
 800134e:	1e6b      	subs	r3, r5, #1
 8001350:	419d      	sbcs	r5, r3
 8001352:	1b7d      	subs	r5, r7, r5
 8001354:	42af      	cmp	r7, r5
 8001356:	419b      	sbcs	r3, r3
 8001358:	4662      	mov	r2, ip
 800135a:	425b      	negs	r3, r3
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4698      	mov	r8, r3
 8001360:	4654      	mov	r4, sl
 8001362:	000e      	movs	r6, r1
 8001364:	e607      	b.n	8000f76 <__aeabi_dadd+0x96>
 8001366:	4648      	mov	r0, r9
 8001368:	4318      	orrs	r0, r3
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x48e>
 800136c:	e0b3      	b.n	80014d6 <__aeabi_dadd+0x5f6>
 800136e:	1e50      	subs	r0, r2, #1
 8001370:	2a01      	cmp	r2, #1
 8001372:	d100      	bne.n	8001376 <__aeabi_dadd+0x496>
 8001374:	e10d      	b.n	8001592 <__aeabi_dadd+0x6b2>
 8001376:	4d8d      	ldr	r5, [pc, #564]	; (80015ac <__aeabi_dadd+0x6cc>)
 8001378:	42aa      	cmp	r2, r5
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x49e>
 800137c:	e0a5      	b.n	80014ca <__aeabi_dadd+0x5ea>
 800137e:	0002      	movs	r2, r0
 8001380:	e710      	b.n	80011a4 <__aeabi_dadd+0x2c4>
 8001382:	0032      	movs	r2, r6
 8001384:	2300      	movs	r3, #0
 8001386:	2100      	movs	r1, #0
 8001388:	e644      	b.n	8001014 <__aeabi_dadd+0x134>
 800138a:	2120      	movs	r1, #32
 800138c:	0038      	movs	r0, r7
 800138e:	1a89      	subs	r1, r1, r2
 8001390:	4665      	mov	r5, ip
 8001392:	408f      	lsls	r7, r1
 8001394:	408d      	lsls	r5, r1
 8001396:	40d0      	lsrs	r0, r2
 8001398:	1e79      	subs	r1, r7, #1
 800139a:	418f      	sbcs	r7, r1
 800139c:	4305      	orrs	r5, r0
 800139e:	433d      	orrs	r5, r7
 80013a0:	4667      	mov	r7, ip
 80013a2:	40d7      	lsrs	r7, r2
 80013a4:	19db      	adds	r3, r3, r7
 80013a6:	e794      	b.n	80012d2 <__aeabi_dadd+0x3f2>
 80013a8:	4a80      	ldr	r2, [pc, #512]	; (80015ac <__aeabi_dadd+0x6cc>)
 80013aa:	4290      	cmp	r0, r2
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dadd+0x4d0>
 80013ae:	e0ec      	b.n	800158a <__aeabi_dadd+0x6aa>
 80013b0:	0039      	movs	r1, r7
 80013b2:	4449      	add	r1, r9
 80013b4:	4549      	cmp	r1, r9
 80013b6:	4192      	sbcs	r2, r2
 80013b8:	4463      	add	r3, ip
 80013ba:	4252      	negs	r2, r2
 80013bc:	189b      	adds	r3, r3, r2
 80013be:	07dd      	lsls	r5, r3, #31
 80013c0:	0849      	lsrs	r1, r1, #1
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	4698      	mov	r8, r3
 80013c6:	0006      	movs	r6, r0
 80013c8:	430d      	orrs	r5, r1
 80013ca:	e6a5      	b.n	8001118 <__aeabi_dadd+0x238>
 80013cc:	464a      	mov	r2, r9
 80013ce:	1abd      	subs	r5, r7, r2
 80013d0:	42af      	cmp	r7, r5
 80013d2:	4189      	sbcs	r1, r1
 80013d4:	4662      	mov	r2, ip
 80013d6:	4249      	negs	r1, r1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	1a5b      	subs	r3, r3, r1
 80013dc:	4698      	mov	r8, r3
 80013de:	4654      	mov	r4, sl
 80013e0:	e5d1      	b.n	8000f86 <__aeabi_dadd+0xa6>
 80013e2:	076c      	lsls	r4, r5, #29
 80013e4:	08f9      	lsrs	r1, r7, #3
 80013e6:	4321      	orrs	r1, r4
 80013e8:	08eb      	lsrs	r3, r5, #3
 80013ea:	0004      	movs	r4, r0
 80013ec:	e69d      	b.n	800112a <__aeabi_dadd+0x24a>
 80013ee:	464a      	mov	r2, r9
 80013f0:	431a      	orrs	r2, r3
 80013f2:	d175      	bne.n	80014e0 <__aeabi_dadd+0x600>
 80013f4:	4661      	mov	r1, ip
 80013f6:	4339      	orrs	r1, r7
 80013f8:	d114      	bne.n	8001424 <__aeabi_dadd+0x544>
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	2400      	movs	r4, #0
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	e6bc      	b.n	800117c <__aeabi_dadd+0x29c>
 8001402:	464a      	mov	r2, r9
 8001404:	1bd5      	subs	r5, r2, r7
 8001406:	45a9      	cmp	r9, r5
 8001408:	4189      	sbcs	r1, r1
 800140a:	4662      	mov	r2, ip
 800140c:	4249      	negs	r1, r1
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	1a5b      	subs	r3, r3, r1
 8001412:	4698      	mov	r8, r3
 8001414:	2601      	movs	r6, #1
 8001416:	e5ae      	b.n	8000f76 <__aeabi_dadd+0x96>
 8001418:	464a      	mov	r2, r9
 800141a:	08d1      	lsrs	r1, r2, #3
 800141c:	075a      	lsls	r2, r3, #29
 800141e:	4311      	orrs	r1, r2
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	e6a7      	b.n	8001174 <__aeabi_dadd+0x294>
 8001424:	4663      	mov	r3, ip
 8001426:	08f9      	lsrs	r1, r7, #3
 8001428:	075a      	lsls	r2, r3, #29
 800142a:	4654      	mov	r4, sl
 800142c:	4311      	orrs	r1, r2
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	e6a0      	b.n	8001174 <__aeabi_dadd+0x294>
 8001432:	464a      	mov	r2, r9
 8001434:	4313      	orrs	r3, r2
 8001436:	001d      	movs	r5, r3
 8001438:	1e6b      	subs	r3, r5, #1
 800143a:	419d      	sbcs	r5, r3
 800143c:	e6c7      	b.n	80011ce <__aeabi_dadd+0x2ee>
 800143e:	0014      	movs	r4, r2
 8001440:	001e      	movs	r6, r3
 8001442:	3c20      	subs	r4, #32
 8001444:	40e6      	lsrs	r6, r4
 8001446:	2a20      	cmp	r2, #32
 8001448:	d005      	beq.n	8001456 <__aeabi_dadd+0x576>
 800144a:	2440      	movs	r4, #64	; 0x40
 800144c:	1aa2      	subs	r2, r4, r2
 800144e:	4093      	lsls	r3, r2
 8001450:	464a      	mov	r2, r9
 8001452:	431a      	orrs	r2, r3
 8001454:	4691      	mov	r9, r2
 8001456:	464d      	mov	r5, r9
 8001458:	1e6b      	subs	r3, r5, #1
 800145a:	419d      	sbcs	r5, r3
 800145c:	4335      	orrs	r5, r6
 800145e:	e778      	b.n	8001352 <__aeabi_dadd+0x472>
 8001460:	464a      	mov	r2, r9
 8001462:	431a      	orrs	r2, r3
 8001464:	d000      	beq.n	8001468 <__aeabi_dadd+0x588>
 8001466:	e66b      	b.n	8001140 <__aeabi_dadd+0x260>
 8001468:	076b      	lsls	r3, r5, #29
 800146a:	08f9      	lsrs	r1, r7, #3
 800146c:	4319      	orrs	r1, r3
 800146e:	08eb      	lsrs	r3, r5, #3
 8001470:	e680      	b.n	8001174 <__aeabi_dadd+0x294>
 8001472:	4661      	mov	r1, ip
 8001474:	4339      	orrs	r1, r7
 8001476:	d054      	beq.n	8001522 <__aeabi_dadd+0x642>
 8001478:	4663      	mov	r3, ip
 800147a:	08f9      	lsrs	r1, r7, #3
 800147c:	075c      	lsls	r4, r3, #29
 800147e:	4321      	orrs	r1, r4
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	0004      	movs	r4, r0
 8001484:	e654      	b.n	8001130 <__aeabi_dadd+0x250>
 8001486:	464a      	mov	r2, r9
 8001488:	1abd      	subs	r5, r7, r2
 800148a:	42af      	cmp	r7, r5
 800148c:	4189      	sbcs	r1, r1
 800148e:	4662      	mov	r2, ip
 8001490:	4249      	negs	r1, r1
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	1a5b      	subs	r3, r3, r1
 8001496:	4698      	mov	r8, r3
 8001498:	0004      	movs	r4, r0
 800149a:	2601      	movs	r6, #1
 800149c:	e56b      	b.n	8000f76 <__aeabi_dadd+0x96>
 800149e:	464a      	mov	r2, r9
 80014a0:	1bd5      	subs	r5, r2, r7
 80014a2:	45a9      	cmp	r9, r5
 80014a4:	4189      	sbcs	r1, r1
 80014a6:	4662      	mov	r2, ip
 80014a8:	4249      	negs	r1, r1
 80014aa:	1a9a      	subs	r2, r3, r2
 80014ac:	1a52      	subs	r2, r2, r1
 80014ae:	4690      	mov	r8, r2
 80014b0:	0212      	lsls	r2, r2, #8
 80014b2:	d532      	bpl.n	800151a <__aeabi_dadd+0x63a>
 80014b4:	464a      	mov	r2, r9
 80014b6:	1abd      	subs	r5, r7, r2
 80014b8:	42af      	cmp	r7, r5
 80014ba:	4189      	sbcs	r1, r1
 80014bc:	4662      	mov	r2, ip
 80014be:	4249      	negs	r1, r1
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	1a5b      	subs	r3, r3, r1
 80014c4:	4698      	mov	r8, r3
 80014c6:	0004      	movs	r4, r0
 80014c8:	e584      	b.n	8000fd4 <__aeabi_dadd+0xf4>
 80014ca:	4663      	mov	r3, ip
 80014cc:	08f9      	lsrs	r1, r7, #3
 80014ce:	075a      	lsls	r2, r3, #29
 80014d0:	4311      	orrs	r1, r2
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	e64e      	b.n	8001174 <__aeabi_dadd+0x294>
 80014d6:	08f9      	lsrs	r1, r7, #3
 80014d8:	0768      	lsls	r0, r5, #29
 80014da:	4301      	orrs	r1, r0
 80014dc:	08eb      	lsrs	r3, r5, #3
 80014de:	e624      	b.n	800112a <__aeabi_dadd+0x24a>
 80014e0:	4662      	mov	r2, ip
 80014e2:	433a      	orrs	r2, r7
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x608>
 80014e6:	e698      	b.n	800121a <__aeabi_dadd+0x33a>
 80014e8:	464a      	mov	r2, r9
 80014ea:	08d1      	lsrs	r1, r2, #3
 80014ec:	075a      	lsls	r2, r3, #29
 80014ee:	4311      	orrs	r1, r2
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	031b      	lsls	r3, r3, #12
 80014f6:	421a      	tst	r2, r3
 80014f8:	d008      	beq.n	800150c <__aeabi_dadd+0x62c>
 80014fa:	4660      	mov	r0, ip
 80014fc:	08c5      	lsrs	r5, r0, #3
 80014fe:	421d      	tst	r5, r3
 8001500:	d104      	bne.n	800150c <__aeabi_dadd+0x62c>
 8001502:	4654      	mov	r4, sl
 8001504:	002a      	movs	r2, r5
 8001506:	08f9      	lsrs	r1, r7, #3
 8001508:	0743      	lsls	r3, r0, #29
 800150a:	4319      	orrs	r1, r3
 800150c:	0f4b      	lsrs	r3, r1, #29
 800150e:	00c9      	lsls	r1, r1, #3
 8001510:	075b      	lsls	r3, r3, #29
 8001512:	08c9      	lsrs	r1, r1, #3
 8001514:	4319      	orrs	r1, r3
 8001516:	0013      	movs	r3, r2
 8001518:	e62c      	b.n	8001174 <__aeabi_dadd+0x294>
 800151a:	4641      	mov	r1, r8
 800151c:	4329      	orrs	r1, r5
 800151e:	d000      	beq.n	8001522 <__aeabi_dadd+0x642>
 8001520:	e5fa      	b.n	8001118 <__aeabi_dadd+0x238>
 8001522:	2300      	movs	r3, #0
 8001524:	000a      	movs	r2, r1
 8001526:	2400      	movs	r4, #0
 8001528:	e602      	b.n	8001130 <__aeabi_dadd+0x250>
 800152a:	076b      	lsls	r3, r5, #29
 800152c:	08f9      	lsrs	r1, r7, #3
 800152e:	4319      	orrs	r1, r3
 8001530:	08eb      	lsrs	r3, r5, #3
 8001532:	e5fd      	b.n	8001130 <__aeabi_dadd+0x250>
 8001534:	4663      	mov	r3, ip
 8001536:	08f9      	lsrs	r1, r7, #3
 8001538:	075b      	lsls	r3, r3, #29
 800153a:	4319      	orrs	r1, r3
 800153c:	4663      	mov	r3, ip
 800153e:	0004      	movs	r4, r0
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	e617      	b.n	8001174 <__aeabi_dadd+0x294>
 8001544:	003d      	movs	r5, r7
 8001546:	444d      	add	r5, r9
 8001548:	4463      	add	r3, ip
 800154a:	454d      	cmp	r5, r9
 800154c:	4189      	sbcs	r1, r1
 800154e:	4698      	mov	r8, r3
 8001550:	4249      	negs	r1, r1
 8001552:	4488      	add	r8, r1
 8001554:	4643      	mov	r3, r8
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	d400      	bmi.n	800155c <__aeabi_dadd+0x67c>
 800155a:	e5dd      	b.n	8001118 <__aeabi_dadd+0x238>
 800155c:	4642      	mov	r2, r8
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <__aeabi_dadd+0x6d0>)
 8001560:	2601      	movs	r6, #1
 8001562:	401a      	ands	r2, r3
 8001564:	4690      	mov	r8, r2
 8001566:	e5d7      	b.n	8001118 <__aeabi_dadd+0x238>
 8001568:	0010      	movs	r0, r2
 800156a:	001e      	movs	r6, r3
 800156c:	3820      	subs	r0, #32
 800156e:	40c6      	lsrs	r6, r0
 8001570:	2a20      	cmp	r2, #32
 8001572:	d005      	beq.n	8001580 <__aeabi_dadd+0x6a0>
 8001574:	2040      	movs	r0, #64	; 0x40
 8001576:	1a82      	subs	r2, r0, r2
 8001578:	4093      	lsls	r3, r2
 800157a:	464a      	mov	r2, r9
 800157c:	431a      	orrs	r2, r3
 800157e:	4691      	mov	r9, r2
 8001580:	464d      	mov	r5, r9
 8001582:	1e6b      	subs	r3, r5, #1
 8001584:	419d      	sbcs	r5, r3
 8001586:	4335      	orrs	r5, r6
 8001588:	e621      	b.n	80011ce <__aeabi_dadd+0x2ee>
 800158a:	0002      	movs	r2, r0
 800158c:	2300      	movs	r3, #0
 800158e:	2100      	movs	r1, #0
 8001590:	e540      	b.n	8001014 <__aeabi_dadd+0x134>
 8001592:	464a      	mov	r2, r9
 8001594:	19d5      	adds	r5, r2, r7
 8001596:	42bd      	cmp	r5, r7
 8001598:	4189      	sbcs	r1, r1
 800159a:	4463      	add	r3, ip
 800159c:	4698      	mov	r8, r3
 800159e:	4249      	negs	r1, r1
 80015a0:	4488      	add	r8, r1
 80015a2:	e5b3      	b.n	800110c <__aeabi_dadd+0x22c>
 80015a4:	2100      	movs	r1, #0
 80015a6:	4a01      	ldr	r2, [pc, #4]	; (80015ac <__aeabi_dadd+0x6cc>)
 80015a8:	000b      	movs	r3, r1
 80015aa:	e533      	b.n	8001014 <__aeabi_dadd+0x134>
 80015ac:	000007ff 	.word	0x000007ff
 80015b0:	ff7fffff 	.word	0xff7fffff

080015b4 <__aeabi_ddiv>:
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	4657      	mov	r7, sl
 80015b8:	464e      	mov	r6, r9
 80015ba:	4645      	mov	r5, r8
 80015bc:	46de      	mov	lr, fp
 80015be:	b5e0      	push	{r5, r6, r7, lr}
 80015c0:	4681      	mov	r9, r0
 80015c2:	0005      	movs	r5, r0
 80015c4:	030c      	lsls	r4, r1, #12
 80015c6:	0048      	lsls	r0, r1, #1
 80015c8:	4692      	mov	sl, r2
 80015ca:	001f      	movs	r7, r3
 80015cc:	b085      	sub	sp, #20
 80015ce:	0b24      	lsrs	r4, r4, #12
 80015d0:	0d40      	lsrs	r0, r0, #21
 80015d2:	0fce      	lsrs	r6, r1, #31
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d059      	beq.n	800168c <__aeabi_ddiv+0xd8>
 80015d8:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <__aeabi_ddiv+0x244>)
 80015da:	4298      	cmp	r0, r3
 80015dc:	d100      	bne.n	80015e0 <__aeabi_ddiv+0x2c>
 80015de:	e098      	b.n	8001712 <__aeabi_ddiv+0x15e>
 80015e0:	0f6b      	lsrs	r3, r5, #29
 80015e2:	00e4      	lsls	r4, r4, #3
 80015e4:	431c      	orrs	r4, r3
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	4323      	orrs	r3, r4
 80015ec:	4698      	mov	r8, r3
 80015ee:	4b83      	ldr	r3, [pc, #524]	; (80017fc <__aeabi_ddiv+0x248>)
 80015f0:	00ed      	lsls	r5, r5, #3
 80015f2:	469b      	mov	fp, r3
 80015f4:	2300      	movs	r3, #0
 80015f6:	4699      	mov	r9, r3
 80015f8:	4483      	add	fp, r0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	033c      	lsls	r4, r7, #12
 80015fe:	007b      	lsls	r3, r7, #1
 8001600:	4650      	mov	r0, sl
 8001602:	0b24      	lsrs	r4, r4, #12
 8001604:	0d5b      	lsrs	r3, r3, #21
 8001606:	0fff      	lsrs	r7, r7, #31
 8001608:	2b00      	cmp	r3, #0
 800160a:	d067      	beq.n	80016dc <__aeabi_ddiv+0x128>
 800160c:	4a7a      	ldr	r2, [pc, #488]	; (80017f8 <__aeabi_ddiv+0x244>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d018      	beq.n	8001644 <__aeabi_ddiv+0x90>
 8001612:	497a      	ldr	r1, [pc, #488]	; (80017fc <__aeabi_ddiv+0x248>)
 8001614:	0f42      	lsrs	r2, r0, #29
 8001616:	468c      	mov	ip, r1
 8001618:	00e4      	lsls	r4, r4, #3
 800161a:	4659      	mov	r1, fp
 800161c:	4314      	orrs	r4, r2
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	4463      	add	r3, ip
 8001622:	0412      	lsls	r2, r2, #16
 8001624:	1acb      	subs	r3, r1, r3
 8001626:	4314      	orrs	r4, r2
 8001628:	469b      	mov	fp, r3
 800162a:	00c2      	lsls	r2, r0, #3
 800162c:	2000      	movs	r0, #0
 800162e:	0033      	movs	r3, r6
 8001630:	407b      	eors	r3, r7
 8001632:	469a      	mov	sl, r3
 8001634:	464b      	mov	r3, r9
 8001636:	2b0f      	cmp	r3, #15
 8001638:	d900      	bls.n	800163c <__aeabi_ddiv+0x88>
 800163a:	e0ef      	b.n	800181c <__aeabi_ddiv+0x268>
 800163c:	4970      	ldr	r1, [pc, #448]	; (8001800 <__aeabi_ddiv+0x24c>)
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	58cb      	ldr	r3, [r1, r3]
 8001642:	469f      	mov	pc, r3
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <__aeabi_ddiv+0x250>)
 8001646:	4652      	mov	r2, sl
 8001648:	469c      	mov	ip, r3
 800164a:	4322      	orrs	r2, r4
 800164c:	44e3      	add	fp, ip
 800164e:	2a00      	cmp	r2, #0
 8001650:	d000      	beq.n	8001654 <__aeabi_ddiv+0xa0>
 8001652:	e095      	b.n	8001780 <__aeabi_ddiv+0x1cc>
 8001654:	4649      	mov	r1, r9
 8001656:	2302      	movs	r3, #2
 8001658:	4319      	orrs	r1, r3
 800165a:	4689      	mov	r9, r1
 800165c:	2400      	movs	r4, #0
 800165e:	2002      	movs	r0, #2
 8001660:	e7e5      	b.n	800162e <__aeabi_ddiv+0x7a>
 8001662:	2300      	movs	r3, #0
 8001664:	2400      	movs	r4, #0
 8001666:	2500      	movs	r5, #0
 8001668:	4652      	mov	r2, sl
 800166a:	051b      	lsls	r3, r3, #20
 800166c:	4323      	orrs	r3, r4
 800166e:	07d2      	lsls	r2, r2, #31
 8001670:	4313      	orrs	r3, r2
 8001672:	0028      	movs	r0, r5
 8001674:	0019      	movs	r1, r3
 8001676:	b005      	add	sp, #20
 8001678:	bcf0      	pop	{r4, r5, r6, r7}
 800167a:	46bb      	mov	fp, r7
 800167c:	46b2      	mov	sl, r6
 800167e:	46a9      	mov	r9, r5
 8001680:	46a0      	mov	r8, r4
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2400      	movs	r4, #0
 8001686:	2500      	movs	r5, #0
 8001688:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <__aeabi_ddiv+0x244>)
 800168a:	e7ed      	b.n	8001668 <__aeabi_ddiv+0xb4>
 800168c:	464b      	mov	r3, r9
 800168e:	4323      	orrs	r3, r4
 8001690:	4698      	mov	r8, r3
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0xe2>
 8001694:	e089      	b.n	80017aa <__aeabi_ddiv+0x1f6>
 8001696:	2c00      	cmp	r4, #0
 8001698:	d100      	bne.n	800169c <__aeabi_ddiv+0xe8>
 800169a:	e1e0      	b.n	8001a5e <__aeabi_ddiv+0x4aa>
 800169c:	0020      	movs	r0, r4
 800169e:	f001 fb07 	bl	8002cb0 <__clzsi2>
 80016a2:	0001      	movs	r1, r0
 80016a4:	0002      	movs	r2, r0
 80016a6:	390b      	subs	r1, #11
 80016a8:	231d      	movs	r3, #29
 80016aa:	1a5b      	subs	r3, r3, r1
 80016ac:	4649      	mov	r1, r9
 80016ae:	0010      	movs	r0, r2
 80016b0:	40d9      	lsrs	r1, r3
 80016b2:	3808      	subs	r0, #8
 80016b4:	4084      	lsls	r4, r0
 80016b6:	000b      	movs	r3, r1
 80016b8:	464d      	mov	r5, r9
 80016ba:	4323      	orrs	r3, r4
 80016bc:	4698      	mov	r8, r3
 80016be:	4085      	lsls	r5, r0
 80016c0:	4851      	ldr	r0, [pc, #324]	; (8001808 <__aeabi_ddiv+0x254>)
 80016c2:	033c      	lsls	r4, r7, #12
 80016c4:	1a83      	subs	r3, r0, r2
 80016c6:	469b      	mov	fp, r3
 80016c8:	2300      	movs	r3, #0
 80016ca:	4699      	mov	r9, r3
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	007b      	lsls	r3, r7, #1
 80016d0:	4650      	mov	r0, sl
 80016d2:	0b24      	lsrs	r4, r4, #12
 80016d4:	0d5b      	lsrs	r3, r3, #21
 80016d6:	0fff      	lsrs	r7, r7, #31
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d197      	bne.n	800160c <__aeabi_ddiv+0x58>
 80016dc:	4652      	mov	r2, sl
 80016de:	4322      	orrs	r2, r4
 80016e0:	d055      	beq.n	800178e <__aeabi_ddiv+0x1da>
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_ddiv+0x134>
 80016e6:	e1ca      	b.n	8001a7e <__aeabi_ddiv+0x4ca>
 80016e8:	0020      	movs	r0, r4
 80016ea:	f001 fae1 	bl	8002cb0 <__clzsi2>
 80016ee:	0002      	movs	r2, r0
 80016f0:	3a0b      	subs	r2, #11
 80016f2:	231d      	movs	r3, #29
 80016f4:	0001      	movs	r1, r0
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	4652      	mov	r2, sl
 80016fa:	3908      	subs	r1, #8
 80016fc:	40da      	lsrs	r2, r3
 80016fe:	408c      	lsls	r4, r1
 8001700:	4314      	orrs	r4, r2
 8001702:	4652      	mov	r2, sl
 8001704:	408a      	lsls	r2, r1
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <__aeabi_ddiv+0x258>)
 8001708:	4458      	add	r0, fp
 800170a:	469b      	mov	fp, r3
 800170c:	4483      	add	fp, r0
 800170e:	2000      	movs	r0, #0
 8001710:	e78d      	b.n	800162e <__aeabi_ddiv+0x7a>
 8001712:	464b      	mov	r3, r9
 8001714:	4323      	orrs	r3, r4
 8001716:	4698      	mov	r8, r3
 8001718:	d140      	bne.n	800179c <__aeabi_ddiv+0x1e8>
 800171a:	2308      	movs	r3, #8
 800171c:	4699      	mov	r9, r3
 800171e:	3b06      	subs	r3, #6
 8001720:	2500      	movs	r5, #0
 8001722:	4683      	mov	fp, r0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	e769      	b.n	80015fc <__aeabi_ddiv+0x48>
 8001728:	46b2      	mov	sl, r6
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d0a9      	beq.n	8001684 <__aeabi_ddiv+0xd0>
 8001730:	2b03      	cmp	r3, #3
 8001732:	d100      	bne.n	8001736 <__aeabi_ddiv+0x182>
 8001734:	e211      	b.n	8001b5a <__aeabi_ddiv+0x5a6>
 8001736:	2b01      	cmp	r3, #1
 8001738:	d093      	beq.n	8001662 <__aeabi_ddiv+0xae>
 800173a:	4a35      	ldr	r2, [pc, #212]	; (8001810 <__aeabi_ddiv+0x25c>)
 800173c:	445a      	add	r2, fp
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_ddiv+0x190>
 8001742:	e13c      	b.n	80019be <__aeabi_ddiv+0x40a>
 8001744:	076b      	lsls	r3, r5, #29
 8001746:	d000      	beq.n	800174a <__aeabi_ddiv+0x196>
 8001748:	e1a7      	b.n	8001a9a <__aeabi_ddiv+0x4e6>
 800174a:	08ed      	lsrs	r5, r5, #3
 800174c:	4643      	mov	r3, r8
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	d506      	bpl.n	8001760 <__aeabi_ddiv+0x1ac>
 8001752:	4642      	mov	r2, r8
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <__aeabi_ddiv+0x260>)
 8001756:	401a      	ands	r2, r3
 8001758:	4690      	mov	r8, r2
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	445a      	add	r2, fp
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <__aeabi_ddiv+0x264>)
 8001762:	429a      	cmp	r2, r3
 8001764:	dc8e      	bgt.n	8001684 <__aeabi_ddiv+0xd0>
 8001766:	4643      	mov	r3, r8
 8001768:	0552      	lsls	r2, r2, #21
 800176a:	0758      	lsls	r0, r3, #29
 800176c:	025c      	lsls	r4, r3, #9
 800176e:	4305      	orrs	r5, r0
 8001770:	0b24      	lsrs	r4, r4, #12
 8001772:	0d53      	lsrs	r3, r2, #21
 8001774:	e778      	b.n	8001668 <__aeabi_ddiv+0xb4>
 8001776:	46ba      	mov	sl, r7
 8001778:	46a0      	mov	r8, r4
 800177a:	0015      	movs	r5, r2
 800177c:	9000      	str	r0, [sp, #0]
 800177e:	e7d4      	b.n	800172a <__aeabi_ddiv+0x176>
 8001780:	464a      	mov	r2, r9
 8001782:	2303      	movs	r3, #3
 8001784:	431a      	orrs	r2, r3
 8001786:	4691      	mov	r9, r2
 8001788:	2003      	movs	r0, #3
 800178a:	4652      	mov	r2, sl
 800178c:	e74f      	b.n	800162e <__aeabi_ddiv+0x7a>
 800178e:	4649      	mov	r1, r9
 8001790:	2301      	movs	r3, #1
 8001792:	4319      	orrs	r1, r3
 8001794:	4689      	mov	r9, r1
 8001796:	2400      	movs	r4, #0
 8001798:	2001      	movs	r0, #1
 800179a:	e748      	b.n	800162e <__aeabi_ddiv+0x7a>
 800179c:	230c      	movs	r3, #12
 800179e:	4699      	mov	r9, r3
 80017a0:	3b09      	subs	r3, #9
 80017a2:	46a0      	mov	r8, r4
 80017a4:	4683      	mov	fp, r0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	e728      	b.n	80015fc <__aeabi_ddiv+0x48>
 80017aa:	2304      	movs	r3, #4
 80017ac:	4699      	mov	r9, r3
 80017ae:	2300      	movs	r3, #0
 80017b0:	469b      	mov	fp, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	2500      	movs	r5, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	e720      	b.n	80015fc <__aeabi_ddiv+0x48>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	469a      	mov	sl, r3
 80017c0:	2500      	movs	r5, #0
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <__aeabi_ddiv+0x244>)
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e74f      	b.n	8001668 <__aeabi_ddiv+0xb4>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	4641      	mov	r1, r8
 80017cc:	031b      	lsls	r3, r3, #12
 80017ce:	4219      	tst	r1, r3
 80017d0:	d008      	beq.n	80017e4 <__aeabi_ddiv+0x230>
 80017d2:	421c      	tst	r4, r3
 80017d4:	d106      	bne.n	80017e4 <__aeabi_ddiv+0x230>
 80017d6:	431c      	orrs	r4, r3
 80017d8:	0324      	lsls	r4, r4, #12
 80017da:	46ba      	mov	sl, r7
 80017dc:	0015      	movs	r5, r2
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <__aeabi_ddiv+0x244>)
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	e741      	b.n	8001668 <__aeabi_ddiv+0xb4>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	4643      	mov	r3, r8
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	431c      	orrs	r4, r3
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	46b2      	mov	sl, r6
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <__aeabi_ddiv+0x244>)
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	e738      	b.n	8001668 <__aeabi_ddiv+0xb4>
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	000007ff 	.word	0x000007ff
 80017fc:	fffffc01 	.word	0xfffffc01
 8001800:	0800a2dc 	.word	0x0800a2dc
 8001804:	fffff801 	.word	0xfffff801
 8001808:	fffffc0d 	.word	0xfffffc0d
 800180c:	000003f3 	.word	0x000003f3
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	4544      	cmp	r4, r8
 800181e:	d200      	bcs.n	8001822 <__aeabi_ddiv+0x26e>
 8001820:	e116      	b.n	8001a50 <__aeabi_ddiv+0x49c>
 8001822:	d100      	bne.n	8001826 <__aeabi_ddiv+0x272>
 8001824:	e111      	b.n	8001a4a <__aeabi_ddiv+0x496>
 8001826:	2301      	movs	r3, #1
 8001828:	425b      	negs	r3, r3
 800182a:	469c      	mov	ip, r3
 800182c:	002e      	movs	r6, r5
 800182e:	4640      	mov	r0, r8
 8001830:	2500      	movs	r5, #0
 8001832:	44e3      	add	fp, ip
 8001834:	0223      	lsls	r3, r4, #8
 8001836:	0e14      	lsrs	r4, r2, #24
 8001838:	431c      	orrs	r4, r3
 800183a:	0c1b      	lsrs	r3, r3, #16
 800183c:	4699      	mov	r9, r3
 800183e:	0423      	lsls	r3, r4, #16
 8001840:	0c1f      	lsrs	r7, r3, #16
 8001842:	0212      	lsls	r2, r2, #8
 8001844:	4649      	mov	r1, r9
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	9701      	str	r7, [sp, #4]
 800184a:	f7fe fcfd 	bl	8000248 <__aeabi_uidivmod>
 800184e:	0002      	movs	r2, r0
 8001850:	437a      	muls	r2, r7
 8001852:	040b      	lsls	r3, r1, #16
 8001854:	0c31      	lsrs	r1, r6, #16
 8001856:	4680      	mov	r8, r0
 8001858:	4319      	orrs	r1, r3
 800185a:	428a      	cmp	r2, r1
 800185c:	d90b      	bls.n	8001876 <__aeabi_ddiv+0x2c2>
 800185e:	2301      	movs	r3, #1
 8001860:	425b      	negs	r3, r3
 8001862:	469c      	mov	ip, r3
 8001864:	1909      	adds	r1, r1, r4
 8001866:	44e0      	add	r8, ip
 8001868:	428c      	cmp	r4, r1
 800186a:	d804      	bhi.n	8001876 <__aeabi_ddiv+0x2c2>
 800186c:	428a      	cmp	r2, r1
 800186e:	d902      	bls.n	8001876 <__aeabi_ddiv+0x2c2>
 8001870:	1e83      	subs	r3, r0, #2
 8001872:	4698      	mov	r8, r3
 8001874:	1909      	adds	r1, r1, r4
 8001876:	1a88      	subs	r0, r1, r2
 8001878:	4649      	mov	r1, r9
 800187a:	f7fe fce5 	bl	8000248 <__aeabi_uidivmod>
 800187e:	0409      	lsls	r1, r1, #16
 8001880:	468c      	mov	ip, r1
 8001882:	0431      	lsls	r1, r6, #16
 8001884:	4666      	mov	r6, ip
 8001886:	9a01      	ldr	r2, [sp, #4]
 8001888:	0c09      	lsrs	r1, r1, #16
 800188a:	4342      	muls	r2, r0
 800188c:	0003      	movs	r3, r0
 800188e:	4331      	orrs	r1, r6
 8001890:	428a      	cmp	r2, r1
 8001892:	d904      	bls.n	800189e <__aeabi_ddiv+0x2ea>
 8001894:	1909      	adds	r1, r1, r4
 8001896:	3b01      	subs	r3, #1
 8001898:	428c      	cmp	r4, r1
 800189a:	d800      	bhi.n	800189e <__aeabi_ddiv+0x2ea>
 800189c:	e111      	b.n	8001ac2 <__aeabi_ddiv+0x50e>
 800189e:	1a89      	subs	r1, r1, r2
 80018a0:	4642      	mov	r2, r8
 80018a2:	9e00      	ldr	r6, [sp, #0]
 80018a4:	0412      	lsls	r2, r2, #16
 80018a6:	431a      	orrs	r2, r3
 80018a8:	0c33      	lsrs	r3, r6, #16
 80018aa:	001f      	movs	r7, r3
 80018ac:	0c10      	lsrs	r0, r2, #16
 80018ae:	4690      	mov	r8, r2
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	0413      	lsls	r3, r2, #16
 80018b4:	0432      	lsls	r2, r6, #16
 80018b6:	0c16      	lsrs	r6, r2, #16
 80018b8:	0032      	movs	r2, r6
 80018ba:	0c1b      	lsrs	r3, r3, #16
 80018bc:	435a      	muls	r2, r3
 80018be:	9603      	str	r6, [sp, #12]
 80018c0:	437b      	muls	r3, r7
 80018c2:	4346      	muls	r6, r0
 80018c4:	4378      	muls	r0, r7
 80018c6:	0c17      	lsrs	r7, r2, #16
 80018c8:	46bc      	mov	ip, r7
 80018ca:	199b      	adds	r3, r3, r6
 80018cc:	4463      	add	r3, ip
 80018ce:	429e      	cmp	r6, r3
 80018d0:	d903      	bls.n	80018da <__aeabi_ddiv+0x326>
 80018d2:	2680      	movs	r6, #128	; 0x80
 80018d4:	0276      	lsls	r6, r6, #9
 80018d6:	46b4      	mov	ip, r6
 80018d8:	4460      	add	r0, ip
 80018da:	0c1e      	lsrs	r6, r3, #16
 80018dc:	1830      	adds	r0, r6, r0
 80018de:	0416      	lsls	r6, r2, #16
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	0c36      	lsrs	r6, r6, #16
 80018e4:	199e      	adds	r6, r3, r6
 80018e6:	4281      	cmp	r1, r0
 80018e8:	d200      	bcs.n	80018ec <__aeabi_ddiv+0x338>
 80018ea:	e09c      	b.n	8001a26 <__aeabi_ddiv+0x472>
 80018ec:	d100      	bne.n	80018f0 <__aeabi_ddiv+0x33c>
 80018ee:	e097      	b.n	8001a20 <__aeabi_ddiv+0x46c>
 80018f0:	1bae      	subs	r6, r5, r6
 80018f2:	1a09      	subs	r1, r1, r0
 80018f4:	42b5      	cmp	r5, r6
 80018f6:	4180      	sbcs	r0, r0
 80018f8:	4240      	negs	r0, r0
 80018fa:	1a08      	subs	r0, r1, r0
 80018fc:	4284      	cmp	r4, r0
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0x34e>
 8001900:	e111      	b.n	8001b26 <__aeabi_ddiv+0x572>
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fca0 	bl	8000248 <__aeabi_uidivmod>
 8001908:	9a01      	ldr	r2, [sp, #4]
 800190a:	040b      	lsls	r3, r1, #16
 800190c:	4342      	muls	r2, r0
 800190e:	0c31      	lsrs	r1, r6, #16
 8001910:	0005      	movs	r5, r0
 8001912:	4319      	orrs	r1, r3
 8001914:	428a      	cmp	r2, r1
 8001916:	d907      	bls.n	8001928 <__aeabi_ddiv+0x374>
 8001918:	1909      	adds	r1, r1, r4
 800191a:	3d01      	subs	r5, #1
 800191c:	428c      	cmp	r4, r1
 800191e:	d803      	bhi.n	8001928 <__aeabi_ddiv+0x374>
 8001920:	428a      	cmp	r2, r1
 8001922:	d901      	bls.n	8001928 <__aeabi_ddiv+0x374>
 8001924:	1e85      	subs	r5, r0, #2
 8001926:	1909      	adds	r1, r1, r4
 8001928:	1a88      	subs	r0, r1, r2
 800192a:	4649      	mov	r1, r9
 800192c:	f7fe fc8c 	bl	8000248 <__aeabi_uidivmod>
 8001930:	0409      	lsls	r1, r1, #16
 8001932:	468c      	mov	ip, r1
 8001934:	0431      	lsls	r1, r6, #16
 8001936:	4666      	mov	r6, ip
 8001938:	9a01      	ldr	r2, [sp, #4]
 800193a:	0c09      	lsrs	r1, r1, #16
 800193c:	4342      	muls	r2, r0
 800193e:	0003      	movs	r3, r0
 8001940:	4331      	orrs	r1, r6
 8001942:	428a      	cmp	r2, r1
 8001944:	d907      	bls.n	8001956 <__aeabi_ddiv+0x3a2>
 8001946:	1909      	adds	r1, r1, r4
 8001948:	3b01      	subs	r3, #1
 800194a:	428c      	cmp	r4, r1
 800194c:	d803      	bhi.n	8001956 <__aeabi_ddiv+0x3a2>
 800194e:	428a      	cmp	r2, r1
 8001950:	d901      	bls.n	8001956 <__aeabi_ddiv+0x3a2>
 8001952:	1e83      	subs	r3, r0, #2
 8001954:	1909      	adds	r1, r1, r4
 8001956:	9e03      	ldr	r6, [sp, #12]
 8001958:	1a89      	subs	r1, r1, r2
 800195a:	0032      	movs	r2, r6
 800195c:	042d      	lsls	r5, r5, #16
 800195e:	431d      	orrs	r5, r3
 8001960:	9f02      	ldr	r7, [sp, #8]
 8001962:	042b      	lsls	r3, r5, #16
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	435a      	muls	r2, r3
 8001968:	437b      	muls	r3, r7
 800196a:	469c      	mov	ip, r3
 800196c:	0c28      	lsrs	r0, r5, #16
 800196e:	4346      	muls	r6, r0
 8001970:	0c13      	lsrs	r3, r2, #16
 8001972:	44b4      	add	ip, r6
 8001974:	4463      	add	r3, ip
 8001976:	4378      	muls	r0, r7
 8001978:	429e      	cmp	r6, r3
 800197a:	d903      	bls.n	8001984 <__aeabi_ddiv+0x3d0>
 800197c:	2680      	movs	r6, #128	; 0x80
 800197e:	0276      	lsls	r6, r6, #9
 8001980:	46b4      	mov	ip, r6
 8001982:	4460      	add	r0, ip
 8001984:	0c1e      	lsrs	r6, r3, #16
 8001986:	0412      	lsls	r2, r2, #16
 8001988:	041b      	lsls	r3, r3, #16
 800198a:	0c12      	lsrs	r2, r2, #16
 800198c:	1830      	adds	r0, r6, r0
 800198e:	189b      	adds	r3, r3, r2
 8001990:	4281      	cmp	r1, r0
 8001992:	d306      	bcc.n	80019a2 <__aeabi_ddiv+0x3ee>
 8001994:	d002      	beq.n	800199c <__aeabi_ddiv+0x3e8>
 8001996:	2301      	movs	r3, #1
 8001998:	431d      	orrs	r5, r3
 800199a:	e6ce      	b.n	800173a <__aeabi_ddiv+0x186>
 800199c:	2b00      	cmp	r3, #0
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0x3ee>
 80019a0:	e6cb      	b.n	800173a <__aeabi_ddiv+0x186>
 80019a2:	1861      	adds	r1, r4, r1
 80019a4:	1e6e      	subs	r6, r5, #1
 80019a6:	42a1      	cmp	r1, r4
 80019a8:	d200      	bcs.n	80019ac <__aeabi_ddiv+0x3f8>
 80019aa:	e0a4      	b.n	8001af6 <__aeabi_ddiv+0x542>
 80019ac:	4281      	cmp	r1, r0
 80019ae:	d200      	bcs.n	80019b2 <__aeabi_ddiv+0x3fe>
 80019b0:	e0c9      	b.n	8001b46 <__aeabi_ddiv+0x592>
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x402>
 80019b4:	e0d9      	b.n	8001b6a <__aeabi_ddiv+0x5b6>
 80019b6:	0035      	movs	r5, r6
 80019b8:	e7ed      	b.n	8001996 <__aeabi_ddiv+0x3e2>
 80019ba:	2501      	movs	r5, #1
 80019bc:	426d      	negs	r5, r5
 80019be:	2101      	movs	r1, #1
 80019c0:	1a89      	subs	r1, r1, r2
 80019c2:	2938      	cmp	r1, #56	; 0x38
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_ddiv+0x414>
 80019c6:	e64c      	b.n	8001662 <__aeabi_ddiv+0xae>
 80019c8:	291f      	cmp	r1, #31
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_ddiv+0x41a>
 80019cc:	e07f      	b.n	8001ace <__aeabi_ddiv+0x51a>
 80019ce:	231f      	movs	r3, #31
 80019d0:	425b      	negs	r3, r3
 80019d2:	1a9a      	subs	r2, r3, r2
 80019d4:	4643      	mov	r3, r8
 80019d6:	40d3      	lsrs	r3, r2
 80019d8:	2920      	cmp	r1, #32
 80019da:	d004      	beq.n	80019e6 <__aeabi_ddiv+0x432>
 80019dc:	4644      	mov	r4, r8
 80019de:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <__aeabi_ddiv+0x5c0>)
 80019e0:	445a      	add	r2, fp
 80019e2:	4094      	lsls	r4, r2
 80019e4:	4325      	orrs	r5, r4
 80019e6:	1e6a      	subs	r2, r5, #1
 80019e8:	4195      	sbcs	r5, r2
 80019ea:	2207      	movs	r2, #7
 80019ec:	432b      	orrs	r3, r5
 80019ee:	0015      	movs	r5, r2
 80019f0:	2400      	movs	r4, #0
 80019f2:	401d      	ands	r5, r3
 80019f4:	421a      	tst	r2, r3
 80019f6:	d100      	bne.n	80019fa <__aeabi_ddiv+0x446>
 80019f8:	e0a1      	b.n	8001b3e <__aeabi_ddiv+0x58a>
 80019fa:	220f      	movs	r2, #15
 80019fc:	2400      	movs	r4, #0
 80019fe:	401a      	ands	r2, r3
 8001a00:	2a04      	cmp	r2, #4
 8001a02:	d100      	bne.n	8001a06 <__aeabi_ddiv+0x452>
 8001a04:	e098      	b.n	8001b38 <__aeabi_ddiv+0x584>
 8001a06:	1d1a      	adds	r2, r3, #4
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	419b      	sbcs	r3, r3
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	18e4      	adds	r4, r4, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	0222      	lsls	r2, r4, #8
 8001a14:	d400      	bmi.n	8001a18 <__aeabi_ddiv+0x464>
 8001a16:	e08f      	b.n	8001b38 <__aeabi_ddiv+0x584>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2400      	movs	r4, #0
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	e623      	b.n	8001668 <__aeabi_ddiv+0xb4>
 8001a20:	42b5      	cmp	r5, r6
 8001a22:	d300      	bcc.n	8001a26 <__aeabi_ddiv+0x472>
 8001a24:	e764      	b.n	80018f0 <__aeabi_ddiv+0x33c>
 8001a26:	4643      	mov	r3, r8
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	9b00      	ldr	r3, [sp, #0]
 8001a2c:	469c      	mov	ip, r3
 8001a2e:	4465      	add	r5, ip
 8001a30:	001f      	movs	r7, r3
 8001a32:	429d      	cmp	r5, r3
 8001a34:	419b      	sbcs	r3, r3
 8001a36:	425b      	negs	r3, r3
 8001a38:	191b      	adds	r3, r3, r4
 8001a3a:	18c9      	adds	r1, r1, r3
 8001a3c:	428c      	cmp	r4, r1
 8001a3e:	d23a      	bcs.n	8001ab6 <__aeabi_ddiv+0x502>
 8001a40:	4288      	cmp	r0, r1
 8001a42:	d863      	bhi.n	8001b0c <__aeabi_ddiv+0x558>
 8001a44:	d060      	beq.n	8001b08 <__aeabi_ddiv+0x554>
 8001a46:	4690      	mov	r8, r2
 8001a48:	e752      	b.n	80018f0 <__aeabi_ddiv+0x33c>
 8001a4a:	42aa      	cmp	r2, r5
 8001a4c:	d900      	bls.n	8001a50 <__aeabi_ddiv+0x49c>
 8001a4e:	e6ea      	b.n	8001826 <__aeabi_ddiv+0x272>
 8001a50:	4643      	mov	r3, r8
 8001a52:	07de      	lsls	r6, r3, #31
 8001a54:	0858      	lsrs	r0, r3, #1
 8001a56:	086b      	lsrs	r3, r5, #1
 8001a58:	431e      	orrs	r6, r3
 8001a5a:	07ed      	lsls	r5, r5, #31
 8001a5c:	e6ea      	b.n	8001834 <__aeabi_ddiv+0x280>
 8001a5e:	4648      	mov	r0, r9
 8001a60:	f001 f926 	bl	8002cb0 <__clzsi2>
 8001a64:	0001      	movs	r1, r0
 8001a66:	0002      	movs	r2, r0
 8001a68:	3115      	adds	r1, #21
 8001a6a:	3220      	adds	r2, #32
 8001a6c:	291c      	cmp	r1, #28
 8001a6e:	dc00      	bgt.n	8001a72 <__aeabi_ddiv+0x4be>
 8001a70:	e61a      	b.n	80016a8 <__aeabi_ddiv+0xf4>
 8001a72:	464b      	mov	r3, r9
 8001a74:	3808      	subs	r0, #8
 8001a76:	4083      	lsls	r3, r0
 8001a78:	2500      	movs	r5, #0
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	e620      	b.n	80016c0 <__aeabi_ddiv+0x10c>
 8001a7e:	f001 f917 	bl	8002cb0 <__clzsi2>
 8001a82:	0003      	movs	r3, r0
 8001a84:	001a      	movs	r2, r3
 8001a86:	3215      	adds	r2, #21
 8001a88:	3020      	adds	r0, #32
 8001a8a:	2a1c      	cmp	r2, #28
 8001a8c:	dc00      	bgt.n	8001a90 <__aeabi_ddiv+0x4dc>
 8001a8e:	e630      	b.n	80016f2 <__aeabi_ddiv+0x13e>
 8001a90:	4654      	mov	r4, sl
 8001a92:	3b08      	subs	r3, #8
 8001a94:	2200      	movs	r2, #0
 8001a96:	409c      	lsls	r4, r3
 8001a98:	e635      	b.n	8001706 <__aeabi_ddiv+0x152>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	402b      	ands	r3, r5
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_ddiv+0x4f0>
 8001aa2:	e652      	b.n	800174a <__aeabi_ddiv+0x196>
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	419b      	sbcs	r3, r3
 8001aac:	3504      	adds	r5, #4
 8001aae:	425b      	negs	r3, r3
 8001ab0:	08ed      	lsrs	r5, r5, #3
 8001ab2:	4498      	add	r8, r3
 8001ab4:	e64a      	b.n	800174c <__aeabi_ddiv+0x198>
 8001ab6:	428c      	cmp	r4, r1
 8001ab8:	d1c5      	bne.n	8001a46 <__aeabi_ddiv+0x492>
 8001aba:	42af      	cmp	r7, r5
 8001abc:	d9c0      	bls.n	8001a40 <__aeabi_ddiv+0x48c>
 8001abe:	4690      	mov	r8, r2
 8001ac0:	e716      	b.n	80018f0 <__aeabi_ddiv+0x33c>
 8001ac2:	428a      	cmp	r2, r1
 8001ac4:	d800      	bhi.n	8001ac8 <__aeabi_ddiv+0x514>
 8001ac6:	e6ea      	b.n	800189e <__aeabi_ddiv+0x2ea>
 8001ac8:	1e83      	subs	r3, r0, #2
 8001aca:	1909      	adds	r1, r1, r4
 8001acc:	e6e7      	b.n	800189e <__aeabi_ddiv+0x2ea>
 8001ace:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <__aeabi_ddiv+0x5c4>)
 8001ad0:	0028      	movs	r0, r5
 8001ad2:	445a      	add	r2, fp
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	4095      	lsls	r5, r2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	40c8      	lsrs	r0, r1
 8001adc:	1e6a      	subs	r2, r5, #1
 8001ade:	4195      	sbcs	r5, r2
 8001ae0:	4644      	mov	r4, r8
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	432b      	orrs	r3, r5
 8001ae6:	40cc      	lsrs	r4, r1
 8001ae8:	075a      	lsls	r2, r3, #29
 8001aea:	d092      	beq.n	8001a12 <__aeabi_ddiv+0x45e>
 8001aec:	220f      	movs	r2, #15
 8001aee:	401a      	ands	r2, r3
 8001af0:	2a04      	cmp	r2, #4
 8001af2:	d188      	bne.n	8001a06 <__aeabi_ddiv+0x452>
 8001af4:	e78d      	b.n	8001a12 <__aeabi_ddiv+0x45e>
 8001af6:	0035      	movs	r5, r6
 8001af8:	4281      	cmp	r1, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_ddiv+0x54a>
 8001afc:	e74b      	b.n	8001996 <__aeabi_ddiv+0x3e2>
 8001afe:	9a00      	ldr	r2, [sp, #0]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d000      	beq.n	8001b06 <__aeabi_ddiv+0x552>
 8001b04:	e747      	b.n	8001996 <__aeabi_ddiv+0x3e2>
 8001b06:	e618      	b.n	800173a <__aeabi_ddiv+0x186>
 8001b08:	42ae      	cmp	r6, r5
 8001b0a:	d99c      	bls.n	8001a46 <__aeabi_ddiv+0x492>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	425b      	negs	r3, r3
 8001b10:	469c      	mov	ip, r3
 8001b12:	9b00      	ldr	r3, [sp, #0]
 8001b14:	44e0      	add	r8, ip
 8001b16:	469c      	mov	ip, r3
 8001b18:	4465      	add	r5, ip
 8001b1a:	429d      	cmp	r5, r3
 8001b1c:	419b      	sbcs	r3, r3
 8001b1e:	425b      	negs	r3, r3
 8001b20:	191b      	adds	r3, r3, r4
 8001b22:	18c9      	adds	r1, r1, r3
 8001b24:	e6e4      	b.n	80018f0 <__aeabi_ddiv+0x33c>
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <__aeabi_ddiv+0x5c8>)
 8001b28:	445a      	add	r2, fp
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_ddiv+0x57c>
 8001b2e:	e744      	b.n	80019ba <__aeabi_ddiv+0x406>
 8001b30:	2301      	movs	r3, #1
 8001b32:	2500      	movs	r5, #0
 8001b34:	4498      	add	r8, r3
 8001b36:	e609      	b.n	800174c <__aeabi_ddiv+0x198>
 8001b38:	0765      	lsls	r5, r4, #29
 8001b3a:	0264      	lsls	r4, r4, #9
 8001b3c:	0b24      	lsrs	r4, r4, #12
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	431d      	orrs	r5, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	e590      	b.n	8001668 <__aeabi_ddiv+0xb4>
 8001b46:	9e00      	ldr	r6, [sp, #0]
 8001b48:	3d02      	subs	r5, #2
 8001b4a:	0072      	lsls	r2, r6, #1
 8001b4c:	42b2      	cmp	r2, r6
 8001b4e:	41bf      	sbcs	r7, r7
 8001b50:	427f      	negs	r7, r7
 8001b52:	193c      	adds	r4, r7, r4
 8001b54:	1909      	adds	r1, r1, r4
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	e7ce      	b.n	8001af8 <__aeabi_ddiv+0x544>
 8001b5a:	2480      	movs	r4, #128	; 0x80
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	431c      	orrs	r4, r3
 8001b62:	0324      	lsls	r4, r4, #12
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <__aeabi_ddiv+0x5cc>)
 8001b66:	0b24      	lsrs	r4, r4, #12
 8001b68:	e57e      	b.n	8001668 <__aeabi_ddiv+0xb4>
 8001b6a:	9a00      	ldr	r2, [sp, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3ea      	bcc.n	8001b46 <__aeabi_ddiv+0x592>
 8001b70:	0035      	movs	r5, r6
 8001b72:	e7c4      	b.n	8001afe <__aeabi_ddiv+0x54a>
 8001b74:	0000043e 	.word	0x0000043e
 8001b78:	0000041e 	.word	0x0000041e
 8001b7c:	000003ff 	.word	0x000003ff
 8001b80:	000007ff 	.word	0x000007ff

08001b84 <__eqdf2>:
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	464f      	mov	r7, r9
 8001b88:	4646      	mov	r6, r8
 8001b8a:	46d6      	mov	lr, sl
 8001b8c:	4694      	mov	ip, r2
 8001b8e:	4691      	mov	r9, r2
 8001b90:	031a      	lsls	r2, r3, #12
 8001b92:	0b12      	lsrs	r2, r2, #12
 8001b94:	4d18      	ldr	r5, [pc, #96]	; (8001bf8 <__eqdf2+0x74>)
 8001b96:	b5c0      	push	{r6, r7, lr}
 8001b98:	004c      	lsls	r4, r1, #1
 8001b9a:	030f      	lsls	r7, r1, #12
 8001b9c:	4692      	mov	sl, r2
 8001b9e:	005a      	lsls	r2, r3, #1
 8001ba0:	0006      	movs	r6, r0
 8001ba2:	4680      	mov	r8, r0
 8001ba4:	0b3f      	lsrs	r7, r7, #12
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	0d64      	lsrs	r4, r4, #21
 8001baa:	0fc9      	lsrs	r1, r1, #31
 8001bac:	0d52      	lsrs	r2, r2, #21
 8001bae:	0fdb      	lsrs	r3, r3, #31
 8001bb0:	42ac      	cmp	r4, r5
 8001bb2:	d00a      	beq.n	8001bca <__eqdf2+0x46>
 8001bb4:	42aa      	cmp	r2, r5
 8001bb6:	d003      	beq.n	8001bc0 <__eqdf2+0x3c>
 8001bb8:	4294      	cmp	r4, r2
 8001bba:	d101      	bne.n	8001bc0 <__eqdf2+0x3c>
 8001bbc:	4557      	cmp	r7, sl
 8001bbe:	d00d      	beq.n	8001bdc <__eqdf2+0x58>
 8001bc0:	bce0      	pop	{r5, r6, r7}
 8001bc2:	46ba      	mov	sl, r7
 8001bc4:	46b1      	mov	r9, r6
 8001bc6:	46a8      	mov	r8, r5
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bca:	003d      	movs	r5, r7
 8001bcc:	4335      	orrs	r5, r6
 8001bce:	d1f7      	bne.n	8001bc0 <__eqdf2+0x3c>
 8001bd0:	42a2      	cmp	r2, r4
 8001bd2:	d1f5      	bne.n	8001bc0 <__eqdf2+0x3c>
 8001bd4:	4652      	mov	r2, sl
 8001bd6:	4665      	mov	r5, ip
 8001bd8:	432a      	orrs	r2, r5
 8001bda:	d1f1      	bne.n	8001bc0 <__eqdf2+0x3c>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	45c8      	cmp	r8, r9
 8001be0:	d1ee      	bne.n	8001bc0 <__eqdf2+0x3c>
 8001be2:	4299      	cmp	r1, r3
 8001be4:	d006      	beq.n	8001bf4 <__eqdf2+0x70>
 8001be6:	2c00      	cmp	r4, #0
 8001be8:	d1ea      	bne.n	8001bc0 <__eqdf2+0x3c>
 8001bea:	433e      	orrs	r6, r7
 8001bec:	0030      	movs	r0, r6
 8001bee:	1e46      	subs	r6, r0, #1
 8001bf0:	41b0      	sbcs	r0, r6
 8001bf2:	e7e5      	b.n	8001bc0 <__eqdf2+0x3c>
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e7e3      	b.n	8001bc0 <__eqdf2+0x3c>
 8001bf8:	000007ff 	.word	0x000007ff

08001bfc <__gedf2>:
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	464e      	mov	r6, r9
 8001c00:	4645      	mov	r5, r8
 8001c02:	4657      	mov	r7, sl
 8001c04:	46de      	mov	lr, fp
 8001c06:	0004      	movs	r4, r0
 8001c08:	0018      	movs	r0, r3
 8001c0a:	b5e0      	push	{r5, r6, r7, lr}
 8001c0c:	0016      	movs	r6, r2
 8001c0e:	031b      	lsls	r3, r3, #12
 8001c10:	0b1b      	lsrs	r3, r3, #12
 8001c12:	4d32      	ldr	r5, [pc, #200]	; (8001cdc <__gedf2+0xe0>)
 8001c14:	030f      	lsls	r7, r1, #12
 8001c16:	004a      	lsls	r2, r1, #1
 8001c18:	4699      	mov	r9, r3
 8001c1a:	0043      	lsls	r3, r0, #1
 8001c1c:	46a4      	mov	ip, r4
 8001c1e:	46b0      	mov	r8, r6
 8001c20:	0b3f      	lsrs	r7, r7, #12
 8001c22:	0d52      	lsrs	r2, r2, #21
 8001c24:	0fc9      	lsrs	r1, r1, #31
 8001c26:	0d5b      	lsrs	r3, r3, #21
 8001c28:	0fc0      	lsrs	r0, r0, #31
 8001c2a:	42aa      	cmp	r2, r5
 8001c2c:	d029      	beq.n	8001c82 <__gedf2+0x86>
 8001c2e:	42ab      	cmp	r3, r5
 8001c30:	d018      	beq.n	8001c64 <__gedf2+0x68>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d12a      	bne.n	8001c8c <__gedf2+0x90>
 8001c36:	433c      	orrs	r4, r7
 8001c38:	46a3      	mov	fp, r4
 8001c3a:	4265      	negs	r5, r4
 8001c3c:	4165      	adcs	r5, r4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <__gedf2+0x4c>
 8001c42:	464c      	mov	r4, r9
 8001c44:	4326      	orrs	r6, r4
 8001c46:	d027      	beq.n	8001c98 <__gedf2+0x9c>
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d115      	bne.n	8001c78 <__gedf2+0x7c>
 8001c4c:	4281      	cmp	r1, r0
 8001c4e:	d028      	beq.n	8001ca2 <__gedf2+0xa6>
 8001c50:	2002      	movs	r0, #2
 8001c52:	3901      	subs	r1, #1
 8001c54:	4008      	ands	r0, r1
 8001c56:	3801      	subs	r0, #1
 8001c58:	bcf0      	pop	{r4, r5, r6, r7}
 8001c5a:	46bb      	mov	fp, r7
 8001c5c:	46b2      	mov	sl, r6
 8001c5e:	46a9      	mov	r9, r5
 8001c60:	46a0      	mov	r8, r4
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c64:	464d      	mov	r5, r9
 8001c66:	432e      	orrs	r6, r5
 8001c68:	d12f      	bne.n	8001cca <__gedf2+0xce>
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	d1ee      	bne.n	8001c4c <__gedf2+0x50>
 8001c6e:	433c      	orrs	r4, r7
 8001c70:	4265      	negs	r5, r4
 8001c72:	4165      	adcs	r5, r4
 8001c74:	2d00      	cmp	r5, #0
 8001c76:	d0e9      	beq.n	8001c4c <__gedf2+0x50>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d1ed      	bne.n	8001c58 <__gedf2+0x5c>
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	4240      	negs	r0, r0
 8001c80:	e7ea      	b.n	8001c58 <__gedf2+0x5c>
 8001c82:	003d      	movs	r5, r7
 8001c84:	4325      	orrs	r5, r4
 8001c86:	d120      	bne.n	8001cca <__gedf2+0xce>
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d0eb      	beq.n	8001c64 <__gedf2+0x68>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1dd      	bne.n	8001c4c <__gedf2+0x50>
 8001c90:	464c      	mov	r4, r9
 8001c92:	4326      	orrs	r6, r4
 8001c94:	d1da      	bne.n	8001c4c <__gedf2+0x50>
 8001c96:	e7db      	b.n	8001c50 <__gedf2+0x54>
 8001c98:	465b      	mov	r3, fp
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0db      	beq.n	8001c58 <__gedf2+0x5c>
 8001ca0:	e7d6      	b.n	8001c50 <__gedf2+0x54>
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dc0a      	bgt.n	8001cbc <__gedf2+0xc0>
 8001ca6:	dbe7      	blt.n	8001c78 <__gedf2+0x7c>
 8001ca8:	454f      	cmp	r7, r9
 8001caa:	d8d1      	bhi.n	8001c50 <__gedf2+0x54>
 8001cac:	d010      	beq.n	8001cd0 <__gedf2+0xd4>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	454f      	cmp	r7, r9
 8001cb2:	d2d1      	bcs.n	8001c58 <__gedf2+0x5c>
 8001cb4:	2900      	cmp	r1, #0
 8001cb6:	d0e1      	beq.n	8001c7c <__gedf2+0x80>
 8001cb8:	0008      	movs	r0, r1
 8001cba:	e7cd      	b.n	8001c58 <__gedf2+0x5c>
 8001cbc:	4243      	negs	r3, r0
 8001cbe:	4158      	adcs	r0, r3
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	4240      	negs	r0, r0
 8001cc4:	4018      	ands	r0, r3
 8001cc6:	3801      	subs	r0, #1
 8001cc8:	e7c6      	b.n	8001c58 <__gedf2+0x5c>
 8001cca:	2002      	movs	r0, #2
 8001ccc:	4240      	negs	r0, r0
 8001cce:	e7c3      	b.n	8001c58 <__gedf2+0x5c>
 8001cd0:	45c4      	cmp	ip, r8
 8001cd2:	d8bd      	bhi.n	8001c50 <__gedf2+0x54>
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	45c4      	cmp	ip, r8
 8001cd8:	d2be      	bcs.n	8001c58 <__gedf2+0x5c>
 8001cda:	e7eb      	b.n	8001cb4 <__gedf2+0xb8>
 8001cdc:	000007ff 	.word	0x000007ff

08001ce0 <__ledf2>:
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	464e      	mov	r6, r9
 8001ce4:	4645      	mov	r5, r8
 8001ce6:	4657      	mov	r7, sl
 8001ce8:	46de      	mov	lr, fp
 8001cea:	0004      	movs	r4, r0
 8001cec:	0018      	movs	r0, r3
 8001cee:	b5e0      	push	{r5, r6, r7, lr}
 8001cf0:	0016      	movs	r6, r2
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	0b1b      	lsrs	r3, r3, #12
 8001cf6:	4d31      	ldr	r5, [pc, #196]	; (8001dbc <__ledf2+0xdc>)
 8001cf8:	030f      	lsls	r7, r1, #12
 8001cfa:	004a      	lsls	r2, r1, #1
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	0043      	lsls	r3, r0, #1
 8001d00:	46a4      	mov	ip, r4
 8001d02:	46b0      	mov	r8, r6
 8001d04:	0b3f      	lsrs	r7, r7, #12
 8001d06:	0d52      	lsrs	r2, r2, #21
 8001d08:	0fc9      	lsrs	r1, r1, #31
 8001d0a:	0d5b      	lsrs	r3, r3, #21
 8001d0c:	0fc0      	lsrs	r0, r0, #31
 8001d0e:	42aa      	cmp	r2, r5
 8001d10:	d011      	beq.n	8001d36 <__ledf2+0x56>
 8001d12:	42ab      	cmp	r3, r5
 8001d14:	d014      	beq.n	8001d40 <__ledf2+0x60>
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d12f      	bne.n	8001d7a <__ledf2+0x9a>
 8001d1a:	433c      	orrs	r4, r7
 8001d1c:	46a3      	mov	fp, r4
 8001d1e:	4265      	negs	r5, r4
 8001d20:	4165      	adcs	r5, r4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d114      	bne.n	8001d50 <__ledf2+0x70>
 8001d26:	464c      	mov	r4, r9
 8001d28:	4326      	orrs	r6, r4
 8001d2a:	d111      	bne.n	8001d50 <__ledf2+0x70>
 8001d2c:	465b      	mov	r3, fp
 8001d2e:	2000      	movs	r0, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d017      	beq.n	8001d64 <__ledf2+0x84>
 8001d34:	e010      	b.n	8001d58 <__ledf2+0x78>
 8001d36:	003d      	movs	r5, r7
 8001d38:	4325      	orrs	r5, r4
 8001d3a:	d112      	bne.n	8001d62 <__ledf2+0x82>
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d11c      	bne.n	8001d7a <__ledf2+0x9a>
 8001d40:	464d      	mov	r5, r9
 8001d42:	432e      	orrs	r6, r5
 8001d44:	d10d      	bne.n	8001d62 <__ledf2+0x82>
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d104      	bne.n	8001d54 <__ledf2+0x74>
 8001d4a:	433c      	orrs	r4, r7
 8001d4c:	4265      	negs	r5, r4
 8001d4e:	4165      	adcs	r5, r4
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	d10d      	bne.n	8001d70 <__ledf2+0x90>
 8001d54:	4281      	cmp	r1, r0
 8001d56:	d016      	beq.n	8001d86 <__ledf2+0xa6>
 8001d58:	2002      	movs	r0, #2
 8001d5a:	3901      	subs	r1, #1
 8001d5c:	4008      	ands	r0, r1
 8001d5e:	3801      	subs	r0, #1
 8001d60:	e000      	b.n	8001d64 <__ledf2+0x84>
 8001d62:	2002      	movs	r0, #2
 8001d64:	bcf0      	pop	{r4, r5, r6, r7}
 8001d66:	46bb      	mov	fp, r7
 8001d68:	46b2      	mov	sl, r6
 8001d6a:	46a9      	mov	r9, r5
 8001d6c:	46a0      	mov	r8, r4
 8001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d1f7      	bne.n	8001d64 <__ledf2+0x84>
 8001d74:	2001      	movs	r0, #1
 8001d76:	4240      	negs	r0, r0
 8001d78:	e7f4      	b.n	8001d64 <__ledf2+0x84>
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ea      	bne.n	8001d54 <__ledf2+0x74>
 8001d7e:	464c      	mov	r4, r9
 8001d80:	4326      	orrs	r6, r4
 8001d82:	d1e7      	bne.n	8001d54 <__ledf2+0x74>
 8001d84:	e7e8      	b.n	8001d58 <__ledf2+0x78>
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dd06      	ble.n	8001d98 <__ledf2+0xb8>
 8001d8a:	4243      	negs	r3, r0
 8001d8c:	4158      	adcs	r0, r3
 8001d8e:	2302      	movs	r3, #2
 8001d90:	4240      	negs	r0, r0
 8001d92:	4018      	ands	r0, r3
 8001d94:	3801      	subs	r0, #1
 8001d96:	e7e5      	b.n	8001d64 <__ledf2+0x84>
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbe9      	blt.n	8001d70 <__ledf2+0x90>
 8001d9c:	454f      	cmp	r7, r9
 8001d9e:	d8db      	bhi.n	8001d58 <__ledf2+0x78>
 8001da0:	d006      	beq.n	8001db0 <__ledf2+0xd0>
 8001da2:	2000      	movs	r0, #0
 8001da4:	454f      	cmp	r7, r9
 8001da6:	d2dd      	bcs.n	8001d64 <__ledf2+0x84>
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d0e3      	beq.n	8001d74 <__ledf2+0x94>
 8001dac:	0008      	movs	r0, r1
 8001dae:	e7d9      	b.n	8001d64 <__ledf2+0x84>
 8001db0:	45c4      	cmp	ip, r8
 8001db2:	d8d1      	bhi.n	8001d58 <__ledf2+0x78>
 8001db4:	2000      	movs	r0, #0
 8001db6:	45c4      	cmp	ip, r8
 8001db8:	d2d4      	bcs.n	8001d64 <__ledf2+0x84>
 8001dba:	e7f5      	b.n	8001da8 <__ledf2+0xc8>
 8001dbc:	000007ff 	.word	0x000007ff

08001dc0 <__aeabi_dmul>:
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	4657      	mov	r7, sl
 8001dc4:	464e      	mov	r6, r9
 8001dc6:	4645      	mov	r5, r8
 8001dc8:	46de      	mov	lr, fp
 8001dca:	b5e0      	push	{r5, r6, r7, lr}
 8001dcc:	4698      	mov	r8, r3
 8001dce:	030c      	lsls	r4, r1, #12
 8001dd0:	004b      	lsls	r3, r1, #1
 8001dd2:	0006      	movs	r6, r0
 8001dd4:	4692      	mov	sl, r2
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	0d5b      	lsrs	r3, r3, #21
 8001ddc:	0fcf      	lsrs	r7, r1, #31
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d06c      	beq.n	8001ebc <__aeabi_dmul+0xfc>
 8001de2:	4add      	ldr	r2, [pc, #884]	; (8002158 <__aeabi_dmul+0x398>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d100      	bne.n	8001dea <__aeabi_dmul+0x2a>
 8001de8:	e086      	b.n	8001ef8 <__aeabi_dmul+0x138>
 8001dea:	0f42      	lsrs	r2, r0, #29
 8001dec:	00e4      	lsls	r4, r4, #3
 8001dee:	4314      	orrs	r4, r2
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0412      	lsls	r2, r2, #16
 8001df4:	4314      	orrs	r4, r2
 8001df6:	4ad9      	ldr	r2, [pc, #868]	; (800215c <__aeabi_dmul+0x39c>)
 8001df8:	00c5      	lsls	r5, r0, #3
 8001dfa:	4694      	mov	ip, r2
 8001dfc:	4463      	add	r3, ip
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	4699      	mov	r9, r3
 8001e04:	469b      	mov	fp, r3
 8001e06:	4643      	mov	r3, r8
 8001e08:	4642      	mov	r2, r8
 8001e0a:	031e      	lsls	r6, r3, #12
 8001e0c:	0fd2      	lsrs	r2, r2, #31
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4650      	mov	r0, sl
 8001e12:	4690      	mov	r8, r2
 8001e14:	0b36      	lsrs	r6, r6, #12
 8001e16:	0d5b      	lsrs	r3, r3, #21
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dmul+0x5c>
 8001e1a:	e078      	b.n	8001f0e <__aeabi_dmul+0x14e>
 8001e1c:	4ace      	ldr	r2, [pc, #824]	; (8002158 <__aeabi_dmul+0x398>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01d      	beq.n	8001e5e <__aeabi_dmul+0x9e>
 8001e22:	49ce      	ldr	r1, [pc, #824]	; (800215c <__aeabi_dmul+0x39c>)
 8001e24:	0f42      	lsrs	r2, r0, #29
 8001e26:	468c      	mov	ip, r1
 8001e28:	9900      	ldr	r1, [sp, #0]
 8001e2a:	4463      	add	r3, ip
 8001e2c:	00f6      	lsls	r6, r6, #3
 8001e2e:	468c      	mov	ip, r1
 8001e30:	4316      	orrs	r6, r2
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	449c      	add	ip, r3
 8001e36:	0412      	lsls	r2, r2, #16
 8001e38:	4663      	mov	r3, ip
 8001e3a:	4316      	orrs	r6, r2
 8001e3c:	00c2      	lsls	r2, r0, #3
 8001e3e:	2000      	movs	r0, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	9900      	ldr	r1, [sp, #0]
 8001e44:	4643      	mov	r3, r8
 8001e46:	3101      	adds	r1, #1
 8001e48:	468c      	mov	ip, r1
 8001e4a:	4649      	mov	r1, r9
 8001e4c:	407b      	eors	r3, r7
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	290f      	cmp	r1, #15
 8001e52:	d900      	bls.n	8001e56 <__aeabi_dmul+0x96>
 8001e54:	e07e      	b.n	8001f54 <__aeabi_dmul+0x194>
 8001e56:	4bc2      	ldr	r3, [pc, #776]	; (8002160 <__aeabi_dmul+0x3a0>)
 8001e58:	0089      	lsls	r1, r1, #2
 8001e5a:	5859      	ldr	r1, [r3, r1]
 8001e5c:	468f      	mov	pc, r1
 8001e5e:	4652      	mov	r2, sl
 8001e60:	9b00      	ldr	r3, [sp, #0]
 8001e62:	4332      	orrs	r2, r6
 8001e64:	d000      	beq.n	8001e68 <__aeabi_dmul+0xa8>
 8001e66:	e156      	b.n	8002116 <__aeabi_dmul+0x356>
 8001e68:	49bb      	ldr	r1, [pc, #748]	; (8002158 <__aeabi_dmul+0x398>)
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	468c      	mov	ip, r1
 8001e6e:	4463      	add	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2302      	movs	r3, #2
 8001e76:	4319      	orrs	r1, r3
 8001e78:	4689      	mov	r9, r1
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	e7e1      	b.n	8001e42 <__aeabi_dmul+0x82>
 8001e7e:	4643      	mov	r3, r8
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	0034      	movs	r4, r6
 8001e84:	0015      	movs	r5, r2
 8001e86:	4683      	mov	fp, r0
 8001e88:	465b      	mov	r3, fp
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d05e      	beq.n	8001f4c <__aeabi_dmul+0x18c>
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dmul+0xd4>
 8001e92:	e1f3      	b.n	800227c <__aeabi_dmul+0x4bc>
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dmul+0xda>
 8001e98:	e118      	b.n	80020cc <__aeabi_dmul+0x30c>
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2500      	movs	r5, #0
 8001ea0:	9b01      	ldr	r3, [sp, #4]
 8001ea2:	0512      	lsls	r2, r2, #20
 8001ea4:	4322      	orrs	r2, r4
 8001ea6:	07db      	lsls	r3, r3, #31
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	0028      	movs	r0, r5
 8001eac:	0011      	movs	r1, r2
 8001eae:	b007      	add	sp, #28
 8001eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8001eb2:	46bb      	mov	fp, r7
 8001eb4:	46b2      	mov	sl, r6
 8001eb6:	46a9      	mov	r9, r5
 8001eb8:	46a0      	mov	r8, r4
 8001eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ebc:	0025      	movs	r5, r4
 8001ebe:	4305      	orrs	r5, r0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dmul+0x104>
 8001ec2:	e141      	b.n	8002148 <__aeabi_dmul+0x388>
 8001ec4:	2c00      	cmp	r4, #0
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dmul+0x10a>
 8001ec8:	e1ad      	b.n	8002226 <__aeabi_dmul+0x466>
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f000 fef0 	bl	8002cb0 <__clzsi2>
 8001ed0:	0001      	movs	r1, r0
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	390b      	subs	r1, #11
 8001ed6:	231d      	movs	r3, #29
 8001ed8:	0010      	movs	r0, r2
 8001eda:	1a5b      	subs	r3, r3, r1
 8001edc:	0031      	movs	r1, r6
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3808      	subs	r0, #8
 8001ee2:	4084      	lsls	r4, r0
 8001ee4:	40d9      	lsrs	r1, r3
 8001ee6:	4085      	lsls	r5, r0
 8001ee8:	430c      	orrs	r4, r1
 8001eea:	489e      	ldr	r0, [pc, #632]	; (8002164 <__aeabi_dmul+0x3a4>)
 8001eec:	1a83      	subs	r3, r0, r2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	469b      	mov	fp, r3
 8001ef6:	e786      	b.n	8001e06 <__aeabi_dmul+0x46>
 8001ef8:	0005      	movs	r5, r0
 8001efa:	4325      	orrs	r5, r4
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dmul+0x140>
 8001efe:	e11c      	b.n	800213a <__aeabi_dmul+0x37a>
 8001f00:	2208      	movs	r2, #8
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2302      	movs	r3, #2
 8001f06:	2400      	movs	r4, #0
 8001f08:	4691      	mov	r9, r2
 8001f0a:	469b      	mov	fp, r3
 8001f0c:	e77b      	b.n	8001e06 <__aeabi_dmul+0x46>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	4332      	orrs	r2, r6
 8001f12:	d100      	bne.n	8001f16 <__aeabi_dmul+0x156>
 8001f14:	e10a      	b.n	800212c <__aeabi_dmul+0x36c>
 8001f16:	2e00      	cmp	r6, #0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dmul+0x15c>
 8001f1a:	e176      	b.n	800220a <__aeabi_dmul+0x44a>
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	f000 fec7 	bl	8002cb0 <__clzsi2>
 8001f22:	0002      	movs	r2, r0
 8001f24:	3a0b      	subs	r2, #11
 8001f26:	231d      	movs	r3, #29
 8001f28:	0001      	movs	r1, r0
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	3908      	subs	r1, #8
 8001f30:	40da      	lsrs	r2, r3
 8001f32:	408e      	lsls	r6, r1
 8001f34:	4316      	orrs	r6, r2
 8001f36:	4652      	mov	r2, sl
 8001f38:	408a      	lsls	r2, r1
 8001f3a:	9b00      	ldr	r3, [sp, #0]
 8001f3c:	4989      	ldr	r1, [pc, #548]	; (8002164 <__aeabi_dmul+0x3a4>)
 8001f3e:	1a18      	subs	r0, r3, r0
 8001f40:	0003      	movs	r3, r0
 8001f42:	468c      	mov	ip, r1
 8001f44:	4463      	add	r3, ip
 8001f46:	2000      	movs	r0, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	e77a      	b.n	8001e42 <__aeabi_dmul+0x82>
 8001f4c:	2400      	movs	r4, #0
 8001f4e:	2500      	movs	r5, #0
 8001f50:	4a81      	ldr	r2, [pc, #516]	; (8002158 <__aeabi_dmul+0x398>)
 8001f52:	e7a5      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 8001f54:	0c2f      	lsrs	r7, r5, #16
 8001f56:	042d      	lsls	r5, r5, #16
 8001f58:	0c2d      	lsrs	r5, r5, #16
 8001f5a:	002b      	movs	r3, r5
 8001f5c:	0c11      	lsrs	r1, r2, #16
 8001f5e:	0412      	lsls	r2, r2, #16
 8001f60:	0c12      	lsrs	r2, r2, #16
 8001f62:	4353      	muls	r3, r2
 8001f64:	4698      	mov	r8, r3
 8001f66:	0013      	movs	r3, r2
 8001f68:	0028      	movs	r0, r5
 8001f6a:	437b      	muls	r3, r7
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	4348      	muls	r0, r1
 8001f70:	4448      	add	r0, r9
 8001f72:	4683      	mov	fp, r0
 8001f74:	4640      	mov	r0, r8
 8001f76:	000b      	movs	r3, r1
 8001f78:	0c00      	lsrs	r0, r0, #16
 8001f7a:	4682      	mov	sl, r0
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	437b      	muls	r3, r7
 8001f80:	4450      	add	r0, sl
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	4581      	cmp	r9, r0
 8001f86:	d906      	bls.n	8001f96 <__aeabi_dmul+0x1d6>
 8001f88:	469a      	mov	sl, r3
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	4699      	mov	r9, r3
 8001f90:	44ca      	add	sl, r9
 8001f92:	4653      	mov	r3, sl
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	0c03      	lsrs	r3, r0, #16
 8001f98:	469b      	mov	fp, r3
 8001f9a:	4643      	mov	r3, r8
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	0400      	lsls	r0, r0, #16
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	4698      	mov	r8, r3
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	4443      	add	r3, r8
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	0c33      	lsrs	r3, r6, #16
 8001fac:	4699      	mov	r9, r3
 8001fae:	002b      	movs	r3, r5
 8001fb0:	0436      	lsls	r6, r6, #16
 8001fb2:	0c36      	lsrs	r6, r6, #16
 8001fb4:	4373      	muls	r3, r6
 8001fb6:	4698      	mov	r8, r3
 8001fb8:	0033      	movs	r3, r6
 8001fba:	437b      	muls	r3, r7
 8001fbc:	469a      	mov	sl, r3
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	435d      	muls	r5, r3
 8001fc2:	435f      	muls	r7, r3
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	4455      	add	r5, sl
 8001fc8:	0c18      	lsrs	r0, r3, #16
 8001fca:	1940      	adds	r0, r0, r5
 8001fcc:	4582      	cmp	sl, r0
 8001fce:	d903      	bls.n	8001fd8 <__aeabi_dmul+0x218>
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	025b      	lsls	r3, r3, #9
 8001fd4:	469a      	mov	sl, r3
 8001fd6:	4457      	add	r7, sl
 8001fd8:	0c05      	lsrs	r5, r0, #16
 8001fda:	19eb      	adds	r3, r5, r7
 8001fdc:	9305      	str	r3, [sp, #20]
 8001fde:	4643      	mov	r3, r8
 8001fe0:	041d      	lsls	r5, r3, #16
 8001fe2:	0c2d      	lsrs	r5, r5, #16
 8001fe4:	0400      	lsls	r0, r0, #16
 8001fe6:	1940      	adds	r0, r0, r5
 8001fe8:	0c25      	lsrs	r5, r4, #16
 8001fea:	0424      	lsls	r4, r4, #16
 8001fec:	0c24      	lsrs	r4, r4, #16
 8001fee:	0027      	movs	r7, r4
 8001ff0:	4357      	muls	r7, r2
 8001ff2:	436a      	muls	r2, r5
 8001ff4:	4690      	mov	r8, r2
 8001ff6:	002a      	movs	r2, r5
 8001ff8:	0c3b      	lsrs	r3, r7, #16
 8001ffa:	469a      	mov	sl, r3
 8001ffc:	434a      	muls	r2, r1
 8001ffe:	4361      	muls	r1, r4
 8002000:	4441      	add	r1, r8
 8002002:	4451      	add	r1, sl
 8002004:	4483      	add	fp, r0
 8002006:	4588      	cmp	r8, r1
 8002008:	d903      	bls.n	8002012 <__aeabi_dmul+0x252>
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	4698      	mov	r8, r3
 8002010:	4442      	add	r2, r8
 8002012:	043f      	lsls	r7, r7, #16
 8002014:	0c0b      	lsrs	r3, r1, #16
 8002016:	0c3f      	lsrs	r7, r7, #16
 8002018:	0409      	lsls	r1, r1, #16
 800201a:	19c9      	adds	r1, r1, r7
 800201c:	0027      	movs	r7, r4
 800201e:	4698      	mov	r8, r3
 8002020:	464b      	mov	r3, r9
 8002022:	4377      	muls	r7, r6
 8002024:	435c      	muls	r4, r3
 8002026:	436e      	muls	r6, r5
 8002028:	435d      	muls	r5, r3
 800202a:	0c3b      	lsrs	r3, r7, #16
 800202c:	4699      	mov	r9, r3
 800202e:	19a4      	adds	r4, r4, r6
 8002030:	444c      	add	r4, r9
 8002032:	4442      	add	r2, r8
 8002034:	9503      	str	r5, [sp, #12]
 8002036:	42a6      	cmp	r6, r4
 8002038:	d904      	bls.n	8002044 <__aeabi_dmul+0x284>
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	4698      	mov	r8, r3
 8002040:	4445      	add	r5, r8
 8002042:	9503      	str	r5, [sp, #12]
 8002044:	9b02      	ldr	r3, [sp, #8]
 8002046:	043f      	lsls	r7, r7, #16
 8002048:	445b      	add	r3, fp
 800204a:	001e      	movs	r6, r3
 800204c:	4283      	cmp	r3, r0
 800204e:	4180      	sbcs	r0, r0
 8002050:	0423      	lsls	r3, r4, #16
 8002052:	4698      	mov	r8, r3
 8002054:	9b05      	ldr	r3, [sp, #20]
 8002056:	0c3f      	lsrs	r7, r7, #16
 8002058:	4447      	add	r7, r8
 800205a:	4698      	mov	r8, r3
 800205c:	1876      	adds	r6, r6, r1
 800205e:	428e      	cmp	r6, r1
 8002060:	4189      	sbcs	r1, r1
 8002062:	4447      	add	r7, r8
 8002064:	4240      	negs	r0, r0
 8002066:	183d      	adds	r5, r7, r0
 8002068:	46a8      	mov	r8, r5
 800206a:	4693      	mov	fp, r2
 800206c:	4249      	negs	r1, r1
 800206e:	468a      	mov	sl, r1
 8002070:	44c3      	add	fp, r8
 8002072:	429f      	cmp	r7, r3
 8002074:	41bf      	sbcs	r7, r7
 8002076:	4580      	cmp	r8, r0
 8002078:	4180      	sbcs	r0, r0
 800207a:	9b03      	ldr	r3, [sp, #12]
 800207c:	44da      	add	sl, fp
 800207e:	4698      	mov	r8, r3
 8002080:	4653      	mov	r3, sl
 8002082:	4240      	negs	r0, r0
 8002084:	427f      	negs	r7, r7
 8002086:	4307      	orrs	r7, r0
 8002088:	0c24      	lsrs	r4, r4, #16
 800208a:	4593      	cmp	fp, r2
 800208c:	4192      	sbcs	r2, r2
 800208e:	458a      	cmp	sl, r1
 8002090:	4189      	sbcs	r1, r1
 8002092:	193f      	adds	r7, r7, r4
 8002094:	0ddc      	lsrs	r4, r3, #23
 8002096:	9b04      	ldr	r3, [sp, #16]
 8002098:	0275      	lsls	r5, r6, #9
 800209a:	431d      	orrs	r5, r3
 800209c:	1e68      	subs	r0, r5, #1
 800209e:	4185      	sbcs	r5, r0
 80020a0:	4653      	mov	r3, sl
 80020a2:	4252      	negs	r2, r2
 80020a4:	4249      	negs	r1, r1
 80020a6:	430a      	orrs	r2, r1
 80020a8:	18bf      	adds	r7, r7, r2
 80020aa:	4447      	add	r7, r8
 80020ac:	0df6      	lsrs	r6, r6, #23
 80020ae:	027f      	lsls	r7, r7, #9
 80020b0:	4335      	orrs	r5, r6
 80020b2:	025a      	lsls	r2, r3, #9
 80020b4:	433c      	orrs	r4, r7
 80020b6:	4315      	orrs	r5, r2
 80020b8:	01fb      	lsls	r3, r7, #7
 80020ba:	d400      	bmi.n	80020be <__aeabi_dmul+0x2fe>
 80020bc:	e0c1      	b.n	8002242 <__aeabi_dmul+0x482>
 80020be:	2101      	movs	r1, #1
 80020c0:	086a      	lsrs	r2, r5, #1
 80020c2:	400d      	ands	r5, r1
 80020c4:	4315      	orrs	r5, r2
 80020c6:	07e2      	lsls	r2, r4, #31
 80020c8:	4315      	orrs	r5, r2
 80020ca:	0864      	lsrs	r4, r4, #1
 80020cc:	4926      	ldr	r1, [pc, #152]	; (8002168 <__aeabi_dmul+0x3a8>)
 80020ce:	4461      	add	r1, ip
 80020d0:	2900      	cmp	r1, #0
 80020d2:	dd56      	ble.n	8002182 <__aeabi_dmul+0x3c2>
 80020d4:	076b      	lsls	r3, r5, #29
 80020d6:	d009      	beq.n	80020ec <__aeabi_dmul+0x32c>
 80020d8:	220f      	movs	r2, #15
 80020da:	402a      	ands	r2, r5
 80020dc:	2a04      	cmp	r2, #4
 80020de:	d005      	beq.n	80020ec <__aeabi_dmul+0x32c>
 80020e0:	1d2a      	adds	r2, r5, #4
 80020e2:	42aa      	cmp	r2, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426d      	negs	r5, r5
 80020e8:	1964      	adds	r4, r4, r5
 80020ea:	0015      	movs	r5, r2
 80020ec:	01e3      	lsls	r3, r4, #7
 80020ee:	d504      	bpl.n	80020fa <__aeabi_dmul+0x33a>
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <__aeabi_dmul+0x3ac>)
 80020f4:	00c9      	lsls	r1, r1, #3
 80020f6:	4014      	ands	r4, r2
 80020f8:	4461      	add	r1, ip
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <__aeabi_dmul+0x3b0>)
 80020fc:	4291      	cmp	r1, r2
 80020fe:	dd00      	ble.n	8002102 <__aeabi_dmul+0x342>
 8002100:	e724      	b.n	8001f4c <__aeabi_dmul+0x18c>
 8002102:	0762      	lsls	r2, r4, #29
 8002104:	08ed      	lsrs	r5, r5, #3
 8002106:	0264      	lsls	r4, r4, #9
 8002108:	0549      	lsls	r1, r1, #21
 800210a:	4315      	orrs	r5, r2
 800210c:	0b24      	lsrs	r4, r4, #12
 800210e:	0d4a      	lsrs	r2, r1, #21
 8002110:	e6c6      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 8002112:	9701      	str	r7, [sp, #4]
 8002114:	e6b8      	b.n	8001e88 <__aeabi_dmul+0xc8>
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <__aeabi_dmul+0x398>)
 8002118:	2003      	movs	r0, #3
 800211a:	4694      	mov	ip, r2
 800211c:	4463      	add	r3, ip
 800211e:	464a      	mov	r2, r9
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2303      	movs	r3, #3
 8002124:	431a      	orrs	r2, r3
 8002126:	4691      	mov	r9, r2
 8002128:	4652      	mov	r2, sl
 800212a:	e68a      	b.n	8001e42 <__aeabi_dmul+0x82>
 800212c:	4649      	mov	r1, r9
 800212e:	2301      	movs	r3, #1
 8002130:	4319      	orrs	r1, r3
 8002132:	4689      	mov	r9, r1
 8002134:	2600      	movs	r6, #0
 8002136:	2001      	movs	r0, #1
 8002138:	e683      	b.n	8001e42 <__aeabi_dmul+0x82>
 800213a:	220c      	movs	r2, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2303      	movs	r3, #3
 8002140:	0005      	movs	r5, r0
 8002142:	4691      	mov	r9, r2
 8002144:	469b      	mov	fp, r3
 8002146:	e65e      	b.n	8001e06 <__aeabi_dmul+0x46>
 8002148:	2304      	movs	r3, #4
 800214a:	4699      	mov	r9, r3
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	2400      	movs	r4, #0
 8002154:	469b      	mov	fp, r3
 8002156:	e656      	b.n	8001e06 <__aeabi_dmul+0x46>
 8002158:	000007ff 	.word	0x000007ff
 800215c:	fffffc01 	.word	0xfffffc01
 8002160:	0800a31c 	.word	0x0800a31c
 8002164:	fffffc0d 	.word	0xfffffc0d
 8002168:	000003ff 	.word	0x000003ff
 800216c:	feffffff 	.word	0xfeffffff
 8002170:	000007fe 	.word	0x000007fe
 8002174:	2300      	movs	r3, #0
 8002176:	2480      	movs	r4, #128	; 0x80
 8002178:	2500      	movs	r5, #0
 800217a:	4a44      	ldr	r2, [pc, #272]	; (800228c <__aeabi_dmul+0x4cc>)
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	e68e      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 8002182:	2001      	movs	r0, #1
 8002184:	1a40      	subs	r0, r0, r1
 8002186:	2838      	cmp	r0, #56	; 0x38
 8002188:	dd00      	ble.n	800218c <__aeabi_dmul+0x3cc>
 800218a:	e686      	b.n	8001e9a <__aeabi_dmul+0xda>
 800218c:	281f      	cmp	r0, #31
 800218e:	dd5b      	ble.n	8002248 <__aeabi_dmul+0x488>
 8002190:	221f      	movs	r2, #31
 8002192:	0023      	movs	r3, r4
 8002194:	4252      	negs	r2, r2
 8002196:	1a51      	subs	r1, r2, r1
 8002198:	40cb      	lsrs	r3, r1
 800219a:	0019      	movs	r1, r3
 800219c:	2820      	cmp	r0, #32
 800219e:	d003      	beq.n	80021a8 <__aeabi_dmul+0x3e8>
 80021a0:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <__aeabi_dmul+0x4d0>)
 80021a2:	4462      	add	r2, ip
 80021a4:	4094      	lsls	r4, r2
 80021a6:	4325      	orrs	r5, r4
 80021a8:	1e6a      	subs	r2, r5, #1
 80021aa:	4195      	sbcs	r5, r2
 80021ac:	002a      	movs	r2, r5
 80021ae:	430a      	orrs	r2, r1
 80021b0:	2107      	movs	r1, #7
 80021b2:	000d      	movs	r5, r1
 80021b4:	2400      	movs	r4, #0
 80021b6:	4015      	ands	r5, r2
 80021b8:	4211      	tst	r1, r2
 80021ba:	d05b      	beq.n	8002274 <__aeabi_dmul+0x4b4>
 80021bc:	210f      	movs	r1, #15
 80021be:	2400      	movs	r4, #0
 80021c0:	4011      	ands	r1, r2
 80021c2:	2904      	cmp	r1, #4
 80021c4:	d053      	beq.n	800226e <__aeabi_dmul+0x4ae>
 80021c6:	1d11      	adds	r1, r2, #4
 80021c8:	4291      	cmp	r1, r2
 80021ca:	4192      	sbcs	r2, r2
 80021cc:	4252      	negs	r2, r2
 80021ce:	18a4      	adds	r4, r4, r2
 80021d0:	000a      	movs	r2, r1
 80021d2:	0223      	lsls	r3, r4, #8
 80021d4:	d54b      	bpl.n	800226e <__aeabi_dmul+0x4ae>
 80021d6:	2201      	movs	r2, #1
 80021d8:	2400      	movs	r4, #0
 80021da:	2500      	movs	r5, #0
 80021dc:	e660      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	031b      	lsls	r3, r3, #12
 80021e2:	421c      	tst	r4, r3
 80021e4:	d009      	beq.n	80021fa <__aeabi_dmul+0x43a>
 80021e6:	421e      	tst	r6, r3
 80021e8:	d107      	bne.n	80021fa <__aeabi_dmul+0x43a>
 80021ea:	4333      	orrs	r3, r6
 80021ec:	031c      	lsls	r4, r3, #12
 80021ee:	4643      	mov	r3, r8
 80021f0:	0015      	movs	r5, r2
 80021f2:	0b24      	lsrs	r4, r4, #12
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <__aeabi_dmul+0x4cc>)
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	e652      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	0312      	lsls	r2, r2, #12
 80021fe:	4314      	orrs	r4, r2
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4a22      	ldr	r2, [pc, #136]	; (800228c <__aeabi_dmul+0x4cc>)
 8002204:	0b24      	lsrs	r4, r4, #12
 8002206:	9701      	str	r7, [sp, #4]
 8002208:	e64a      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 800220a:	f000 fd51 	bl	8002cb0 <__clzsi2>
 800220e:	0003      	movs	r3, r0
 8002210:	001a      	movs	r2, r3
 8002212:	3215      	adds	r2, #21
 8002214:	3020      	adds	r0, #32
 8002216:	2a1c      	cmp	r2, #28
 8002218:	dc00      	bgt.n	800221c <__aeabi_dmul+0x45c>
 800221a:	e684      	b.n	8001f26 <__aeabi_dmul+0x166>
 800221c:	4656      	mov	r6, sl
 800221e:	3b08      	subs	r3, #8
 8002220:	2200      	movs	r2, #0
 8002222:	409e      	lsls	r6, r3
 8002224:	e689      	b.n	8001f3a <__aeabi_dmul+0x17a>
 8002226:	f000 fd43 	bl	8002cb0 <__clzsi2>
 800222a:	0001      	movs	r1, r0
 800222c:	0002      	movs	r2, r0
 800222e:	3115      	adds	r1, #21
 8002230:	3220      	adds	r2, #32
 8002232:	291c      	cmp	r1, #28
 8002234:	dc00      	bgt.n	8002238 <__aeabi_dmul+0x478>
 8002236:	e64e      	b.n	8001ed6 <__aeabi_dmul+0x116>
 8002238:	0034      	movs	r4, r6
 800223a:	3808      	subs	r0, #8
 800223c:	2500      	movs	r5, #0
 800223e:	4084      	lsls	r4, r0
 8002240:	e653      	b.n	8001eea <__aeabi_dmul+0x12a>
 8002242:	9b00      	ldr	r3, [sp, #0]
 8002244:	469c      	mov	ip, r3
 8002246:	e741      	b.n	80020cc <__aeabi_dmul+0x30c>
 8002248:	4912      	ldr	r1, [pc, #72]	; (8002294 <__aeabi_dmul+0x4d4>)
 800224a:	0022      	movs	r2, r4
 800224c:	4461      	add	r1, ip
 800224e:	002e      	movs	r6, r5
 8002250:	408d      	lsls	r5, r1
 8002252:	408a      	lsls	r2, r1
 8002254:	40c6      	lsrs	r6, r0
 8002256:	1e69      	subs	r1, r5, #1
 8002258:	418d      	sbcs	r5, r1
 800225a:	4332      	orrs	r2, r6
 800225c:	432a      	orrs	r2, r5
 800225e:	40c4      	lsrs	r4, r0
 8002260:	0753      	lsls	r3, r2, #29
 8002262:	d0b6      	beq.n	80021d2 <__aeabi_dmul+0x412>
 8002264:	210f      	movs	r1, #15
 8002266:	4011      	ands	r1, r2
 8002268:	2904      	cmp	r1, #4
 800226a:	d1ac      	bne.n	80021c6 <__aeabi_dmul+0x406>
 800226c:	e7b1      	b.n	80021d2 <__aeabi_dmul+0x412>
 800226e:	0765      	lsls	r5, r4, #29
 8002270:	0264      	lsls	r4, r4, #9
 8002272:	0b24      	lsrs	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4315      	orrs	r5, r2
 8002278:	2200      	movs	r2, #0
 800227a:	e611      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	0312      	lsls	r2, r2, #12
 8002280:	4314      	orrs	r4, r2
 8002282:	0324      	lsls	r4, r4, #12
 8002284:	4a01      	ldr	r2, [pc, #4]	; (800228c <__aeabi_dmul+0x4cc>)
 8002286:	0b24      	lsrs	r4, r4, #12
 8002288:	e60a      	b.n	8001ea0 <__aeabi_dmul+0xe0>
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	000007ff 	.word	0x000007ff
 8002290:	0000043e 	.word	0x0000043e
 8002294:	0000041e 	.word	0x0000041e

08002298 <__aeabi_dsub>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	4657      	mov	r7, sl
 800229c:	464e      	mov	r6, r9
 800229e:	4645      	mov	r5, r8
 80022a0:	46de      	mov	lr, fp
 80022a2:	0004      	movs	r4, r0
 80022a4:	b5e0      	push	{r5, r6, r7, lr}
 80022a6:	001f      	movs	r7, r3
 80022a8:	0010      	movs	r0, r2
 80022aa:	030b      	lsls	r3, r1, #12
 80022ac:	0f62      	lsrs	r2, r4, #29
 80022ae:	004e      	lsls	r6, r1, #1
 80022b0:	0fcd      	lsrs	r5, r1, #31
 80022b2:	0a5b      	lsrs	r3, r3, #9
 80022b4:	0339      	lsls	r1, r7, #12
 80022b6:	4313      	orrs	r3, r2
 80022b8:	0a49      	lsrs	r1, r1, #9
 80022ba:	00e2      	lsls	r2, r4, #3
 80022bc:	0f44      	lsrs	r4, r0, #29
 80022be:	4321      	orrs	r1, r4
 80022c0:	4cc2      	ldr	r4, [pc, #776]	; (80025cc <__aeabi_dsub+0x334>)
 80022c2:	4691      	mov	r9, r2
 80022c4:	4692      	mov	sl, r2
 80022c6:	00c0      	lsls	r0, r0, #3
 80022c8:	007a      	lsls	r2, r7, #1
 80022ca:	4680      	mov	r8, r0
 80022cc:	0d76      	lsrs	r6, r6, #21
 80022ce:	0d52      	lsrs	r2, r2, #21
 80022d0:	0fff      	lsrs	r7, r7, #31
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x40>
 80022d6:	e0b4      	b.n	8002442 <__aeabi_dsub+0x1aa>
 80022d8:	2401      	movs	r4, #1
 80022da:	4067      	eors	r7, r4
 80022dc:	46bb      	mov	fp, r7
 80022de:	42bd      	cmp	r5, r7
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x4c>
 80022e2:	e088      	b.n	80023f6 <__aeabi_dsub+0x15e>
 80022e4:	1ab4      	subs	r4, r6, r2
 80022e6:	46a4      	mov	ip, r4
 80022e8:	2c00      	cmp	r4, #0
 80022ea:	dc00      	bgt.n	80022ee <__aeabi_dsub+0x56>
 80022ec:	e0b2      	b.n	8002454 <__aeabi_dsub+0x1bc>
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x5c>
 80022f2:	e0c5      	b.n	8002480 <__aeabi_dsub+0x1e8>
 80022f4:	4ab5      	ldr	r2, [pc, #724]	; (80025cc <__aeabi_dsub+0x334>)
 80022f6:	4296      	cmp	r6, r2
 80022f8:	d100      	bne.n	80022fc <__aeabi_dsub+0x64>
 80022fa:	e28b      	b.n	8002814 <__aeabi_dsub+0x57c>
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	0412      	lsls	r2, r2, #16
 8002300:	4311      	orrs	r1, r2
 8002302:	4662      	mov	r2, ip
 8002304:	2a38      	cmp	r2, #56	; 0x38
 8002306:	dd00      	ble.n	800230a <__aeabi_dsub+0x72>
 8002308:	e1a1      	b.n	800264e <__aeabi_dsub+0x3b6>
 800230a:	2a1f      	cmp	r2, #31
 800230c:	dd00      	ble.n	8002310 <__aeabi_dsub+0x78>
 800230e:	e216      	b.n	800273e <__aeabi_dsub+0x4a6>
 8002310:	2720      	movs	r7, #32
 8002312:	000c      	movs	r4, r1
 8002314:	1abf      	subs	r7, r7, r2
 8002316:	40bc      	lsls	r4, r7
 8002318:	0002      	movs	r2, r0
 800231a:	46a0      	mov	r8, r4
 800231c:	4664      	mov	r4, ip
 800231e:	40b8      	lsls	r0, r7
 8002320:	40e2      	lsrs	r2, r4
 8002322:	4644      	mov	r4, r8
 8002324:	4314      	orrs	r4, r2
 8002326:	0002      	movs	r2, r0
 8002328:	1e50      	subs	r0, r2, #1
 800232a:	4182      	sbcs	r2, r0
 800232c:	4660      	mov	r0, ip
 800232e:	40c1      	lsrs	r1, r0
 8002330:	4322      	orrs	r2, r4
 8002332:	1a5b      	subs	r3, r3, r1
 8002334:	4649      	mov	r1, r9
 8002336:	1a8c      	subs	r4, r1, r2
 8002338:	45a1      	cmp	r9, r4
 800233a:	4192      	sbcs	r2, r2
 800233c:	4252      	negs	r2, r2
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	4698      	mov	r8, r3
 8002342:	4643      	mov	r3, r8
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	d400      	bmi.n	800234a <__aeabi_dsub+0xb2>
 8002348:	e117      	b.n	800257a <__aeabi_dsub+0x2e2>
 800234a:	4643      	mov	r3, r8
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	4698      	mov	r8, r3
 8002352:	4643      	mov	r3, r8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0xc2>
 8002358:	e16c      	b.n	8002634 <__aeabi_dsub+0x39c>
 800235a:	4640      	mov	r0, r8
 800235c:	f000 fca8 	bl	8002cb0 <__clzsi2>
 8002360:	0002      	movs	r2, r0
 8002362:	3a08      	subs	r2, #8
 8002364:	2120      	movs	r1, #32
 8002366:	0020      	movs	r0, r4
 8002368:	4643      	mov	r3, r8
 800236a:	1a89      	subs	r1, r1, r2
 800236c:	4093      	lsls	r3, r2
 800236e:	40c8      	lsrs	r0, r1
 8002370:	4094      	lsls	r4, r2
 8002372:	4303      	orrs	r3, r0
 8002374:	4296      	cmp	r6, r2
 8002376:	dd00      	ble.n	800237a <__aeabi_dsub+0xe2>
 8002378:	e157      	b.n	800262a <__aeabi_dsub+0x392>
 800237a:	1b96      	subs	r6, r2, r6
 800237c:	1c71      	adds	r1, r6, #1
 800237e:	291f      	cmp	r1, #31
 8002380:	dd00      	ble.n	8002384 <__aeabi_dsub+0xec>
 8002382:	e1cb      	b.n	800271c <__aeabi_dsub+0x484>
 8002384:	2220      	movs	r2, #32
 8002386:	0018      	movs	r0, r3
 8002388:	0026      	movs	r6, r4
 800238a:	1a52      	subs	r2, r2, r1
 800238c:	4094      	lsls	r4, r2
 800238e:	4090      	lsls	r0, r2
 8002390:	40ce      	lsrs	r6, r1
 8002392:	40cb      	lsrs	r3, r1
 8002394:	1e62      	subs	r2, r4, #1
 8002396:	4194      	sbcs	r4, r2
 8002398:	4330      	orrs	r0, r6
 800239a:	4698      	mov	r8, r3
 800239c:	2600      	movs	r6, #0
 800239e:	4304      	orrs	r4, r0
 80023a0:	0763      	lsls	r3, r4, #29
 80023a2:	d009      	beq.n	80023b8 <__aeabi_dsub+0x120>
 80023a4:	230f      	movs	r3, #15
 80023a6:	4023      	ands	r3, r4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d005      	beq.n	80023b8 <__aeabi_dsub+0x120>
 80023ac:	1d23      	adds	r3, r4, #4
 80023ae:	42a3      	cmp	r3, r4
 80023b0:	41a4      	sbcs	r4, r4
 80023b2:	4264      	negs	r4, r4
 80023b4:	44a0      	add	r8, r4
 80023b6:	001c      	movs	r4, r3
 80023b8:	4643      	mov	r3, r8
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	d400      	bmi.n	80023c0 <__aeabi_dsub+0x128>
 80023be:	e0df      	b.n	8002580 <__aeabi_dsub+0x2e8>
 80023c0:	4b82      	ldr	r3, [pc, #520]	; (80025cc <__aeabi_dsub+0x334>)
 80023c2:	3601      	adds	r6, #1
 80023c4:	429e      	cmp	r6, r3
 80023c6:	d100      	bne.n	80023ca <__aeabi_dsub+0x132>
 80023c8:	e0fb      	b.n	80025c2 <__aeabi_dsub+0x32a>
 80023ca:	4642      	mov	r2, r8
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <__aeabi_dsub+0x338>)
 80023ce:	08e4      	lsrs	r4, r4, #3
 80023d0:	401a      	ands	r2, r3
 80023d2:	0013      	movs	r3, r2
 80023d4:	0571      	lsls	r1, r6, #21
 80023d6:	0752      	lsls	r2, r2, #29
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	4322      	orrs	r2, r4
 80023dc:	0b1b      	lsrs	r3, r3, #12
 80023de:	0d49      	lsrs	r1, r1, #21
 80023e0:	0509      	lsls	r1, r1, #20
 80023e2:	07ed      	lsls	r5, r5, #31
 80023e4:	4319      	orrs	r1, r3
 80023e6:	4329      	orrs	r1, r5
 80023e8:	0010      	movs	r0, r2
 80023ea:	bcf0      	pop	{r4, r5, r6, r7}
 80023ec:	46bb      	mov	fp, r7
 80023ee:	46b2      	mov	sl, r6
 80023f0:	46a9      	mov	r9, r5
 80023f2:	46a0      	mov	r8, r4
 80023f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023f6:	1ab4      	subs	r4, r6, r2
 80023f8:	46a4      	mov	ip, r4
 80023fa:	2c00      	cmp	r4, #0
 80023fc:	dd58      	ble.n	80024b0 <__aeabi_dsub+0x218>
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x16c>
 8002402:	e09e      	b.n	8002542 <__aeabi_dsub+0x2aa>
 8002404:	4a71      	ldr	r2, [pc, #452]	; (80025cc <__aeabi_dsub+0x334>)
 8002406:	4296      	cmp	r6, r2
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x174>
 800240a:	e13b      	b.n	8002684 <__aeabi_dsub+0x3ec>
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	0412      	lsls	r2, r2, #16
 8002410:	4311      	orrs	r1, r2
 8002412:	4662      	mov	r2, ip
 8002414:	2a38      	cmp	r2, #56	; 0x38
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0x182>
 8002418:	e0c1      	b.n	800259e <__aeabi_dsub+0x306>
 800241a:	2a1f      	cmp	r2, #31
 800241c:	dc00      	bgt.n	8002420 <__aeabi_dsub+0x188>
 800241e:	e1bb      	b.n	8002798 <__aeabi_dsub+0x500>
 8002420:	000c      	movs	r4, r1
 8002422:	3a20      	subs	r2, #32
 8002424:	40d4      	lsrs	r4, r2
 8002426:	0022      	movs	r2, r4
 8002428:	4664      	mov	r4, ip
 800242a:	2c20      	cmp	r4, #32
 800242c:	d004      	beq.n	8002438 <__aeabi_dsub+0x1a0>
 800242e:	2740      	movs	r7, #64	; 0x40
 8002430:	1b3f      	subs	r7, r7, r4
 8002432:	40b9      	lsls	r1, r7
 8002434:	4308      	orrs	r0, r1
 8002436:	4680      	mov	r8, r0
 8002438:	4644      	mov	r4, r8
 800243a:	1e61      	subs	r1, r4, #1
 800243c:	418c      	sbcs	r4, r1
 800243e:	4314      	orrs	r4, r2
 8002440:	e0b1      	b.n	80025a6 <__aeabi_dsub+0x30e>
 8002442:	000c      	movs	r4, r1
 8002444:	4304      	orrs	r4, r0
 8002446:	d02a      	beq.n	800249e <__aeabi_dsub+0x206>
 8002448:	46bb      	mov	fp, r7
 800244a:	42bd      	cmp	r5, r7
 800244c:	d02d      	beq.n	80024aa <__aeabi_dsub+0x212>
 800244e:	4c61      	ldr	r4, [pc, #388]	; (80025d4 <__aeabi_dsub+0x33c>)
 8002450:	46a4      	mov	ip, r4
 8002452:	44b4      	add	ip, r6
 8002454:	4664      	mov	r4, ip
 8002456:	2c00      	cmp	r4, #0
 8002458:	d05c      	beq.n	8002514 <__aeabi_dsub+0x27c>
 800245a:	1b94      	subs	r4, r2, r6
 800245c:	46a4      	mov	ip, r4
 800245e:	2e00      	cmp	r6, #0
 8002460:	d000      	beq.n	8002464 <__aeabi_dsub+0x1cc>
 8002462:	e115      	b.n	8002690 <__aeabi_dsub+0x3f8>
 8002464:	464d      	mov	r5, r9
 8002466:	431d      	orrs	r5, r3
 8002468:	d100      	bne.n	800246c <__aeabi_dsub+0x1d4>
 800246a:	e1c3      	b.n	80027f4 <__aeabi_dsub+0x55c>
 800246c:	1e65      	subs	r5, r4, #1
 800246e:	2c01      	cmp	r4, #1
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x1dc>
 8002472:	e20c      	b.n	800288e <__aeabi_dsub+0x5f6>
 8002474:	4e55      	ldr	r6, [pc, #340]	; (80025cc <__aeabi_dsub+0x334>)
 8002476:	42b4      	cmp	r4, r6
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x1e4>
 800247a:	e1f8      	b.n	800286e <__aeabi_dsub+0x5d6>
 800247c:	46ac      	mov	ip, r5
 800247e:	e10e      	b.n	800269e <__aeabi_dsub+0x406>
 8002480:	000a      	movs	r2, r1
 8002482:	4302      	orrs	r2, r0
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x1f0>
 8002486:	e136      	b.n	80026f6 <__aeabi_dsub+0x45e>
 8002488:	0022      	movs	r2, r4
 800248a:	3a01      	subs	r2, #1
 800248c:	2c01      	cmp	r4, #1
 800248e:	d100      	bne.n	8002492 <__aeabi_dsub+0x1fa>
 8002490:	e1c6      	b.n	8002820 <__aeabi_dsub+0x588>
 8002492:	4c4e      	ldr	r4, [pc, #312]	; (80025cc <__aeabi_dsub+0x334>)
 8002494:	45a4      	cmp	ip, r4
 8002496:	d100      	bne.n	800249a <__aeabi_dsub+0x202>
 8002498:	e0f4      	b.n	8002684 <__aeabi_dsub+0x3ec>
 800249a:	4694      	mov	ip, r2
 800249c:	e731      	b.n	8002302 <__aeabi_dsub+0x6a>
 800249e:	2401      	movs	r4, #1
 80024a0:	4067      	eors	r7, r4
 80024a2:	46bb      	mov	fp, r7
 80024a4:	42bd      	cmp	r5, r7
 80024a6:	d000      	beq.n	80024aa <__aeabi_dsub+0x212>
 80024a8:	e71c      	b.n	80022e4 <__aeabi_dsub+0x4c>
 80024aa:	4c4a      	ldr	r4, [pc, #296]	; (80025d4 <__aeabi_dsub+0x33c>)
 80024ac:	46a4      	mov	ip, r4
 80024ae:	44b4      	add	ip, r6
 80024b0:	4664      	mov	r4, ip
 80024b2:	2c00      	cmp	r4, #0
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dsub+0x220>
 80024b6:	e0cf      	b.n	8002658 <__aeabi_dsub+0x3c0>
 80024b8:	1b94      	subs	r4, r2, r6
 80024ba:	46a4      	mov	ip, r4
 80024bc:	2e00      	cmp	r6, #0
 80024be:	d100      	bne.n	80024c2 <__aeabi_dsub+0x22a>
 80024c0:	e15c      	b.n	800277c <__aeabi_dsub+0x4e4>
 80024c2:	4e42      	ldr	r6, [pc, #264]	; (80025cc <__aeabi_dsub+0x334>)
 80024c4:	42b2      	cmp	r2, r6
 80024c6:	d100      	bne.n	80024ca <__aeabi_dsub+0x232>
 80024c8:	e1ec      	b.n	80028a4 <__aeabi_dsub+0x60c>
 80024ca:	2680      	movs	r6, #128	; 0x80
 80024cc:	0436      	lsls	r6, r6, #16
 80024ce:	4333      	orrs	r3, r6
 80024d0:	4664      	mov	r4, ip
 80024d2:	2c38      	cmp	r4, #56	; 0x38
 80024d4:	dd00      	ble.n	80024d8 <__aeabi_dsub+0x240>
 80024d6:	e1b3      	b.n	8002840 <__aeabi_dsub+0x5a8>
 80024d8:	2c1f      	cmp	r4, #31
 80024da:	dd00      	ble.n	80024de <__aeabi_dsub+0x246>
 80024dc:	e238      	b.n	8002950 <__aeabi_dsub+0x6b8>
 80024de:	2620      	movs	r6, #32
 80024e0:	1b36      	subs	r6, r6, r4
 80024e2:	001c      	movs	r4, r3
 80024e4:	40b4      	lsls	r4, r6
 80024e6:	464f      	mov	r7, r9
 80024e8:	46a0      	mov	r8, r4
 80024ea:	4664      	mov	r4, ip
 80024ec:	40e7      	lsrs	r7, r4
 80024ee:	4644      	mov	r4, r8
 80024f0:	433c      	orrs	r4, r7
 80024f2:	464f      	mov	r7, r9
 80024f4:	40b7      	lsls	r7, r6
 80024f6:	003e      	movs	r6, r7
 80024f8:	1e77      	subs	r7, r6, #1
 80024fa:	41be      	sbcs	r6, r7
 80024fc:	4334      	orrs	r4, r6
 80024fe:	4666      	mov	r6, ip
 8002500:	40f3      	lsrs	r3, r6
 8002502:	18c9      	adds	r1, r1, r3
 8002504:	1824      	adds	r4, r4, r0
 8002506:	4284      	cmp	r4, r0
 8002508:	419b      	sbcs	r3, r3
 800250a:	425b      	negs	r3, r3
 800250c:	4698      	mov	r8, r3
 800250e:	0016      	movs	r6, r2
 8002510:	4488      	add	r8, r1
 8002512:	e04e      	b.n	80025b2 <__aeabi_dsub+0x31a>
 8002514:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <__aeabi_dsub+0x340>)
 8002516:	1c74      	adds	r4, r6, #1
 8002518:	4214      	tst	r4, r2
 800251a:	d000      	beq.n	800251e <__aeabi_dsub+0x286>
 800251c:	e0d6      	b.n	80026cc <__aeabi_dsub+0x434>
 800251e:	464a      	mov	r2, r9
 8002520:	431a      	orrs	r2, r3
 8002522:	2e00      	cmp	r6, #0
 8002524:	d000      	beq.n	8002528 <__aeabi_dsub+0x290>
 8002526:	e15b      	b.n	80027e0 <__aeabi_dsub+0x548>
 8002528:	2a00      	cmp	r2, #0
 800252a:	d100      	bne.n	800252e <__aeabi_dsub+0x296>
 800252c:	e1a5      	b.n	800287a <__aeabi_dsub+0x5e2>
 800252e:	000a      	movs	r2, r1
 8002530:	4302      	orrs	r2, r0
 8002532:	d000      	beq.n	8002536 <__aeabi_dsub+0x29e>
 8002534:	e1bb      	b.n	80028ae <__aeabi_dsub+0x616>
 8002536:	464a      	mov	r2, r9
 8002538:	0759      	lsls	r1, r3, #29
 800253a:	08d2      	lsrs	r2, r2, #3
 800253c:	430a      	orrs	r2, r1
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	e027      	b.n	8002592 <__aeabi_dsub+0x2fa>
 8002542:	000a      	movs	r2, r1
 8002544:	4302      	orrs	r2, r0
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x2b2>
 8002548:	e174      	b.n	8002834 <__aeabi_dsub+0x59c>
 800254a:	0022      	movs	r2, r4
 800254c:	3a01      	subs	r2, #1
 800254e:	2c01      	cmp	r4, #1
 8002550:	d005      	beq.n	800255e <__aeabi_dsub+0x2c6>
 8002552:	4c1e      	ldr	r4, [pc, #120]	; (80025cc <__aeabi_dsub+0x334>)
 8002554:	45a4      	cmp	ip, r4
 8002556:	d100      	bne.n	800255a <__aeabi_dsub+0x2c2>
 8002558:	e094      	b.n	8002684 <__aeabi_dsub+0x3ec>
 800255a:	4694      	mov	ip, r2
 800255c:	e759      	b.n	8002412 <__aeabi_dsub+0x17a>
 800255e:	4448      	add	r0, r9
 8002560:	4548      	cmp	r0, r9
 8002562:	4192      	sbcs	r2, r2
 8002564:	185b      	adds	r3, r3, r1
 8002566:	4698      	mov	r8, r3
 8002568:	0004      	movs	r4, r0
 800256a:	4252      	negs	r2, r2
 800256c:	4490      	add	r8, r2
 800256e:	4643      	mov	r3, r8
 8002570:	2602      	movs	r6, #2
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	d500      	bpl.n	8002578 <__aeabi_dsub+0x2e0>
 8002576:	e0c4      	b.n	8002702 <__aeabi_dsub+0x46a>
 8002578:	3e01      	subs	r6, #1
 800257a:	0763      	lsls	r3, r4, #29
 800257c:	d000      	beq.n	8002580 <__aeabi_dsub+0x2e8>
 800257e:	e711      	b.n	80023a4 <__aeabi_dsub+0x10c>
 8002580:	4643      	mov	r3, r8
 8002582:	46b4      	mov	ip, r6
 8002584:	0759      	lsls	r1, r3, #29
 8002586:	08e2      	lsrs	r2, r4, #3
 8002588:	430a      	orrs	r2, r1
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	490f      	ldr	r1, [pc, #60]	; (80025cc <__aeabi_dsub+0x334>)
 800258e:	458c      	cmp	ip, r1
 8002590:	d040      	beq.n	8002614 <__aeabi_dsub+0x37c>
 8002592:	4661      	mov	r1, ip
 8002594:	031b      	lsls	r3, r3, #12
 8002596:	0549      	lsls	r1, r1, #21
 8002598:	0b1b      	lsrs	r3, r3, #12
 800259a:	0d49      	lsrs	r1, r1, #21
 800259c:	e720      	b.n	80023e0 <__aeabi_dsub+0x148>
 800259e:	4301      	orrs	r1, r0
 80025a0:	000c      	movs	r4, r1
 80025a2:	1e61      	subs	r1, r4, #1
 80025a4:	418c      	sbcs	r4, r1
 80025a6:	444c      	add	r4, r9
 80025a8:	454c      	cmp	r4, r9
 80025aa:	4192      	sbcs	r2, r2
 80025ac:	4252      	negs	r2, r2
 80025ae:	4690      	mov	r8, r2
 80025b0:	4498      	add	r8, r3
 80025b2:	4643      	mov	r3, r8
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	d5e0      	bpl.n	800257a <__aeabi_dsub+0x2e2>
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <__aeabi_dsub+0x334>)
 80025ba:	3601      	adds	r6, #1
 80025bc:	429e      	cmp	r6, r3
 80025be:	d000      	beq.n	80025c2 <__aeabi_dsub+0x32a>
 80025c0:	e09f      	b.n	8002702 <__aeabi_dsub+0x46a>
 80025c2:	0031      	movs	r1, r6
 80025c4:	2300      	movs	r3, #0
 80025c6:	2200      	movs	r2, #0
 80025c8:	e70a      	b.n	80023e0 <__aeabi_dsub+0x148>
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	000007ff 	.word	0x000007ff
 80025d0:	ff7fffff 	.word	0xff7fffff
 80025d4:	fffff801 	.word	0xfffff801
 80025d8:	000007fe 	.word	0x000007fe
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x34a>
 80025e0:	e160      	b.n	80028a4 <__aeabi_dsub+0x60c>
 80025e2:	000a      	movs	r2, r1
 80025e4:	4302      	orrs	r2, r0
 80025e6:	d04d      	beq.n	8002684 <__aeabi_dsub+0x3ec>
 80025e8:	464a      	mov	r2, r9
 80025ea:	075c      	lsls	r4, r3, #29
 80025ec:	08d2      	lsrs	r2, r2, #3
 80025ee:	4322      	orrs	r2, r4
 80025f0:	2480      	movs	r4, #128	; 0x80
 80025f2:	08db      	lsrs	r3, r3, #3
 80025f4:	0324      	lsls	r4, r4, #12
 80025f6:	4223      	tst	r3, r4
 80025f8:	d007      	beq.n	800260a <__aeabi_dsub+0x372>
 80025fa:	08ce      	lsrs	r6, r1, #3
 80025fc:	4226      	tst	r6, r4
 80025fe:	d104      	bne.n	800260a <__aeabi_dsub+0x372>
 8002600:	465d      	mov	r5, fp
 8002602:	0033      	movs	r3, r6
 8002604:	08c2      	lsrs	r2, r0, #3
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	430a      	orrs	r2, r1
 800260a:	0f51      	lsrs	r1, r2, #29
 800260c:	00d2      	lsls	r2, r2, #3
 800260e:	08d2      	lsrs	r2, r2, #3
 8002610:	0749      	lsls	r1, r1, #29
 8002612:	430a      	orrs	r2, r1
 8002614:	0011      	movs	r1, r2
 8002616:	4319      	orrs	r1, r3
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x384>
 800261a:	e1c8      	b.n	80029ae <__aeabi_dsub+0x716>
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0309      	lsls	r1, r1, #12
 8002620:	430b      	orrs	r3, r1
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	49d5      	ldr	r1, [pc, #852]	; (800297c <__aeabi_dsub+0x6e4>)
 8002626:	0b1b      	lsrs	r3, r3, #12
 8002628:	e6da      	b.n	80023e0 <__aeabi_dsub+0x148>
 800262a:	49d5      	ldr	r1, [pc, #852]	; (8002980 <__aeabi_dsub+0x6e8>)
 800262c:	1ab6      	subs	r6, r6, r2
 800262e:	400b      	ands	r3, r1
 8002630:	4698      	mov	r8, r3
 8002632:	e6b5      	b.n	80023a0 <__aeabi_dsub+0x108>
 8002634:	0020      	movs	r0, r4
 8002636:	f000 fb3b 	bl	8002cb0 <__clzsi2>
 800263a:	0002      	movs	r2, r0
 800263c:	3218      	adds	r2, #24
 800263e:	2a1f      	cmp	r2, #31
 8002640:	dc00      	bgt.n	8002644 <__aeabi_dsub+0x3ac>
 8002642:	e68f      	b.n	8002364 <__aeabi_dsub+0xcc>
 8002644:	0023      	movs	r3, r4
 8002646:	3808      	subs	r0, #8
 8002648:	4083      	lsls	r3, r0
 800264a:	2400      	movs	r4, #0
 800264c:	e692      	b.n	8002374 <__aeabi_dsub+0xdc>
 800264e:	4308      	orrs	r0, r1
 8002650:	0002      	movs	r2, r0
 8002652:	1e50      	subs	r0, r2, #1
 8002654:	4182      	sbcs	r2, r0
 8002656:	e66d      	b.n	8002334 <__aeabi_dsub+0x9c>
 8002658:	4cca      	ldr	r4, [pc, #808]	; (8002984 <__aeabi_dsub+0x6ec>)
 800265a:	1c72      	adds	r2, r6, #1
 800265c:	4222      	tst	r2, r4
 800265e:	d000      	beq.n	8002662 <__aeabi_dsub+0x3ca>
 8002660:	e0ad      	b.n	80027be <__aeabi_dsub+0x526>
 8002662:	464a      	mov	r2, r9
 8002664:	431a      	orrs	r2, r3
 8002666:	2e00      	cmp	r6, #0
 8002668:	d1b8      	bne.n	80025dc <__aeabi_dsub+0x344>
 800266a:	2a00      	cmp	r2, #0
 800266c:	d100      	bne.n	8002670 <__aeabi_dsub+0x3d8>
 800266e:	e158      	b.n	8002922 <__aeabi_dsub+0x68a>
 8002670:	000a      	movs	r2, r1
 8002672:	4302      	orrs	r2, r0
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x3e0>
 8002676:	e159      	b.n	800292c <__aeabi_dsub+0x694>
 8002678:	464a      	mov	r2, r9
 800267a:	0759      	lsls	r1, r3, #29
 800267c:	08d2      	lsrs	r2, r2, #3
 800267e:	430a      	orrs	r2, r1
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	e786      	b.n	8002592 <__aeabi_dsub+0x2fa>
 8002684:	464a      	mov	r2, r9
 8002686:	0759      	lsls	r1, r3, #29
 8002688:	08d2      	lsrs	r2, r2, #3
 800268a:	430a      	orrs	r2, r1
 800268c:	08db      	lsrs	r3, r3, #3
 800268e:	e7c1      	b.n	8002614 <__aeabi_dsub+0x37c>
 8002690:	4dba      	ldr	r5, [pc, #744]	; (800297c <__aeabi_dsub+0x6e4>)
 8002692:	42aa      	cmp	r2, r5
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x400>
 8002696:	e11e      	b.n	80028d6 <__aeabi_dsub+0x63e>
 8002698:	2580      	movs	r5, #128	; 0x80
 800269a:	042d      	lsls	r5, r5, #16
 800269c:	432b      	orrs	r3, r5
 800269e:	4664      	mov	r4, ip
 80026a0:	2c38      	cmp	r4, #56	; 0x38
 80026a2:	dc5d      	bgt.n	8002760 <__aeabi_dsub+0x4c8>
 80026a4:	2c1f      	cmp	r4, #31
 80026a6:	dd00      	ble.n	80026aa <__aeabi_dsub+0x412>
 80026a8:	e0d0      	b.n	800284c <__aeabi_dsub+0x5b4>
 80026aa:	2520      	movs	r5, #32
 80026ac:	4667      	mov	r7, ip
 80026ae:	1b2d      	subs	r5, r5, r4
 80026b0:	464e      	mov	r6, r9
 80026b2:	001c      	movs	r4, r3
 80026b4:	40fe      	lsrs	r6, r7
 80026b6:	40ac      	lsls	r4, r5
 80026b8:	4334      	orrs	r4, r6
 80026ba:	464e      	mov	r6, r9
 80026bc:	40ae      	lsls	r6, r5
 80026be:	0035      	movs	r5, r6
 80026c0:	40fb      	lsrs	r3, r7
 80026c2:	1e6e      	subs	r6, r5, #1
 80026c4:	41b5      	sbcs	r5, r6
 80026c6:	1ac9      	subs	r1, r1, r3
 80026c8:	432c      	orrs	r4, r5
 80026ca:	e04e      	b.n	800276a <__aeabi_dsub+0x4d2>
 80026cc:	464a      	mov	r2, r9
 80026ce:	1a14      	subs	r4, r2, r0
 80026d0:	45a1      	cmp	r9, r4
 80026d2:	4192      	sbcs	r2, r2
 80026d4:	4252      	negs	r2, r2
 80026d6:	4690      	mov	r8, r2
 80026d8:	1a5f      	subs	r7, r3, r1
 80026da:	003a      	movs	r2, r7
 80026dc:	4647      	mov	r7, r8
 80026de:	1bd2      	subs	r2, r2, r7
 80026e0:	4690      	mov	r8, r2
 80026e2:	0212      	lsls	r2, r2, #8
 80026e4:	d500      	bpl.n	80026e8 <__aeabi_dsub+0x450>
 80026e6:	e08b      	b.n	8002800 <__aeabi_dsub+0x568>
 80026e8:	4642      	mov	r2, r8
 80026ea:	4322      	orrs	r2, r4
 80026ec:	d000      	beq.n	80026f0 <__aeabi_dsub+0x458>
 80026ee:	e630      	b.n	8002352 <__aeabi_dsub+0xba>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2500      	movs	r5, #0
 80026f4:	e74d      	b.n	8002592 <__aeabi_dsub+0x2fa>
 80026f6:	464a      	mov	r2, r9
 80026f8:	0759      	lsls	r1, r3, #29
 80026fa:	08d2      	lsrs	r2, r2, #3
 80026fc:	430a      	orrs	r2, r1
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	e744      	b.n	800258c <__aeabi_dsub+0x2f4>
 8002702:	4642      	mov	r2, r8
 8002704:	4b9e      	ldr	r3, [pc, #632]	; (8002980 <__aeabi_dsub+0x6e8>)
 8002706:	0861      	lsrs	r1, r4, #1
 8002708:	401a      	ands	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	2201      	movs	r2, #1
 800270e:	4014      	ands	r4, r2
 8002710:	430c      	orrs	r4, r1
 8002712:	07da      	lsls	r2, r3, #31
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	4698      	mov	r8, r3
 8002718:	4314      	orrs	r4, r2
 800271a:	e641      	b.n	80023a0 <__aeabi_dsub+0x108>
 800271c:	001a      	movs	r2, r3
 800271e:	3e1f      	subs	r6, #31
 8002720:	40f2      	lsrs	r2, r6
 8002722:	0016      	movs	r6, r2
 8002724:	2920      	cmp	r1, #32
 8002726:	d003      	beq.n	8002730 <__aeabi_dsub+0x498>
 8002728:	2240      	movs	r2, #64	; 0x40
 800272a:	1a51      	subs	r1, r2, r1
 800272c:	408b      	lsls	r3, r1
 800272e:	431c      	orrs	r4, r3
 8002730:	1e62      	subs	r2, r4, #1
 8002732:	4194      	sbcs	r4, r2
 8002734:	2300      	movs	r3, #0
 8002736:	4334      	orrs	r4, r6
 8002738:	4698      	mov	r8, r3
 800273a:	2600      	movs	r6, #0
 800273c:	e71d      	b.n	800257a <__aeabi_dsub+0x2e2>
 800273e:	000c      	movs	r4, r1
 8002740:	3a20      	subs	r2, #32
 8002742:	40d4      	lsrs	r4, r2
 8002744:	0022      	movs	r2, r4
 8002746:	4664      	mov	r4, ip
 8002748:	2c20      	cmp	r4, #32
 800274a:	d004      	beq.n	8002756 <__aeabi_dsub+0x4be>
 800274c:	2740      	movs	r7, #64	; 0x40
 800274e:	1b3f      	subs	r7, r7, r4
 8002750:	40b9      	lsls	r1, r7
 8002752:	4308      	orrs	r0, r1
 8002754:	4680      	mov	r8, r0
 8002756:	4644      	mov	r4, r8
 8002758:	1e61      	subs	r1, r4, #1
 800275a:	418c      	sbcs	r4, r1
 800275c:	4322      	orrs	r2, r4
 800275e:	e5e9      	b.n	8002334 <__aeabi_dsub+0x9c>
 8002760:	464c      	mov	r4, r9
 8002762:	4323      	orrs	r3, r4
 8002764:	001c      	movs	r4, r3
 8002766:	1e63      	subs	r3, r4, #1
 8002768:	419c      	sbcs	r4, r3
 800276a:	1b04      	subs	r4, r0, r4
 800276c:	42a0      	cmp	r0, r4
 800276e:	419b      	sbcs	r3, r3
 8002770:	425b      	negs	r3, r3
 8002772:	1acb      	subs	r3, r1, r3
 8002774:	4698      	mov	r8, r3
 8002776:	465d      	mov	r5, fp
 8002778:	0016      	movs	r6, r2
 800277a:	e5e2      	b.n	8002342 <__aeabi_dsub+0xaa>
 800277c:	464e      	mov	r6, r9
 800277e:	431e      	orrs	r6, r3
 8002780:	d100      	bne.n	8002784 <__aeabi_dsub+0x4ec>
 8002782:	e0ae      	b.n	80028e2 <__aeabi_dsub+0x64a>
 8002784:	1e66      	subs	r6, r4, #1
 8002786:	2c01      	cmp	r4, #1
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x4f4>
 800278a:	e0fd      	b.n	8002988 <__aeabi_dsub+0x6f0>
 800278c:	4f7b      	ldr	r7, [pc, #492]	; (800297c <__aeabi_dsub+0x6e4>)
 800278e:	42bc      	cmp	r4, r7
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x4fc>
 8002792:	e107      	b.n	80029a4 <__aeabi_dsub+0x70c>
 8002794:	46b4      	mov	ip, r6
 8002796:	e69b      	b.n	80024d0 <__aeabi_dsub+0x238>
 8002798:	4664      	mov	r4, ip
 800279a:	2220      	movs	r2, #32
 800279c:	1b12      	subs	r2, r2, r4
 800279e:	000c      	movs	r4, r1
 80027a0:	4094      	lsls	r4, r2
 80027a2:	0007      	movs	r7, r0
 80027a4:	4090      	lsls	r0, r2
 80027a6:	46a0      	mov	r8, r4
 80027a8:	4664      	mov	r4, ip
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4190      	sbcs	r0, r2
 80027ae:	4662      	mov	r2, ip
 80027b0:	40e7      	lsrs	r7, r4
 80027b2:	4644      	mov	r4, r8
 80027b4:	40d1      	lsrs	r1, r2
 80027b6:	433c      	orrs	r4, r7
 80027b8:	4304      	orrs	r4, r0
 80027ba:	185b      	adds	r3, r3, r1
 80027bc:	e6f3      	b.n	80025a6 <__aeabi_dsub+0x30e>
 80027be:	4c6f      	ldr	r4, [pc, #444]	; (800297c <__aeabi_dsub+0x6e4>)
 80027c0:	42a2      	cmp	r2, r4
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dsub+0x52e>
 80027c4:	e0d5      	b.n	8002972 <__aeabi_dsub+0x6da>
 80027c6:	4448      	add	r0, r9
 80027c8:	185b      	adds	r3, r3, r1
 80027ca:	4548      	cmp	r0, r9
 80027cc:	4189      	sbcs	r1, r1
 80027ce:	4249      	negs	r1, r1
 80027d0:	185b      	adds	r3, r3, r1
 80027d2:	07dc      	lsls	r4, r3, #31
 80027d4:	0840      	lsrs	r0, r0, #1
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	4698      	mov	r8, r3
 80027da:	0016      	movs	r6, r2
 80027dc:	4304      	orrs	r4, r0
 80027de:	e6cc      	b.n	800257a <__aeabi_dsub+0x2e2>
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d000      	beq.n	80027e6 <__aeabi_dsub+0x54e>
 80027e4:	e082      	b.n	80028ec <__aeabi_dsub+0x654>
 80027e6:	000a      	movs	r2, r1
 80027e8:	4302      	orrs	r2, r0
 80027ea:	d140      	bne.n	800286e <__aeabi_dsub+0x5d6>
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	2500      	movs	r5, #0
 80027f0:	031b      	lsls	r3, r3, #12
 80027f2:	e713      	b.n	800261c <__aeabi_dsub+0x384>
 80027f4:	074b      	lsls	r3, r1, #29
 80027f6:	08c2      	lsrs	r2, r0, #3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	465d      	mov	r5, fp
 80027fc:	08cb      	lsrs	r3, r1, #3
 80027fe:	e6c5      	b.n	800258c <__aeabi_dsub+0x2f4>
 8002800:	464a      	mov	r2, r9
 8002802:	1a84      	subs	r4, r0, r2
 8002804:	42a0      	cmp	r0, r4
 8002806:	4192      	sbcs	r2, r2
 8002808:	1acb      	subs	r3, r1, r3
 800280a:	4252      	negs	r2, r2
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	4698      	mov	r8, r3
 8002810:	465d      	mov	r5, fp
 8002812:	e59e      	b.n	8002352 <__aeabi_dsub+0xba>
 8002814:	464a      	mov	r2, r9
 8002816:	0759      	lsls	r1, r3, #29
 8002818:	08d2      	lsrs	r2, r2, #3
 800281a:	430a      	orrs	r2, r1
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	e6f9      	b.n	8002614 <__aeabi_dsub+0x37c>
 8002820:	464a      	mov	r2, r9
 8002822:	1a14      	subs	r4, r2, r0
 8002824:	45a1      	cmp	r9, r4
 8002826:	4192      	sbcs	r2, r2
 8002828:	1a5b      	subs	r3, r3, r1
 800282a:	4252      	negs	r2, r2
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	4698      	mov	r8, r3
 8002830:	2601      	movs	r6, #1
 8002832:	e586      	b.n	8002342 <__aeabi_dsub+0xaa>
 8002834:	464a      	mov	r2, r9
 8002836:	0759      	lsls	r1, r3, #29
 8002838:	08d2      	lsrs	r2, r2, #3
 800283a:	430a      	orrs	r2, r1
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	e6a5      	b.n	800258c <__aeabi_dsub+0x2f4>
 8002840:	464c      	mov	r4, r9
 8002842:	4323      	orrs	r3, r4
 8002844:	001c      	movs	r4, r3
 8002846:	1e63      	subs	r3, r4, #1
 8002848:	419c      	sbcs	r4, r3
 800284a:	e65b      	b.n	8002504 <__aeabi_dsub+0x26c>
 800284c:	4665      	mov	r5, ip
 800284e:	001e      	movs	r6, r3
 8002850:	3d20      	subs	r5, #32
 8002852:	40ee      	lsrs	r6, r5
 8002854:	2c20      	cmp	r4, #32
 8002856:	d005      	beq.n	8002864 <__aeabi_dsub+0x5cc>
 8002858:	2540      	movs	r5, #64	; 0x40
 800285a:	1b2d      	subs	r5, r5, r4
 800285c:	40ab      	lsls	r3, r5
 800285e:	464c      	mov	r4, r9
 8002860:	431c      	orrs	r4, r3
 8002862:	46a2      	mov	sl, r4
 8002864:	4654      	mov	r4, sl
 8002866:	1e63      	subs	r3, r4, #1
 8002868:	419c      	sbcs	r4, r3
 800286a:	4334      	orrs	r4, r6
 800286c:	e77d      	b.n	800276a <__aeabi_dsub+0x4d2>
 800286e:	074b      	lsls	r3, r1, #29
 8002870:	08c2      	lsrs	r2, r0, #3
 8002872:	431a      	orrs	r2, r3
 8002874:	465d      	mov	r5, fp
 8002876:	08cb      	lsrs	r3, r1, #3
 8002878:	e6cc      	b.n	8002614 <__aeabi_dsub+0x37c>
 800287a:	000a      	movs	r2, r1
 800287c:	4302      	orrs	r2, r0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x5ea>
 8002880:	e736      	b.n	80026f0 <__aeabi_dsub+0x458>
 8002882:	074b      	lsls	r3, r1, #29
 8002884:	08c2      	lsrs	r2, r0, #3
 8002886:	431a      	orrs	r2, r3
 8002888:	465d      	mov	r5, fp
 800288a:	08cb      	lsrs	r3, r1, #3
 800288c:	e681      	b.n	8002592 <__aeabi_dsub+0x2fa>
 800288e:	464a      	mov	r2, r9
 8002890:	1a84      	subs	r4, r0, r2
 8002892:	42a0      	cmp	r0, r4
 8002894:	4192      	sbcs	r2, r2
 8002896:	1acb      	subs	r3, r1, r3
 8002898:	4252      	negs	r2, r2
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	4698      	mov	r8, r3
 800289e:	465d      	mov	r5, fp
 80028a0:	2601      	movs	r6, #1
 80028a2:	e54e      	b.n	8002342 <__aeabi_dsub+0xaa>
 80028a4:	074b      	lsls	r3, r1, #29
 80028a6:	08c2      	lsrs	r2, r0, #3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	08cb      	lsrs	r3, r1, #3
 80028ac:	e6b2      	b.n	8002614 <__aeabi_dsub+0x37c>
 80028ae:	464a      	mov	r2, r9
 80028b0:	1a14      	subs	r4, r2, r0
 80028b2:	45a1      	cmp	r9, r4
 80028b4:	4192      	sbcs	r2, r2
 80028b6:	1a5f      	subs	r7, r3, r1
 80028b8:	4252      	negs	r2, r2
 80028ba:	1aba      	subs	r2, r7, r2
 80028bc:	4690      	mov	r8, r2
 80028be:	0212      	lsls	r2, r2, #8
 80028c0:	d56b      	bpl.n	800299a <__aeabi_dsub+0x702>
 80028c2:	464a      	mov	r2, r9
 80028c4:	1a84      	subs	r4, r0, r2
 80028c6:	42a0      	cmp	r0, r4
 80028c8:	4192      	sbcs	r2, r2
 80028ca:	1acb      	subs	r3, r1, r3
 80028cc:	4252      	negs	r2, r2
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	4698      	mov	r8, r3
 80028d2:	465d      	mov	r5, fp
 80028d4:	e564      	b.n	80023a0 <__aeabi_dsub+0x108>
 80028d6:	074b      	lsls	r3, r1, #29
 80028d8:	08c2      	lsrs	r2, r0, #3
 80028da:	431a      	orrs	r2, r3
 80028dc:	465d      	mov	r5, fp
 80028de:	08cb      	lsrs	r3, r1, #3
 80028e0:	e698      	b.n	8002614 <__aeabi_dsub+0x37c>
 80028e2:	074b      	lsls	r3, r1, #29
 80028e4:	08c2      	lsrs	r2, r0, #3
 80028e6:	431a      	orrs	r2, r3
 80028e8:	08cb      	lsrs	r3, r1, #3
 80028ea:	e64f      	b.n	800258c <__aeabi_dsub+0x2f4>
 80028ec:	000a      	movs	r2, r1
 80028ee:	4302      	orrs	r2, r0
 80028f0:	d090      	beq.n	8002814 <__aeabi_dsub+0x57c>
 80028f2:	464a      	mov	r2, r9
 80028f4:	075c      	lsls	r4, r3, #29
 80028f6:	08d2      	lsrs	r2, r2, #3
 80028f8:	4314      	orrs	r4, r2
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	0312      	lsls	r2, r2, #12
 8002900:	4213      	tst	r3, r2
 8002902:	d008      	beq.n	8002916 <__aeabi_dsub+0x67e>
 8002904:	08ce      	lsrs	r6, r1, #3
 8002906:	4216      	tst	r6, r2
 8002908:	d105      	bne.n	8002916 <__aeabi_dsub+0x67e>
 800290a:	08c0      	lsrs	r0, r0, #3
 800290c:	0749      	lsls	r1, r1, #29
 800290e:	4308      	orrs	r0, r1
 8002910:	0004      	movs	r4, r0
 8002912:	465d      	mov	r5, fp
 8002914:	0033      	movs	r3, r6
 8002916:	0f61      	lsrs	r1, r4, #29
 8002918:	00e2      	lsls	r2, r4, #3
 800291a:	0749      	lsls	r1, r1, #29
 800291c:	08d2      	lsrs	r2, r2, #3
 800291e:	430a      	orrs	r2, r1
 8002920:	e678      	b.n	8002614 <__aeabi_dsub+0x37c>
 8002922:	074b      	lsls	r3, r1, #29
 8002924:	08c2      	lsrs	r2, r0, #3
 8002926:	431a      	orrs	r2, r3
 8002928:	08cb      	lsrs	r3, r1, #3
 800292a:	e632      	b.n	8002592 <__aeabi_dsub+0x2fa>
 800292c:	4448      	add	r0, r9
 800292e:	185b      	adds	r3, r3, r1
 8002930:	4548      	cmp	r0, r9
 8002932:	4192      	sbcs	r2, r2
 8002934:	4698      	mov	r8, r3
 8002936:	4252      	negs	r2, r2
 8002938:	4490      	add	r8, r2
 800293a:	4643      	mov	r3, r8
 800293c:	0004      	movs	r4, r0
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	d400      	bmi.n	8002944 <__aeabi_dsub+0x6ac>
 8002942:	e61a      	b.n	800257a <__aeabi_dsub+0x2e2>
 8002944:	4642      	mov	r2, r8
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <__aeabi_dsub+0x6e8>)
 8002948:	2601      	movs	r6, #1
 800294a:	401a      	ands	r2, r3
 800294c:	4690      	mov	r8, r2
 800294e:	e614      	b.n	800257a <__aeabi_dsub+0x2e2>
 8002950:	4666      	mov	r6, ip
 8002952:	001f      	movs	r7, r3
 8002954:	3e20      	subs	r6, #32
 8002956:	40f7      	lsrs	r7, r6
 8002958:	2c20      	cmp	r4, #32
 800295a:	d005      	beq.n	8002968 <__aeabi_dsub+0x6d0>
 800295c:	2640      	movs	r6, #64	; 0x40
 800295e:	1b36      	subs	r6, r6, r4
 8002960:	40b3      	lsls	r3, r6
 8002962:	464c      	mov	r4, r9
 8002964:	431c      	orrs	r4, r3
 8002966:	46a2      	mov	sl, r4
 8002968:	4654      	mov	r4, sl
 800296a:	1e63      	subs	r3, r4, #1
 800296c:	419c      	sbcs	r4, r3
 800296e:	433c      	orrs	r4, r7
 8002970:	e5c8      	b.n	8002504 <__aeabi_dsub+0x26c>
 8002972:	0011      	movs	r1, r2
 8002974:	2300      	movs	r3, #0
 8002976:	2200      	movs	r2, #0
 8002978:	e532      	b.n	80023e0 <__aeabi_dsub+0x148>
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	000007ff 	.word	0x000007ff
 8002980:	ff7fffff 	.word	0xff7fffff
 8002984:	000007fe 	.word	0x000007fe
 8002988:	464a      	mov	r2, r9
 800298a:	1814      	adds	r4, r2, r0
 800298c:	4284      	cmp	r4, r0
 800298e:	4192      	sbcs	r2, r2
 8002990:	185b      	adds	r3, r3, r1
 8002992:	4698      	mov	r8, r3
 8002994:	4252      	negs	r2, r2
 8002996:	4490      	add	r8, r2
 8002998:	e5e9      	b.n	800256e <__aeabi_dsub+0x2d6>
 800299a:	4642      	mov	r2, r8
 800299c:	4322      	orrs	r2, r4
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x70a>
 80029a0:	e6a6      	b.n	80026f0 <__aeabi_dsub+0x458>
 80029a2:	e5ea      	b.n	800257a <__aeabi_dsub+0x2e2>
 80029a4:	074b      	lsls	r3, r1, #29
 80029a6:	08c2      	lsrs	r2, r0, #3
 80029a8:	431a      	orrs	r2, r3
 80029aa:	08cb      	lsrs	r3, r1, #3
 80029ac:	e632      	b.n	8002614 <__aeabi_dsub+0x37c>
 80029ae:	2200      	movs	r2, #0
 80029b0:	4901      	ldr	r1, [pc, #4]	; (80029b8 <__aeabi_dsub+0x720>)
 80029b2:	0013      	movs	r3, r2
 80029b4:	e514      	b.n	80023e0 <__aeabi_dsub+0x148>
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	000007ff 	.word	0x000007ff

080029bc <__aeabi_dcmpun>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	0005      	movs	r5, r0
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <__aeabi_dcmpun+0x38>)
 80029c2:	030c      	lsls	r4, r1, #12
 80029c4:	0016      	movs	r6, r2
 80029c6:	0049      	lsls	r1, r1, #1
 80029c8:	031a      	lsls	r2, r3, #12
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	0b24      	lsrs	r4, r4, #12
 80029ce:	0d49      	lsrs	r1, r1, #21
 80029d0:	0b12      	lsrs	r2, r2, #12
 80029d2:	0d5b      	lsrs	r3, r3, #21
 80029d4:	4281      	cmp	r1, r0
 80029d6:	d008      	beq.n	80029ea <__aeabi_dcmpun+0x2e>
 80029d8:	4906      	ldr	r1, [pc, #24]	; (80029f4 <__aeabi_dcmpun+0x38>)
 80029da:	2000      	movs	r0, #0
 80029dc:	428b      	cmp	r3, r1
 80029de:	d103      	bne.n	80029e8 <__aeabi_dcmpun+0x2c>
 80029e0:	4332      	orrs	r2, r6
 80029e2:	0010      	movs	r0, r2
 80029e4:	1e42      	subs	r2, r0, #1
 80029e6:	4190      	sbcs	r0, r2
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
 80029ea:	2001      	movs	r0, #1
 80029ec:	432c      	orrs	r4, r5
 80029ee:	d1fb      	bne.n	80029e8 <__aeabi_dcmpun+0x2c>
 80029f0:	e7f2      	b.n	80029d8 <__aeabi_dcmpun+0x1c>
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	000007ff 	.word	0x000007ff

080029f8 <__aeabi_d2iz>:
 80029f8:	000a      	movs	r2, r1
 80029fa:	b530      	push	{r4, r5, lr}
 80029fc:	4c13      	ldr	r4, [pc, #76]	; (8002a4c <__aeabi_d2iz+0x54>)
 80029fe:	0053      	lsls	r3, r2, #1
 8002a00:	0309      	lsls	r1, r1, #12
 8002a02:	0005      	movs	r5, r0
 8002a04:	0b09      	lsrs	r1, r1, #12
 8002a06:	2000      	movs	r0, #0
 8002a08:	0d5b      	lsrs	r3, r3, #21
 8002a0a:	0fd2      	lsrs	r2, r2, #31
 8002a0c:	42a3      	cmp	r3, r4
 8002a0e:	dd04      	ble.n	8002a1a <__aeabi_d2iz+0x22>
 8002a10:	480f      	ldr	r0, [pc, #60]	; (8002a50 <__aeabi_d2iz+0x58>)
 8002a12:	4283      	cmp	r3, r0
 8002a14:	dd02      	ble.n	8002a1c <__aeabi_d2iz+0x24>
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <__aeabi_d2iz+0x5c>)
 8002a18:	18d0      	adds	r0, r2, r3
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	2080      	movs	r0, #128	; 0x80
 8002a1e:	0340      	lsls	r0, r0, #13
 8002a20:	4301      	orrs	r1, r0
 8002a22:	480d      	ldr	r0, [pc, #52]	; (8002a58 <__aeabi_d2iz+0x60>)
 8002a24:	1ac0      	subs	r0, r0, r3
 8002a26:	281f      	cmp	r0, #31
 8002a28:	dd08      	ble.n	8002a3c <__aeabi_d2iz+0x44>
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <__aeabi_d2iz+0x64>)
 8002a2c:	1ac3      	subs	r3, r0, r3
 8002a2e:	40d9      	lsrs	r1, r3
 8002a30:	000b      	movs	r3, r1
 8002a32:	4258      	negs	r0, r3
 8002a34:	2a00      	cmp	r2, #0
 8002a36:	d1f0      	bne.n	8002a1a <__aeabi_d2iz+0x22>
 8002a38:	0018      	movs	r0, r3
 8002a3a:	e7ee      	b.n	8002a1a <__aeabi_d2iz+0x22>
 8002a3c:	4c08      	ldr	r4, [pc, #32]	; (8002a60 <__aeabi_d2iz+0x68>)
 8002a3e:	40c5      	lsrs	r5, r0
 8002a40:	46a4      	mov	ip, r4
 8002a42:	4463      	add	r3, ip
 8002a44:	4099      	lsls	r1, r3
 8002a46:	000b      	movs	r3, r1
 8002a48:	432b      	orrs	r3, r5
 8002a4a:	e7f2      	b.n	8002a32 <__aeabi_d2iz+0x3a>
 8002a4c:	000003fe 	.word	0x000003fe
 8002a50:	0000041d 	.word	0x0000041d
 8002a54:	7fffffff 	.word	0x7fffffff
 8002a58:	00000433 	.word	0x00000433
 8002a5c:	00000413 	.word	0x00000413
 8002a60:	fffffbed 	.word	0xfffffbed

08002a64 <__aeabi_i2d>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d016      	beq.n	8002a98 <__aeabi_i2d+0x34>
 8002a6a:	17c3      	asrs	r3, r0, #31
 8002a6c:	18c5      	adds	r5, r0, r3
 8002a6e:	405d      	eors	r5, r3
 8002a70:	0fc4      	lsrs	r4, r0, #31
 8002a72:	0028      	movs	r0, r5
 8002a74:	f000 f91c 	bl	8002cb0 <__clzsi2>
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <__aeabi_i2d+0x5c>)
 8002a7a:	1a12      	subs	r2, r2, r0
 8002a7c:	280a      	cmp	r0, #10
 8002a7e:	dc16      	bgt.n	8002aae <__aeabi_i2d+0x4a>
 8002a80:	0003      	movs	r3, r0
 8002a82:	002e      	movs	r6, r5
 8002a84:	3315      	adds	r3, #21
 8002a86:	409e      	lsls	r6, r3
 8002a88:	230b      	movs	r3, #11
 8002a8a:	1a18      	subs	r0, r3, r0
 8002a8c:	40c5      	lsrs	r5, r0
 8002a8e:	0553      	lsls	r3, r2, #21
 8002a90:	032d      	lsls	r5, r5, #12
 8002a92:	0b2d      	lsrs	r5, r5, #12
 8002a94:	0d5b      	lsrs	r3, r3, #21
 8002a96:	e003      	b.n	8002aa0 <__aeabi_i2d+0x3c>
 8002a98:	2400      	movs	r4, #0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	051b      	lsls	r3, r3, #20
 8002aa2:	432b      	orrs	r3, r5
 8002aa4:	07e4      	lsls	r4, r4, #31
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	0030      	movs	r0, r6
 8002aaa:	0019      	movs	r1, r3
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	380b      	subs	r0, #11
 8002ab0:	4085      	lsls	r5, r0
 8002ab2:	0553      	lsls	r3, r2, #21
 8002ab4:	032d      	lsls	r5, r5, #12
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	0b2d      	lsrs	r5, r5, #12
 8002aba:	0d5b      	lsrs	r3, r3, #21
 8002abc:	e7f0      	b.n	8002aa0 <__aeabi_i2d+0x3c>
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	0000041e 	.word	0x0000041e

08002ac4 <__aeabi_ui2d>:
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	1e04      	subs	r4, r0, #0
 8002ac8:	d010      	beq.n	8002aec <__aeabi_ui2d+0x28>
 8002aca:	f000 f8f1 	bl	8002cb0 <__clzsi2>
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <__aeabi_ui2d+0x48>)
 8002ad0:	1a1b      	subs	r3, r3, r0
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dc11      	bgt.n	8002afa <__aeabi_ui2d+0x36>
 8002ad6:	220b      	movs	r2, #11
 8002ad8:	0021      	movs	r1, r4
 8002ada:	1a12      	subs	r2, r2, r0
 8002adc:	40d1      	lsrs	r1, r2
 8002ade:	3015      	adds	r0, #21
 8002ae0:	030a      	lsls	r2, r1, #12
 8002ae2:	055b      	lsls	r3, r3, #21
 8002ae4:	4084      	lsls	r4, r0
 8002ae6:	0b12      	lsrs	r2, r2, #12
 8002ae8:	0d5b      	lsrs	r3, r3, #21
 8002aea:	e001      	b.n	8002af0 <__aeabi_ui2d+0x2c>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2200      	movs	r2, #0
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4313      	orrs	r3, r2
 8002af4:	0020      	movs	r0, r4
 8002af6:	0019      	movs	r1, r3
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	0022      	movs	r2, r4
 8002afc:	380b      	subs	r0, #11
 8002afe:	4082      	lsls	r2, r0
 8002b00:	055b      	lsls	r3, r3, #21
 8002b02:	0312      	lsls	r2, r2, #12
 8002b04:	2400      	movs	r4, #0
 8002b06:	0b12      	lsrs	r2, r2, #12
 8002b08:	0d5b      	lsrs	r3, r3, #21
 8002b0a:	e7f1      	b.n	8002af0 <__aeabi_ui2d+0x2c>
 8002b0c:	0000041e 	.word	0x0000041e

08002b10 <__aeabi_f2d>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	0043      	lsls	r3, r0, #1
 8002b14:	0246      	lsls	r6, r0, #9
 8002b16:	0fc4      	lsrs	r4, r0, #31
 8002b18:	20fe      	movs	r0, #254	; 0xfe
 8002b1a:	0e1b      	lsrs	r3, r3, #24
 8002b1c:	1c59      	adds	r1, r3, #1
 8002b1e:	0a75      	lsrs	r5, r6, #9
 8002b20:	4208      	tst	r0, r1
 8002b22:	d00c      	beq.n	8002b3e <__aeabi_f2d+0x2e>
 8002b24:	22e0      	movs	r2, #224	; 0xe0
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4694      	mov	ip, r2
 8002b2a:	076d      	lsls	r5, r5, #29
 8002b2c:	0b36      	lsrs	r6, r6, #12
 8002b2e:	4463      	add	r3, ip
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	4333      	orrs	r3, r6
 8002b34:	07e4      	lsls	r4, r4, #31
 8002b36:	4323      	orrs	r3, r4
 8002b38:	0028      	movs	r0, r5
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d114      	bne.n	8002b6c <__aeabi_f2d+0x5c>
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	d01b      	beq.n	8002b7e <__aeabi_f2d+0x6e>
 8002b46:	0028      	movs	r0, r5
 8002b48:	f000 f8b2 	bl	8002cb0 <__clzsi2>
 8002b4c:	280a      	cmp	r0, #10
 8002b4e:	dc1c      	bgt.n	8002b8a <__aeabi_f2d+0x7a>
 8002b50:	230b      	movs	r3, #11
 8002b52:	002a      	movs	r2, r5
 8002b54:	1a1b      	subs	r3, r3, r0
 8002b56:	40da      	lsrs	r2, r3
 8002b58:	0003      	movs	r3, r0
 8002b5a:	3315      	adds	r3, #21
 8002b5c:	409d      	lsls	r5, r3
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <__aeabi_f2d+0x88>)
 8002b60:	0312      	lsls	r2, r2, #12
 8002b62:	1a1b      	subs	r3, r3, r0
 8002b64:	055b      	lsls	r3, r3, #21
 8002b66:	0b16      	lsrs	r6, r2, #12
 8002b68:	0d5b      	lsrs	r3, r3, #21
 8002b6a:	e7e1      	b.n	8002b30 <__aeabi_f2d+0x20>
 8002b6c:	2d00      	cmp	r5, #0
 8002b6e:	d009      	beq.n	8002b84 <__aeabi_f2d+0x74>
 8002b70:	0b32      	lsrs	r2, r6, #12
 8002b72:	2680      	movs	r6, #128	; 0x80
 8002b74:	0336      	lsls	r6, r6, #12
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <__aeabi_f2d+0x8c>)
 8002b78:	076d      	lsls	r5, r5, #29
 8002b7a:	4316      	orrs	r6, r2
 8002b7c:	e7d8      	b.n	8002b30 <__aeabi_f2d+0x20>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2600      	movs	r6, #0
 8002b82:	e7d5      	b.n	8002b30 <__aeabi_f2d+0x20>
 8002b84:	2600      	movs	r6, #0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <__aeabi_f2d+0x8c>)
 8002b88:	e7d2      	b.n	8002b30 <__aeabi_f2d+0x20>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	002a      	movs	r2, r5
 8002b8e:	3b0b      	subs	r3, #11
 8002b90:	409a      	lsls	r2, r3
 8002b92:	2500      	movs	r5, #0
 8002b94:	e7e3      	b.n	8002b5e <__aeabi_f2d+0x4e>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	00000389 	.word	0x00000389
 8002b9c:	000007ff 	.word	0x000007ff

08002ba0 <__aeabi_d2f>:
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	004b      	lsls	r3, r1, #1
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	0308      	lsls	r0, r1, #12
 8002ba8:	0d5b      	lsrs	r3, r3, #21
 8002baa:	4e3d      	ldr	r6, [pc, #244]	; (8002ca0 <__aeabi_d2f+0x100>)
 8002bac:	0fcc      	lsrs	r4, r1, #31
 8002bae:	0a40      	lsrs	r0, r0, #9
 8002bb0:	0f51      	lsrs	r1, r2, #29
 8002bb2:	1c5f      	adds	r7, r3, #1
 8002bb4:	4308      	orrs	r0, r1
 8002bb6:	00d5      	lsls	r5, r2, #3
 8002bb8:	4237      	tst	r7, r6
 8002bba:	d00a      	beq.n	8002bd2 <__aeabi_d2f+0x32>
 8002bbc:	4939      	ldr	r1, [pc, #228]	; (8002ca4 <__aeabi_d2f+0x104>)
 8002bbe:	185e      	adds	r6, r3, r1
 8002bc0:	2efe      	cmp	r6, #254	; 0xfe
 8002bc2:	dd16      	ble.n	8002bf2 <__aeabi_d2f+0x52>
 8002bc4:	23ff      	movs	r3, #255	; 0xff
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	07e0      	lsls	r0, r4, #31
 8002bce:	4318      	orrs	r0, r3
 8002bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <__aeabi_d2f+0x44>
 8002bd6:	4328      	orrs	r0, r5
 8002bd8:	d027      	beq.n	8002c2a <__aeabi_d2f+0x8a>
 8002bda:	2105      	movs	r1, #5
 8002bdc:	0189      	lsls	r1, r1, #6
 8002bde:	0a49      	lsrs	r1, r1, #9
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e7f1      	b.n	8002bc8 <__aeabi_d2f+0x28>
 8002be4:	4305      	orrs	r5, r0
 8002be6:	d0ed      	beq.n	8002bc4 <__aeabi_d2f+0x24>
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	03c9      	lsls	r1, r1, #15
 8002bec:	23ff      	movs	r3, #255	; 0xff
 8002bee:	4301      	orrs	r1, r0
 8002bf0:	e7ea      	b.n	8002bc8 <__aeabi_d2f+0x28>
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	dd1c      	ble.n	8002c30 <__aeabi_d2f+0x90>
 8002bf6:	0192      	lsls	r2, r2, #6
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	1e4a      	subs	r2, r1, #1
 8002bfc:	4191      	sbcs	r1, r2
 8002bfe:	00c0      	lsls	r0, r0, #3
 8002c00:	0f6d      	lsrs	r5, r5, #29
 8002c02:	4301      	orrs	r1, r0
 8002c04:	4329      	orrs	r1, r5
 8002c06:	074b      	lsls	r3, r1, #29
 8002c08:	d048      	beq.n	8002c9c <__aeabi_d2f+0xfc>
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d000      	beq.n	8002c14 <__aeabi_d2f+0x74>
 8002c12:	3104      	adds	r1, #4
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	04db      	lsls	r3, r3, #19
 8002c18:	400b      	ands	r3, r1
 8002c1a:	d03f      	beq.n	8002c9c <__aeabi_d2f+0xfc>
 8002c1c:	1c72      	adds	r2, r6, #1
 8002c1e:	2efe      	cmp	r6, #254	; 0xfe
 8002c20:	d0d0      	beq.n	8002bc4 <__aeabi_d2f+0x24>
 8002c22:	0189      	lsls	r1, r1, #6
 8002c24:	0a49      	lsrs	r1, r1, #9
 8002c26:	b2d3      	uxtb	r3, r2
 8002c28:	e7ce      	b.n	8002bc8 <__aeabi_d2f+0x28>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	e7cb      	b.n	8002bc8 <__aeabi_d2f+0x28>
 8002c30:	0032      	movs	r2, r6
 8002c32:	3217      	adds	r2, #23
 8002c34:	db22      	blt.n	8002c7c <__aeabi_d2f+0xdc>
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	221e      	movs	r2, #30
 8002c3a:	0409      	lsls	r1, r1, #16
 8002c3c:	4308      	orrs	r0, r1
 8002c3e:	1b92      	subs	r2, r2, r6
 8002c40:	2a1f      	cmp	r2, #31
 8002c42:	dd1d      	ble.n	8002c80 <__aeabi_d2f+0xe0>
 8002c44:	2102      	movs	r1, #2
 8002c46:	4249      	negs	r1, r1
 8002c48:	1b8e      	subs	r6, r1, r6
 8002c4a:	0001      	movs	r1, r0
 8002c4c:	40f1      	lsrs	r1, r6
 8002c4e:	000e      	movs	r6, r1
 8002c50:	2a20      	cmp	r2, #32
 8002c52:	d004      	beq.n	8002c5e <__aeabi_d2f+0xbe>
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <__aeabi_d2f+0x108>)
 8002c56:	4694      	mov	ip, r2
 8002c58:	4463      	add	r3, ip
 8002c5a:	4098      	lsls	r0, r3
 8002c5c:	4305      	orrs	r5, r0
 8002c5e:	0029      	movs	r1, r5
 8002c60:	1e4d      	subs	r5, r1, #1
 8002c62:	41a9      	sbcs	r1, r5
 8002c64:	4331      	orrs	r1, r6
 8002c66:	2600      	movs	r6, #0
 8002c68:	074b      	lsls	r3, r1, #29
 8002c6a:	d1ce      	bne.n	8002c0a <__aeabi_d2f+0x6a>
 8002c6c:	2080      	movs	r0, #128	; 0x80
 8002c6e:	000b      	movs	r3, r1
 8002c70:	04c0      	lsls	r0, r0, #19
 8002c72:	2201      	movs	r2, #1
 8002c74:	4003      	ands	r3, r0
 8002c76:	4201      	tst	r1, r0
 8002c78:	d1d3      	bne.n	8002c22 <__aeabi_d2f+0x82>
 8002c7a:	e7af      	b.n	8002bdc <__aeabi_d2f+0x3c>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e7ac      	b.n	8002bda <__aeabi_d2f+0x3a>
 8002c80:	490a      	ldr	r1, [pc, #40]	; (8002cac <__aeabi_d2f+0x10c>)
 8002c82:	468c      	mov	ip, r1
 8002c84:	0029      	movs	r1, r5
 8002c86:	4463      	add	r3, ip
 8002c88:	40d1      	lsrs	r1, r2
 8002c8a:	409d      	lsls	r5, r3
 8002c8c:	000a      	movs	r2, r1
 8002c8e:	0029      	movs	r1, r5
 8002c90:	4098      	lsls	r0, r3
 8002c92:	1e4d      	subs	r5, r1, #1
 8002c94:	41a9      	sbcs	r1, r5
 8002c96:	4301      	orrs	r1, r0
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	e7e4      	b.n	8002c66 <__aeabi_d2f+0xc6>
 8002c9c:	0033      	movs	r3, r6
 8002c9e:	e79d      	b.n	8002bdc <__aeabi_d2f+0x3c>
 8002ca0:	000007fe 	.word	0x000007fe
 8002ca4:	fffffc80 	.word	0xfffffc80
 8002ca8:	fffffca2 	.word	0xfffffca2
 8002cac:	fffffc82 	.word	0xfffffc82

08002cb0 <__clzsi2>:
 8002cb0:	211c      	movs	r1, #28
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	4298      	cmp	r0, r3
 8002cb8:	d301      	bcc.n	8002cbe <__clzsi2+0xe>
 8002cba:	0c00      	lsrs	r0, r0, #16
 8002cbc:	3910      	subs	r1, #16
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	d301      	bcc.n	8002cc8 <__clzsi2+0x18>
 8002cc4:	0a00      	lsrs	r0, r0, #8
 8002cc6:	3908      	subs	r1, #8
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	4298      	cmp	r0, r3
 8002ccc:	d301      	bcc.n	8002cd2 <__clzsi2+0x22>
 8002cce:	0900      	lsrs	r0, r0, #4
 8002cd0:	3904      	subs	r1, #4
 8002cd2:	a202      	add	r2, pc, #8	; (adr r2, 8002cdc <__clzsi2+0x2c>)
 8002cd4:	5c10      	ldrb	r0, [r2, r0]
 8002cd6:	1840      	adds	r0, r0, r1
 8002cd8:	4770      	bx	lr
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	02020304 	.word	0x02020304
 8002ce0:	01010101 	.word	0x01010101
	...

08002cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf2:	f000 fe45 	bl	8003980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cf6:	f000 f82d 	bl	8002d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfa:	f000 f9e1 	bl	80030c0 <MX_GPIO_Init>
  MX_ADC_Init();
 8002cfe:	f000 f891 	bl	8002e24 <MX_ADC_Init>
  MX_I2C2_Init();
 8002d02:	f000 f8eb 	bl	8002edc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002d06:	f000 f9ab 	bl	8003060 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8002d0a:	f000 f927 	bl	8002f5c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  char *start_string = "belt system initialized!\n";
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <main+0x5c>)
 8002d10:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart1, start_string, sizeof(start_string), 1000);
 8002d12:	23fa      	movs	r3, #250	; 0xfa
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <main+0x60>)
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	f003 fbce 	bl	80064bc <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  // nice linky: https://www.youtube.com/watch?v=VfbW6nfG4kw
  // may need to set NVIC enable on the IRQ for the timer: https://electronics.stackexchange.com/questions/544797/output-compares-triggering-function-not-work-on-stm32

  compass_vector_t direction;
  init_mc6470();
 8002d20:	f000 fa4c 	bl	80031bc <init_mc6470>
  HAL_TIM_Base_Start_IT(&htim16);
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <main+0x64>)
 8002d26:	0018      	movs	r0, r3
 8002d28:	f002 fe3c 	bl	80059a4 <HAL_TIM_Base_Start_IT>

  while (1)
  {

	init_mc6470();
 8002d2c:	f000 fa46 	bl	80031bc <init_mc6470>
	get_compass_direction(&direction);
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 fa5a 	bl	80031ec <get_compass_direction>
	set_buzzers(&direction);
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fafc 	bl	8003338 <set_buzzers>
	HAL_Delay(20);
 8002d40:	2014      	movs	r0, #20
 8002d42:	f000 fe81 	bl	8003a48 <HAL_Delay>
	init_mc6470();
 8002d46:	e7f1      	b.n	8002d2c <main+0x40>
 8002d48:	0800a1b0 	.word	0x0800a1b0
 8002d4c:	2000030c 	.word	0x2000030c
 8002d50:	200003d0 	.word	0x200003d0

08002d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b095      	sub	sp, #84	; 0x54
 8002d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d5a:	2420      	movs	r4, #32
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	0018      	movs	r0, r3
 8002d60:	2330      	movs	r3, #48	; 0x30
 8002d62:	001a      	movs	r2, r3
 8002d64:	2100      	movs	r1, #0
 8002d66:	f004 fac3 	bl	80072f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	0018      	movs	r0, r3
 8002d70:	2310      	movs	r3, #16
 8002d72:	001a      	movs	r2, r3
 8002d74:	2100      	movs	r1, #0
 8002d76:	f004 fabb 	bl	80072f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d7a:	003b      	movs	r3, r7
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	2310      	movs	r3, #16
 8002d80:	001a      	movs	r2, r3
 8002d82:	2100      	movs	r1, #0
 8002d84:	f004 fab4 	bl	80072f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002d88:	0021      	movs	r1, r4
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2212      	movs	r2, #18
 8002d8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2201      	movs	r2, #1
 8002d94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2201      	movs	r2, #1
 8002d9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2210      	movs	r2, #16
 8002da0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2210      	movs	r2, #16
 8002da6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2202      	movs	r2, #2
 8002dac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	0212      	lsls	r2, r2, #8
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f002 f861 	bl	8004e8c <HAL_RCC_OscConfig>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d001      	beq.n	8002dd2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002dce:	f000 fb87 	bl	80034e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2202      	movs	r2, #2
 8002dde:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2100      	movs	r1, #0
 8002df0:	0018      	movs	r0, r3
 8002df2:	f002 fb69 	bl	80054c8 <HAL_RCC_ClockConfig>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d001      	beq.n	8002dfe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002dfa:	f000 fb71 	bl	80034e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dfe:	003b      	movs	r3, r7
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e04:	003b      	movs	r3, r7
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e0a:	003b      	movs	r3, r7
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f002 fcab 	bl	8005768 <HAL_RCCEx_PeriphCLKConfig>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002e16:	f000 fb63 	bl	80034e0 <Error_Handler>
  }
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b015      	add	sp, #84	; 0x54
 8002e20:	bd90      	pop	{r4, r7, pc}
	...

08002e24 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	230c      	movs	r3, #12
 8002e30:	001a      	movs	r2, r3
 8002e32:	2100      	movs	r1, #0
 8002e34:	f004 fa5c 	bl	80072f0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e3a:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <MX_ADC_Init+0xb4>)
 8002e3c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e58:	2204      	movs	r2, #4
 8002e5a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e76:	22c2      	movs	r2, #194	; 0xc2
 8002e78:	32ff      	adds	r2, #255	; 0xff
 8002e7a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e84:	2224      	movs	r2, #36	; 0x24
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fdfc 	bl	8003a90 <HAL_ADC_Init>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002e9c:	f000 fb20 	bl	80034e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	0152      	lsls	r2, r2, #5
 8002eac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	0552      	lsls	r2, r2, #21
 8002eb4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002eb6:	1d3a      	adds	r2, r7, #4
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MX_ADC_Init+0xb0>)
 8002eba:	0011      	movs	r1, r2
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 ff27 	bl	8003d10 <HAL_ADC_ConfigChannel>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d001      	beq.n	8002eca <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002ec6:	f000 fb0b 	bl	80034e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	20000390 	.word	0x20000390
 8002ed8:	40012400 	.word	0x40012400

08002edc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002ee2:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <MX_I2C2_Init+0x78>)
 8002ee4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <MX_I2C2_Init+0x7c>)
 8002eea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002eec:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ef8:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f001 fa81 	bl	8004420 <HAL_I2C_Init>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d001      	beq.n	8002f26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f22:	f000 fadd 	bl	80034e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f28:	2100      	movs	r1, #0
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f001 ff16 	bl	8004d5c <HAL_I2CEx_ConfigAnalogFilter>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d001      	beq.n	8002f38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f34:	f000 fad4 	bl	80034e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <MX_I2C2_Init+0x74>)
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f001 ff59 	bl	8004df4 <HAL_I2CEx_ConfigDigitalFilter>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f46:	f000 facb 	bl	80034e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200002c0 	.word	0x200002c0
 8002f54:	40005800 	.word	0x40005800
 8002f58:	00303d5b 	.word	0x00303d5b

08002f5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b090      	sub	sp, #64	; 0x40
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f62:	2324      	movs	r3, #36	; 0x24
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	0018      	movs	r0, r3
 8002f68:	231c      	movs	r3, #28
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f004 f9bf 	bl	80072f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	0018      	movs	r0, r3
 8002f76:	2320      	movs	r3, #32
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f004 f9b8 	bl	80072f0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002f80:	4b34      	ldr	r3, [pc, #208]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002f82:	4a35      	ldr	r2, [pc, #212]	; (8003058 <MX_TIM16_Init+0xfc>)
 8002f84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2400-1;
 8002f92:	4b30      	ldr	r3, [pc, #192]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002f94:	4a31      	ldr	r2, [pc, #196]	; (800305c <MX_TIM16_Init+0x100>)
 8002f96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002fac:	0018      	movs	r0, r3
 8002fae:	f002 fca9 	bl	8005904 <HAL_TIM_Base_Init>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002fb6:	f000 fa93 	bl	80034e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8002fba:	4b26      	ldr	r3, [pc, #152]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f002 fd6b 	bl	8005a98 <HAL_TIM_OC_Init>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002fc6:	f000 fa8b 	bl	80034e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002fca:	2124      	movs	r1, #36	; 0x24
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1200;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2296      	movs	r2, #150	; 0x96
 8002fd6:	00d2      	lsls	r2, r2, #3
 8002fd8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ff8:	1879      	adds	r1, r7, r1
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <MX_TIM16_Init+0xf8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f002 feb8 	bl	8005d74 <HAL_TIM_OC_ConfigChannel>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8003008:	f000 fa6a 	bl	80034e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	2200      	movs	r2, #0
 8003028:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	2280      	movs	r2, #128	; 0x80
 800302e:	0192      	lsls	r2, r2, #6
 8003030:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	2200      	movs	r2, #0
 8003036:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003038:	1d3a      	adds	r2, r7, #4
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_TIM16_Init+0xf8>)
 800303c:	0011      	movs	r1, r2
 800303e:	0018      	movs	r0, r3
 8003040:	f003 f97a 	bl	8006338 <HAL_TIMEx_ConfigBreakDeadTime>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d001      	beq.n	800304c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8003048:	f000 fa4a 	bl	80034e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b010      	add	sp, #64	; 0x40
 8003052:	bd80      	pop	{r7, pc}
 8003054:	200003d0 	.word	0x200003d0
 8003058:	40014400 	.word	0x40014400
 800305c:	0000095f 	.word	0x0000095f

08003060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <MX_USART1_UART_Init+0x5c>)
 8003068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 800306c:	22e1      	movs	r2, #225	; 0xe1
 800306e:	0252      	lsls	r2, r2, #9
 8003070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f003 f9b5 	bl	8006414 <HAL_UART_Init>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d001      	beq.n	80030b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80030ae:	f000 fa17 	bl	80034e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	2000030c 	.word	0x2000030c
 80030bc:	40013800 	.word	0x40013800

080030c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c6:	240c      	movs	r4, #12
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	0018      	movs	r0, r3
 80030cc:	2314      	movs	r3, #20
 80030ce:	001a      	movs	r2, r3
 80030d0:	2100      	movs	r1, #0
 80030d2:	f004 f90d 	bl	80072f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <MX_GPIO_Init+0xf0>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <MX_GPIO_Init+0xf0>)
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0289      	lsls	r1, r1, #10
 80030e0:	430a      	orrs	r2, r1
 80030e2:	615a      	str	r2, [r3, #20]
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <MX_GPIO_Init+0xf0>)
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <MX_GPIO_Init+0xf0>)
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <MX_GPIO_Init+0xf0>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	02c9      	lsls	r1, r1, #11
 80030fc:	430a      	orrs	r2, r1
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <MX_GPIO_Init+0xf0>)
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	02db      	lsls	r3, r3, #11
 8003108:	4013      	ands	r3, r2
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800310e:	2390      	movs	r3, #144	; 0x90
 8003110:	05db      	lsls	r3, r3, #23
 8003112:	2200      	movs	r2, #0
 8003114:	21f0      	movs	r1, #240	; 0xf0
 8003116:	0018      	movs	r0, r3
 8003118:	f001 f93e 	bl	8004398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800311c:	4925      	ldr	r1, [pc, #148]	; (80031b4 <MX_GPIO_Init+0xf4>)
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <MX_GPIO_Init+0xf8>)
 8003120:	2200      	movs	r2, #0
 8003122:	0018      	movs	r0, r3
 8003124:	f001 f938 	bl	8004398 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003128:	193b      	adds	r3, r7, r4
 800312a:	2203      	movs	r2, #3
 800312c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312e:	193b      	adds	r3, r7, r4
 8003130:	2288      	movs	r2, #136	; 0x88
 8003132:	0352      	lsls	r2, r2, #13
 8003134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	193a      	adds	r2, r7, r4
 800313e:	2390      	movs	r3, #144	; 0x90
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f000 ffb7 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800314a:	193b      	adds	r3, r7, r4
 800314c:	22f0      	movs	r2, #240	; 0xf0
 800314e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003150:	193b      	adds	r3, r7, r4
 8003152:	2201      	movs	r2, #1
 8003154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	193b      	adds	r3, r7, r4
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	193b      	adds	r3, r7, r4
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	193a      	adds	r2, r7, r4
 8003164:	2390      	movs	r3, #144	; 0x90
 8003166:	05db      	lsls	r3, r3, #23
 8003168:	0011      	movs	r1, r2
 800316a:	0018      	movs	r0, r3
 800316c:	f000 ffa4 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8003170:	0021      	movs	r1, r4
 8003172:	187b      	adds	r3, r7, r1
 8003174:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <MX_GPIO_Init+0xf4>)
 8003176:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2201      	movs	r2, #1
 800317c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	187b      	adds	r3, r7, r1
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <MX_GPIO_Init+0xf8>)
 800318e:	0019      	movs	r1, r3
 8003190:	0010      	movs	r0, r2
 8003192:	f000 ff91 	bl	80040b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	2005      	movs	r0, #5
 800319c:	f000 ff5a 	bl	8004054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80031a0:	2005      	movs	r0, #5
 80031a2:	f000 ff6c 	bl	800407e <HAL_NVIC_EnableIRQ>

}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b009      	add	sp, #36	; 0x24
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40021000 	.word	0x40021000
 80031b4:	0000f201 	.word	0x0000f201
 80031b8:	48000400 	.word	0x48000400

080031bc <init_mc6470>:

/* USER CODE BEGIN 4 */


static void init_mc6470(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af02      	add	r7, sp, #8
	uint8_t initialization[] = {IMU_CTRL1_REG, IMU_CTRL1_ACTIVE};
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <init_mc6470+0x28>)
 80031c6:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, IMU_I2C_ID, initialization, sizeof(initialization), HAL_MAX_DELAY);
 80031c8:	1d3a      	adds	r2, r7, #4
 80031ca:	4807      	ldr	r0, [pc, #28]	; (80031e8 <init_mc6470+0x2c>)
 80031cc:	2301      	movs	r3, #1
 80031ce:	425b      	negs	r3, r3
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2302      	movs	r3, #2
 80031d4:	214c      	movs	r1, #76	; 0x4c
 80031d6:	f001 f9b9 	bl	800454c <HAL_I2C_Master_Transmit>
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	ffff8a1b 	.word	0xffff8a1b
 80031e8:	200002c0 	.word	0x200002c0

080031ec <get_compass_direction>:

static void get_compass_direction(compass_vector_t *direction) {
 80031ec:	b5b0      	push	{r4, r5, r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	6078      	str	r0, [r7, #4]
	static gyrometer_reading_t reading;
	uint8_t read_request[] = {IMU_OUTPUT_X_REG};
 80031f4:	210c      	movs	r1, #12
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <get_compass_direction+0x130>)
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, IMU_I2C_ID, read_request, sizeof(read_request), HAL_MAX_DELAY);
 80031fe:	187a      	adds	r2, r7, r1
 8003200:	4847      	ldr	r0, [pc, #284]	; (8003320 <get_compass_direction+0x134>)
 8003202:	2301      	movs	r3, #1
 8003204:	425b      	negs	r3, r3
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2301      	movs	r3, #1
 800320a:	214c      	movs	r1, #76	; 0x4c
 800320c:	f001 f99e 	bl	800454c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, IMU_I2C_ID, (uint8_t *)&reading, sizeof(reading), HAL_MAX_DELAY);
 8003210:	4a44      	ldr	r2, [pc, #272]	; (8003324 <get_compass_direction+0x138>)
 8003212:	4843      	ldr	r0, [pc, #268]	; (8003320 <get_compass_direction+0x134>)
 8003214:	2301      	movs	r3, #1
 8003216:	425b      	negs	r3, r3
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2306      	movs	r3, #6
 800321c:	214c      	movs	r1, #76	; 0x4c
 800321e:	f001 fa9d 	bl	800475c <HAL_I2C_Master_Receive>

	// lazy change of coordinate frames, probably wrong
	direction->x = (float)reading.Y / (float)INT16_MAX;
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <get_compass_direction+0x138>)
 8003224:	2202      	movs	r2, #2
 8003226:	5e9b      	ldrsh	r3, [r3, r2]
 8003228:	0018      	movs	r0, r3
 800322a:	f7fd fe13 	bl	8000e54 <__aeabi_i2f>
 800322e:	1c03      	adds	r3, r0, #0
 8003230:	493d      	ldr	r1, [pc, #244]	; (8003328 <get_compass_direction+0x13c>)
 8003232:	1c18      	adds	r0, r3, #0
 8003234:	f7fd fb2a 	bl	800088c <__aeabi_fdiv>
 8003238:	1c03      	adds	r3, r0, #0
 800323a:	1c1a      	adds	r2, r3, #0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
	direction->y = (float)reading.Z / (float)INT16_MAX;
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <get_compass_direction+0x138>)
 8003242:	2204      	movs	r2, #4
 8003244:	5e9b      	ldrsh	r3, [r3, r2]
 8003246:	0018      	movs	r0, r3
 8003248:	f7fd fe04 	bl	8000e54 <__aeabi_i2f>
 800324c:	1c03      	adds	r3, r0, #0
 800324e:	4936      	ldr	r1, [pc, #216]	; (8003328 <get_compass_direction+0x13c>)
 8003250:	1c18      	adds	r0, r3, #0
 8003252:	f7fd fb1b 	bl	800088c <__aeabi_fdiv>
 8003256:	1c03      	adds	r3, r0, #0
 8003258:	1c1a      	adds	r2, r3, #0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	605a      	str	r2, [r3, #4]
	float x = direction->x;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	61fb      	str	r3, [r7, #28]
	float y = direction->y;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61bb      	str	r3, [r7, #24]

	// bad cohesion!  Probably break this stuff out into vector management functions
	float length = sqrt(x*x + y*y);
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	69f8      	ldr	r0, [r7, #28]
 800326e:	f7fd fcd7 	bl	8000c20 <__aeabi_fmul>
 8003272:	1c03      	adds	r3, r0, #0
 8003274:	1c1c      	adds	r4, r3, #0
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	69b8      	ldr	r0, [r7, #24]
 800327a:	f7fd fcd1 	bl	8000c20 <__aeabi_fmul>
 800327e:	1c03      	adds	r3, r0, #0
 8003280:	1c19      	adds	r1, r3, #0
 8003282:	1c20      	adds	r0, r4, #0
 8003284:	f7fd f966 	bl	8000554 <__aeabi_fadd>
 8003288:	1c03      	adds	r3, r0, #0
 800328a:	1c18      	adds	r0, r3, #0
 800328c:	f7ff fc40 	bl	8002b10 <__aeabi_f2d>
 8003290:	0002      	movs	r2, r0
 8003292:	000b      	movs	r3, r1
 8003294:	0010      	movs	r0, r2
 8003296:	0019      	movs	r1, r3
 8003298:	f003 fcee 	bl	8006c78 <sqrt>
 800329c:	0002      	movs	r2, r0
 800329e:	000b      	movs	r3, r1
 80032a0:	0010      	movs	r0, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	f7ff fc7c 	bl	8002ba0 <__aeabi_d2f>
 80032a8:	1c03      	adds	r3, r0, #0
 80032aa:	617b      	str	r3, [r7, #20]
	direction->x /= length;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	1c18      	adds	r0, r3, #0
 80032b4:	f7fd faea 	bl	800088c <__aeabi_fdiv>
 80032b8:	1c03      	adds	r3, r0, #0
 80032ba:	1c1a      	adds	r2, r3, #0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	601a      	str	r2, [r3, #0]
	direction->y /= length;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	1c18      	adds	r0, r3, #0
 80032c8:	f7fd fae0 	bl	800088c <__aeabi_fdiv>
 80032cc:	1c03      	adds	r3, r0, #0
 80032ce:	1c1a      	adds	r2, r3, #0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]

	static char message[64];
	int string_length = sprintf(message, "Got new reading: %f %f\n", direction->x, direction->y);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	1c18      	adds	r0, r3, #0
 80032da:	f7ff fc19 	bl	8002b10 <__aeabi_f2d>
 80032de:	0004      	movs	r4, r0
 80032e0:	000d      	movs	r5, r1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	1c18      	adds	r0, r3, #0
 80032e8:	f7ff fc12 	bl	8002b10 <__aeabi_f2d>
 80032ec:	0002      	movs	r2, r0
 80032ee:	000b      	movs	r3, r1
 80032f0:	490e      	ldr	r1, [pc, #56]	; (800332c <get_compass_direction+0x140>)
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <get_compass_direction+0x144>)
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	0022      	movs	r2, r4
 80032fa:	002b      	movs	r3, r5
 80032fc:	f004 fc7a 	bl	8007bf4 <siprintf>
 8003300:	0003      	movs	r3, r0
 8003302:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart1, message, string_length, HAL_MAX_DELAY);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	b29a      	uxth	r2, r3
 8003308:	2301      	movs	r3, #1
 800330a:	425b      	negs	r3, r3
 800330c:	4908      	ldr	r1, [pc, #32]	; (8003330 <get_compass_direction+0x144>)
 800330e:	4809      	ldr	r0, [pc, #36]	; (8003334 <get_compass_direction+0x148>)
 8003310:	f003 f8d4 	bl	80064bc <HAL_UART_Transmit>
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b008      	add	sp, #32
 800331a:	bdb0      	pop	{r4, r5, r7, pc}
 800331c:	0800a1e4 	.word	0x0800a1e4
 8003320:	200002c0 	.word	0x200002c0
 8003324:	2000022c 	.word	0x2000022c
 8003328:	46fffe00 	.word	0x46fffe00
 800332c:	0800a1cc 	.word	0x0800a1cc
 8003330:	20000234 	.word	0x20000234
 8003334:	2000030c 	.word	0x2000030c

08003338 <set_buzzers>:


static void set_buzzers(compass_vector_t *direction) {
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	// pick a buzzer based on the direction.

	// make angle from 0 to 8 with wrapping
	// in a better world, this wouldn't be coupled to the number of motors, but am lazy...
	float angle = (atan2(direction->x, direction->y) / (2.0*3.14159)) * 8.0;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	1c18      	adds	r0, r3, #0
 8003346:	f7ff fbe3 	bl	8002b10 <__aeabi_f2d>
 800334a:	0004      	movs	r4, r0
 800334c:	000d      	movs	r5, r1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	1c18      	adds	r0, r3, #0
 8003354:	f7ff fbdc 	bl	8002b10 <__aeabi_f2d>
 8003358:	0002      	movs	r2, r0
 800335a:	000b      	movs	r3, r1
 800335c:	0020      	movs	r0, r4
 800335e:	0029      	movs	r1, r5
 8003360:	f003 fc86 	bl	8006c70 <atan2>
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <set_buzzers+0xf0>)
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <set_buzzers+0xf4>)
 8003368:	f7fe f924 	bl	80015b4 <__aeabi_ddiv>
 800336c:	0002      	movs	r2, r0
 800336e:	000b      	movs	r3, r1
 8003370:	0010      	movs	r0, r2
 8003372:	0019      	movs	r1, r3
 8003374:	2200      	movs	r2, #0
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <set_buzzers+0xf8>)
 8003378:	f7fe fd22 	bl	8001dc0 <__aeabi_dmul>
 800337c:	0002      	movs	r2, r0
 800337e:	000b      	movs	r3, r1
 8003380:	0010      	movs	r0, r2
 8003382:	0019      	movs	r1, r3
 8003384:	f7ff fc0c 	bl	8002ba0 <__aeabi_d2f>
 8003388:	1c03      	adds	r3, r0, #0
 800338a:	613b      	str	r3, [r7, #16]
	unsigned int new_target = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
	if(angle < 0.5 || angle > 7.5) {
 8003390:	21fc      	movs	r1, #252	; 0xfc
 8003392:	0589      	lsls	r1, r1, #22
 8003394:	6938      	ldr	r0, [r7, #16]
 8003396:	f7fd f897 	bl	80004c8 <__aeabi_fcmplt>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d105      	bne.n	80033aa <set_buzzers+0x72>
 800339e:	4925      	ldr	r1, [pc, #148]	; (8003434 <set_buzzers+0xfc>)
 80033a0:	6938      	ldr	r0, [r7, #16]
 80033a2:	f7fd f8a5 	bl	80004f0 <__aeabi_fcmpgt>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d002      	beq.n	80033b0 <set_buzzers+0x78>
		new_target = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e00e      	b.n	80033ce <set_buzzers+0x96>
	} else {
		new_target = (unsigned int)(angle + 0.5);
 80033b0:	6938      	ldr	r0, [r7, #16]
 80033b2:	f7ff fbad 	bl	8002b10 <__aeabi_f2d>
 80033b6:	2200      	movs	r2, #0
 80033b8:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <set_buzzers+0x100>)
 80033ba:	f7fd fd91 	bl	8000ee0 <__aeabi_dadd>
 80033be:	0002      	movs	r2, r0
 80033c0:	000b      	movs	r3, r1
 80033c2:	0010      	movs	r0, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	f7fd f8a7 	bl	8000518 <__aeabi_d2uiz>
 80033ca:	0003      	movs	r3, r0
 80033cc:	617b      	str	r3, [r7, #20]
	}
	HAL_TIM_Base_Stop_IT(&htim16);
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <set_buzzers+0x104>)
 80033d0:	0018      	movs	r0, r3
 80033d2:	f002 fb33 	bl	8005a3c <HAL_TIM_Base_Stop_IT>
	// probably clear timer or something
	HAL_GPIO_WritePin(motor_ports[target_buzzer], motor_pins[target_buzzer], GPIO_PIN_RESET);
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <set_buzzers+0x108>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <set_buzzers+0x10c>)
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	58d0      	ldr	r0, [r2, r3]
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <set_buzzers+0x108>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <set_buzzers+0x110>)
 80033e6:	0052      	lsls	r2, r2, #1
 80033e8:	5ad3      	ldrh	r3, [r2, r3]
 80033ea:	2200      	movs	r2, #0
 80033ec:	0019      	movs	r1, r3
 80033ee:	f000 ffd3 	bl	8004398 <HAL_GPIO_WritePin>
	target_buzzer = new_target;
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <set_buzzers+0x108>)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim16);
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <set_buzzers+0x104>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f002 fad2 	bl	80059a4 <HAL_TIM_Base_Start_IT>

	static char message[64];
	int string_length = sprintf(message, "Setting motor: %d\n", new_target);
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4912      	ldr	r1, [pc, #72]	; (800344c <set_buzzers+0x114>)
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <set_buzzers+0x118>)
 8003406:	0018      	movs	r0, r3
 8003408:	f004 fbf4 	bl	8007bf4 <siprintf>
 800340c:	0003      	movs	r3, r0
 800340e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, message, string_length, HAL_MAX_DELAY);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	b29a      	uxth	r2, r3
 8003414:	2301      	movs	r3, #1
 8003416:	425b      	negs	r3, r3
 8003418:	490d      	ldr	r1, [pc, #52]	; (8003450 <set_buzzers+0x118>)
 800341a:	480e      	ldr	r0, [pc, #56]	; (8003454 <set_buzzers+0x11c>)
 800341c:	f003 f84e 	bl	80064bc <HAL_UART_Transmit>
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b006      	add	sp, #24
 8003426:	bdb0      	pop	{r4, r5, r7, pc}
 8003428:	f01b866e 	.word	0xf01b866e
 800342c:	401921f9 	.word	0x401921f9
 8003430:	40200000 	.word	0x40200000
 8003434:	40f00000 	.word	0x40f00000
 8003438:	3fe00000 	.word	0x3fe00000
 800343c:	200003d0 	.word	0x200003d0
 8003440:	20000228 	.word	0x20000228
 8003444:	20000000 	.word	0x20000000
 8003448:	20000020 	.word	0x20000020
 800344c:	0800a1e8 	.word	0x0800a1e8
 8003450:	20000274 	.word	0x20000274
 8003454:	2000030c 	.word	0x2000030c

08003458 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	if(htim == &htim16) {
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d10d      	bne.n	8003484 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(motor_ports[target_buzzer], motor_pins[target_buzzer], GPIO_PIN_SET);
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800346e:	0092      	lsls	r2, r2, #2
 8003470:	58d0      	ldr	r0, [r2, r3]
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003478:	0052      	lsls	r2, r2, #1
 800347a:	5ad3      	ldrh	r3, [r2, r3]
 800347c:	2201      	movs	r2, #1
 800347e:	0019      	movs	r1, r3
 8003480:	f000 ff8a 	bl	8004398 <HAL_GPIO_WritePin>
	}
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200003d0 	.word	0x200003d0
 8003490:	20000228 	.word	0x20000228
 8003494:	20000000 	.word	0x20000000
 8003498:	20000020 	.word	0x20000020

0800349c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim16) {
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10d      	bne.n	80034c8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
		HAL_GPIO_WritePin(motor_ports[target_buzzer], motor_pins[target_buzzer], GPIO_PIN_RESET);
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	58d0      	ldr	r0, [r2, r3]
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 80034bc:	0052      	lsls	r2, r2, #1
 80034be:	5ad3      	ldrh	r3, [r2, r3]
 80034c0:	2200      	movs	r2, #0
 80034c2:	0019      	movs	r1, r3
 80034c4:	f000 ff68 	bl	8004398 <HAL_GPIO_WritePin>
	}
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200003d0 	.word	0x200003d0
 80034d4:	20000228 	.word	0x20000228
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000020 	.word	0x20000020

080034e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034e4:	b672      	cpsid	i
}
 80034e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <Error_Handler+0x8>
	...

080034ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_MspInit+0x44>)
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_MspInit+0x44>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	619a      	str	r2, [r3, #24]
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_MspInit+0x44>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_MspInit+0x44>)
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <HAL_MspInit+0x44>)
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	0549      	lsls	r1, r1, #21
 8003514:	430a      	orrs	r2, r1
 8003516:	61da      	str	r2, [r3, #28]
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_MspInit+0x44>)
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	055b      	lsls	r3, r3, #21
 8003520:	4013      	ands	r3, r2
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b08b      	sub	sp, #44	; 0x2c
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	2414      	movs	r4, #20
 800353e:	193b      	adds	r3, r7, r4
 8003540:	0018      	movs	r0, r3
 8003542:	2314      	movs	r3, #20
 8003544:	001a      	movs	r2, r3
 8003546:	2100      	movs	r1, #0
 8003548:	f003 fed2 	bl	80072f0 <memset>
  if(hadc->Instance==ADC1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_ADC_MspInit+0x84>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12b      	bne.n	80035ae <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_ADC_MspInit+0x88>)
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_ADC_MspInit+0x88>)
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	0089      	lsls	r1, r1, #2
 8003560:	430a      	orrs	r2, r1
 8003562:	619a      	str	r2, [r3, #24]
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_ADC_MspInit+0x88>)
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_ADC_MspInit+0x88>)
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_ADC_MspInit+0x88>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	0289      	lsls	r1, r1, #10
 800357c:	430a      	orrs	r2, r1
 800357e:	615a      	str	r2, [r3, #20]
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_ADC_MspInit+0x88>)
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800358e:	193b      	adds	r3, r7, r4
 8003590:	2204      	movs	r2, #4
 8003592:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003594:	193b      	adds	r3, r7, r4
 8003596:	2203      	movs	r2, #3
 8003598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	193b      	adds	r3, r7, r4
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	193a      	adds	r2, r7, r4
 80035a2:	2390      	movs	r3, #144	; 0x90
 80035a4:	05db      	lsls	r3, r3, #23
 80035a6:	0011      	movs	r1, r2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 fd85 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b00b      	add	sp, #44	; 0x2c
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	40012400 	.word	0x40012400
 80035bc:	40021000 	.word	0x40021000

080035c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b08b      	sub	sp, #44	; 0x2c
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	2414      	movs	r4, #20
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	0018      	movs	r0, r3
 80035ce:	2314      	movs	r3, #20
 80035d0:	001a      	movs	r2, r3
 80035d2:	2100      	movs	r1, #0
 80035d4:	f003 fe8c 	bl	80072f0 <memset>
  if(hi2c->Instance==I2C2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_I2C_MspInit+0x90>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d132      	bne.n	8003648 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_I2C_MspInit+0x94>)
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_I2C_MspInit+0x94>)
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	02c9      	lsls	r1, r1, #11
 80035ec:	430a      	orrs	r2, r1
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_I2C_MspInit+0x94>)
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	02db      	lsls	r3, r3, #11
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	22c0      	movs	r2, #192	; 0xc0
 8003602:	0112      	lsls	r2, r2, #4
 8003604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003606:	0021      	movs	r1, r4
 8003608:	187b      	adds	r3, r7, r1
 800360a:	2212      	movs	r2, #18
 800360c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2201      	movs	r2, #1
 8003612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003614:	187b      	adds	r3, r7, r1
 8003616:	2203      	movs	r2, #3
 8003618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800361a:	187b      	adds	r3, r7, r1
 800361c:	2201      	movs	r2, #1
 800361e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003620:	187b      	adds	r3, r7, r1
 8003622:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <HAL_I2C_MspInit+0x98>)
 8003624:	0019      	movs	r1, r3
 8003626:	0010      	movs	r0, r2
 8003628:	f000 fd46 	bl	80040b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_I2C_MspInit+0x94>)
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_I2C_MspInit+0x94>)
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	03c9      	lsls	r1, r1, #15
 8003636:	430a      	orrs	r2, r1
 8003638:	61da      	str	r2, [r3, #28]
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_I2C_MspInit+0x94>)
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	03db      	lsls	r3, r3, #15
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b00b      	add	sp, #44	; 0x2c
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	40005800 	.word	0x40005800
 8003654:	40021000 	.word	0x40021000
 8003658:	48000400 	.word	0x48000400

0800365c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_TIM_Base_MspInit+0x48>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d115      	bne.n	800369a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_TIM_Base_MspInit+0x4c>)
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_TIM_Base_MspInit+0x4c>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	0289      	lsls	r1, r1, #10
 8003678:	430a      	orrs	r2, r1
 800367a:	619a      	str	r2, [r3, #24]
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_TIM_Base_MspInit+0x4c>)
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	029b      	lsls	r3, r3, #10
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800368a:	2200      	movs	r2, #0
 800368c:	2100      	movs	r1, #0
 800368e:	2015      	movs	r0, #21
 8003690:	f000 fce0 	bl	8004054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003694:	2015      	movs	r0, #21
 8003696:	f000 fcf2 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b004      	add	sp, #16
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b08b      	sub	sp, #44	; 0x2c
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	2414      	movs	r4, #20
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	0018      	movs	r0, r3
 80036ba:	2314      	movs	r3, #20
 80036bc:	001a      	movs	r2, r3
 80036be:	2100      	movs	r1, #0
 80036c0:	f003 fe16 	bl	80072f0 <memset>
  if(huart->Instance==USART1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_UART_MspInit+0x94>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d133      	bne.n	8003736 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_UART_MspInit+0x98>)
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_UART_MspInit+0x98>)
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	01c9      	lsls	r1, r1, #7
 80036d8:	430a      	orrs	r2, r1
 80036da:	619a      	str	r2, [r3, #24]
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_UART_MspInit+0x98>)
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	01db      	lsls	r3, r3, #7
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <HAL_UART_MspInit+0x98>)
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_UART_MspInit+0x98>)
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	0289      	lsls	r1, r1, #10
 80036f4:	430a      	orrs	r2, r1
 80036f6:	615a      	str	r2, [r3, #20]
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_UART_MspInit+0x98>)
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	029b      	lsls	r3, r3, #10
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003706:	193b      	adds	r3, r7, r4
 8003708:	22c0      	movs	r2, #192	; 0xc0
 800370a:	00d2      	lsls	r2, r2, #3
 800370c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	0021      	movs	r1, r4
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2202      	movs	r2, #2
 8003714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2203      	movs	r2, #3
 8003720:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2201      	movs	r2, #1
 8003726:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	187a      	adds	r2, r7, r1
 800372a:	2390      	movs	r3, #144	; 0x90
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f000 fcc1 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b00b      	add	sp, #44	; 0x2c
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000

08003748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800374c:	e7fe      	b.n	800374c <NMI_Handler+0x4>

0800374e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003752:	e7fe      	b.n	8003752 <HardFault_Handler+0x4>

08003754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376c:	f000 f950 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800377a:	2001      	movs	r0, #1
 800377c:	f000 fe2a 	bl	80043d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003780:	2002      	movs	r0, #2
 8003782:	f000 fe27 	bl	80043d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <TIM16_IRQHandler+0x14>)
 8003792:	0018      	movs	r0, r3
 8003794:	f002 f9d8 	bl	8005b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	200003d0 	.word	0x200003d0

080037a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	return 1;
 80037a8:	2301      	movs	r3, #1
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_kill>:

int _kill(int pid, int sig)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ba:	f003 fd6f 	bl	800729c <__errno>
 80037be:	0003      	movs	r3, r0
 80037c0:	2216      	movs	r2, #22
 80037c2:	601a      	str	r2, [r3, #0]
	return -1;
 80037c4:	2301      	movs	r3, #1
 80037c6:	425b      	negs	r3, r3
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_exit>:

void _exit (int status)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037d8:	2301      	movs	r3, #1
 80037da:	425a      	negs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7ff ffe5 	bl	80037b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037e6:	e7fe      	b.n	80037e6 <_exit+0x16>

080037e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e00a      	b.n	8003810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037fa:	e000      	b.n	80037fe <_read+0x16>
 80037fc:	bf00      	nop
 80037fe:	0001      	movs	r1, r0
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	60ba      	str	r2, [r7, #8]
 8003806:	b2ca      	uxtb	r2, r1
 8003808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	dbf0      	blt.n	80037fa <_read+0x12>
	}

return len;
 8003818:	687b      	ldr	r3, [r7, #4]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}

08003822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e009      	b.n	8003848 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	60ba      	str	r2, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	e000      	b.n	8003842 <_write+0x20>
 8003840:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbf1      	blt.n	8003834 <_write+0x12>
	}
	return len;
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b006      	add	sp, #24
 8003858:	bd80      	pop	{r7, pc}

0800385a <_close>:

int _close(int file)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
	return -1;
 8003862:	2301      	movs	r3, #1
 8003864:	425b      	negs	r3, r3
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}

0800386e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	0192      	lsls	r2, r2, #6
 800387e:	605a      	str	r2, [r3, #4]
	return 0;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}

0800388a <_isatty>:

int _isatty(int file)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	return 1;
 8003892:	2301      	movs	r3, #1
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b004      	add	sp, #16
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <_sbrk+0x5c>)
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <_sbrk+0x60>)
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <_sbrk+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <_sbrk+0x64>)
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <_sbrk+0x68>)
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <_sbrk+0x64>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d207      	bcs.n	80038f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e4:	f003 fcda 	bl	800729c <__errno>
 80038e8:	0003      	movs	r3, r0
 80038ea:	220c      	movs	r2, #12
 80038ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	425b      	negs	r3, r3
 80038f2:	e009      	b.n	8003908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <_sbrk+0x64>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	18d2      	adds	r2, r2, r3
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <_sbrk+0x64>)
 8003904:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b006      	add	sp, #24
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20008000 	.word	0x20008000
 8003914:	00000400 	.word	0x00000400
 8003918:	200002b4 	.word	0x200002b4
 800391c:	20000430 	.word	0x20000430

08003920 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800392c:	480d      	ldr	r0, [pc, #52]	; (8003964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800392e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003930:	480d      	ldr	r0, [pc, #52]	; (8003968 <LoopForever+0x6>)
  ldr r1, =_edata
 8003932:	490e      	ldr	r1, [pc, #56]	; (800396c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003934:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <LoopForever+0xe>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003938:	e002      	b.n	8003940 <LoopCopyDataInit>

0800393a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800393a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800393c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393e:	3304      	adds	r3, #4

08003940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003944:	d3f9      	bcc.n	800393a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003946:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003948:	4c0b      	ldr	r4, [pc, #44]	; (8003978 <LoopForever+0x16>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800394c:	e001      	b.n	8003952 <LoopFillZerobss>

0800394e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003950:	3204      	adds	r2, #4

08003952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003954:	d3fb      	bcc.n	800394e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003956:	f7ff ffe3 	bl	8003920 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800395a:	f003 fca5 	bl	80072a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800395e:	f7ff f9c5 	bl	8002cec <main>

08003962 <LoopForever>:

LoopForever:
    b LoopForever
 8003962:	e7fe      	b.n	8003962 <LoopForever>
  ldr   r0, =_estack
 8003964:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800396c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003970:	0800a7d4 	.word	0x0800a7d4
  ldr r2, =_sbss
 8003974:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003978:	2000042c 	.word	0x2000042c

0800397c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800397c:	e7fe      	b.n	800397c <ADC1_IRQHandler>
	...

08003980 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_Init+0x24>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_Init+0x24>)
 800398a:	2110      	movs	r1, #16
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003990:	2000      	movs	r0, #0
 8003992:	f000 f809 	bl	80039a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003996:	f7ff fda9 	bl	80034ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	40022000 	.word	0x40022000

080039a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_InitTick+0x5c>)
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_InitTick+0x60>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	0019      	movs	r1, r3
 80039ba:	23fa      	movs	r3, #250	; 0xfa
 80039bc:	0098      	lsls	r0, r3, #2
 80039be:	f7fc fbbd 	bl	800013c <__udivsi3>
 80039c2:	0003      	movs	r3, r0
 80039c4:	0019      	movs	r1, r3
 80039c6:	0020      	movs	r0, r4
 80039c8:	f7fc fbb8 	bl	800013c <__udivsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fb65 	bl	800409e <HAL_SYSTICK_Config>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d001      	beq.n	80039dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e00f      	b.n	80039fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d80b      	bhi.n	80039fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	2301      	movs	r3, #1
 80039e6:	425b      	negs	r3, r3
 80039e8:	2200      	movs	r2, #0
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fb32 	bl	8004054 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_InitTick+0x64>)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b003      	add	sp, #12
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	20000030 	.word	0x20000030
 8003a08:	20000038 	.word	0x20000038
 8003a0c:	20000034 	.word	0x20000034

08003a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_IncTick+0x1c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	001a      	movs	r2, r3
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_IncTick+0x20>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	18d2      	adds	r2, r2, r3
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_IncTick+0x20>)
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	20000038 	.word	0x20000038
 8003a30:	20000418 	.word	0x20000418

08003a34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_GetTick+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000418 	.word	0x20000418

08003a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	d005      	beq.n	8003a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_Delay+0x44>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	001a      	movs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	f7ff ffe0 	bl	8003a34 <HAL_GetTick>
 8003a74:	0002      	movs	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <HAL_Delay+0x28>
  {
  }
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	20000038 	.word	0x20000038

08003a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a98:	230f      	movs	r3, #15
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e125      	b.n	8003cfa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2234      	movs	r2, #52	; 0x34
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7ff fd34 	bl	8003534 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d000      	beq.n	8003ad8 <HAL_ADC_Init+0x48>
 8003ad6:	e103      	b.n	8003ce0 <HAL_ADC_Init+0x250>
 8003ad8:	230f      	movs	r3, #15
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d000      	beq.n	8003ae4 <HAL_ADC_Init+0x54>
 8003ae2:	e0fd      	b.n	8003ce0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2204      	movs	r2, #4
 8003aec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003aee:	d000      	beq.n	8003af2 <HAL_ADC_Init+0x62>
 8003af0:	e0f6      	b.n	8003ce0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	4a83      	ldr	r2, [pc, #524]	; (8003d04 <HAL_ADC_Init+0x274>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	2202      	movs	r2, #2
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d112      	bne.n	8003b36 <HAL_ADC_Init+0xa6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d009      	beq.n	8003b32 <HAL_ADC_Init+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	401a      	ands	r2, r3
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_Init+0xa6>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_ADC_Init+0xa8>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2218      	movs	r2, #24
 8003b44:	4393      	bics	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	0899      	lsrs	r1, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4964      	ldr	r1, [pc, #400]	; (8003d08 <HAL_ADC_Init+0x278>)
 8003b76:	400a      	ands	r2, r1
 8003b78:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7e1b      	ldrb	r3, [r3, #24]
 8003b7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e5b      	ldrb	r3, [r3, #25]
 8003b84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7e9b      	ldrb	r3, [r3, #26]
 8003b8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003b8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d002      	beq.n	8003b9e <HAL_ADC_Init+0x10e>
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	e000      	b.n	8003ba0 <HAL_ADC_Init+0x110>
 8003b9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ba0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ba6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_Init+0x124>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_Init+0x126>
 8003bb4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003bb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2124      	movs	r1, #36	; 0x24
 8003bbc:	5c5b      	ldrb	r3, [r3, r1]
 8003bbe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003bc0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7edb      	ldrb	r3, [r3, #27]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d115      	bne.n	8003bfc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7e9b      	ldrb	r3, [r3, #26]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	0252      	lsls	r2, r2, #9
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	e00b      	b.n	8003bfc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	2220      	movs	r2, #32
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	23c2      	movs	r3, #194	; 0xc2
 8003c02:	33ff      	adds	r3, #255	; 0xff
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d007      	beq.n	8003c18 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003c10:	4313      	orrs	r3, r2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68d9      	ldr	r1, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	055b      	lsls	r3, r3, #21
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d01b      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d017      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d013      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d00f      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d00b      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d007      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	2b06      	cmp	r3, #6
 8003c62:	d003      	beq.n	8003c6c <HAL_ADC_Init+0x1dc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	2b07      	cmp	r3, #7
 8003c6a:	d112      	bne.n	8003c92 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2107      	movs	r1, #7
 8003c78:	438a      	bics	r2, r1
 8003c7a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6959      	ldr	r1, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	2207      	movs	r2, #7
 8003c88:	401a      	ands	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_ADC_Init+0x27c>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d10b      	bne.n	8003cba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	2203      	movs	r2, #3
 8003cae:	4393      	bics	r3, r2
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003cb8:	e01c      	b.n	8003cf4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	2212      	movs	r2, #18
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	2201      	movs	r2, #1
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003cde:	e009      	b.n	8003cf4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003cec:	230f      	movs	r3, #15
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	781b      	ldrb	r3, [r3, #0]
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	fffffefd 	.word	0xfffffefd
 8003d08:	fffe0219 	.word	0xfffe0219
 8003d0c:	833fffe7 	.word	0x833fffe7

08003d10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1a:	230f      	movs	r3, #15
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	055b      	lsls	r3, r3, #21
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d011      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x46>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d00d      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x46>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d009      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x46>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d005      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x46>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d001      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x46>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2234      	movs	r2, #52	; 0x34
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x54>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0bb      	b.n	8003edc <HAL_ADC_ConfigChannel+0x1cc>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2234      	movs	r2, #52	; 0x34
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2204      	movs	r2, #4
 8003d74:	4013      	ands	r3, r2
 8003d76:	d000      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x6a>
 8003d78:	e09f      	b.n	8003eba <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4a59      	ldr	r2, [pc, #356]	; (8003ee4 <HAL_ADC_ConfigChannel+0x1d4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x76>
 8003d84:	e077      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	055b      	lsls	r3, r3, #21
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d037      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d033      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d02f      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d02b      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d027      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d023      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d01f      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	d01b      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2107      	movs	r1, #7
 8003dec:	400b      	ands	r3, r1
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d012      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2107      	movs	r1, #7
 8003dfe:	438a      	bics	r2, r1
 8003e00:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6959      	ldr	r1, [r3, #20]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	401a      	ands	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d003      	beq.n	8003e28 <HAL_ADC_ConfigChannel+0x118>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b11      	cmp	r3, #17
 8003e26:	d152      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e28:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d102      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x12a>
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	e001      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x12e>
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	03db      	lsls	r3, r3, #15
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d140      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_ADC_ConfigChannel+0x1dc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4927      	ldr	r1, [pc, #156]	; (8003ef0 <HAL_ADC_ConfigChannel+0x1e0>)
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7fc f972 	bl	800013c <__udivsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e66:	e002      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f9      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x158>
 8003e74:	e02b      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2101      	movs	r1, #1
 8003e82:	4099      	lsls	r1, r3
 8003e84:	000b      	movs	r3, r1
 8003e86:	43d9      	mvns	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d003      	beq.n	8003ea0 <HAL_ADC_ConfigChannel+0x190>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b11      	cmp	r3, #17
 8003e9e:	d116      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x1a0>
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003eae:	e000      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x1a2>
 8003eb0:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e009      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ec6:	230f      	movs	r3, #15
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2234      	movs	r2, #52	; 0x34
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003ed6:	230f      	movs	r3, #15
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	781b      	ldrb	r3, [r3, #0]
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b004      	add	sp, #16
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	00001001 	.word	0x00001001
 8003ee8:	40012708 	.word	0x40012708
 8003eec:	20000030 	.word	0x20000030
 8003ef0:	000f4240 	.word	0x000f4240
 8003ef4:	ff7fffff 	.word	0xff7fffff
 8003ef8:	ffbfffff 	.word	0xffbfffff

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	0002      	movs	r2, r0
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f0e:	d809      	bhi.n	8003f24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	001a      	movs	r2, r3
 8003f16:	231f      	movs	r3, #31
 8003f18:	401a      	ands	r2, r3
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <__NVIC_EnableIRQ+0x30>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4091      	lsls	r1, r2
 8003f20:	000a      	movs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]
  }
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	0002      	movs	r2, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f3e:	1dfb      	adds	r3, r7, #7
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b7f      	cmp	r3, #127	; 0x7f
 8003f44:	d828      	bhi.n	8003f98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f46:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <__NVIC_SetPriority+0xd4>)
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	33c0      	adds	r3, #192	; 0xc0
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	589b      	ldr	r3, [r3, r2]
 8003f56:	1dfa      	adds	r2, r7, #7
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	400a      	ands	r2, r1
 8003f60:	00d2      	lsls	r2, r2, #3
 8003f62:	21ff      	movs	r1, #255	; 0xff
 8003f64:	4091      	lsls	r1, r2
 8003f66:	000a      	movs	r2, r1
 8003f68:	43d2      	mvns	r2, r2
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	22ff      	movs	r2, #255	; 0xff
 8003f74:	401a      	ands	r2, r3
 8003f76:	1dfb      	adds	r3, r7, #7
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	4003      	ands	r3, r0
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f84:	481f      	ldr	r0, [pc, #124]	; (8004004 <__NVIC_SetPriority+0xd4>)
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	b25b      	sxtb	r3, r3
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	33c0      	adds	r3, #192	; 0xc0
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f96:	e031      	b.n	8003ffc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f98:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <__NVIC_SetPriority+0xd8>)
 8003f9a:	1dfb      	adds	r3, r7, #7
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	3b08      	subs	r3, #8
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3306      	adds	r3, #6
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	3304      	adds	r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1dfa      	adds	r2, r7, #7
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	0011      	movs	r1, r2
 8003fb8:	2203      	movs	r2, #3
 8003fba:	400a      	ands	r2, r1
 8003fbc:	00d2      	lsls	r2, r2, #3
 8003fbe:	21ff      	movs	r1, #255	; 0xff
 8003fc0:	4091      	lsls	r1, r2
 8003fc2:	000a      	movs	r2, r1
 8003fc4:	43d2      	mvns	r2, r2
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	019b      	lsls	r3, r3, #6
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	1dfb      	adds	r3, r7, #7
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	2303      	movs	r3, #3
 8003fda:	4003      	ands	r3, r0
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe0:	4809      	ldr	r0, [pc, #36]	; (8004008 <__NVIC_SetPriority+0xd8>)
 8003fe2:	1dfb      	adds	r3, r7, #7
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	001c      	movs	r4, r3
 8003fe8:	230f      	movs	r3, #15
 8003fea:	4023      	ands	r3, r4
 8003fec:	3b08      	subs	r3, #8
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	3306      	adds	r3, #6
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	18c3      	adds	r3, r0, r3
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	601a      	str	r2, [r3, #0]
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b003      	add	sp, #12
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	e000e100 	.word	0xe000e100
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	045b      	lsls	r3, r3, #17
 800401c:	429a      	cmp	r2, r3
 800401e:	d301      	bcc.n	8004024 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004020:	2301      	movs	r3, #1
 8004022:	e010      	b.n	8004046 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <SysTick_Config+0x44>)
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	3a01      	subs	r2, #1
 800402a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402c:	2301      	movs	r3, #1
 800402e:	425b      	negs	r3, r3
 8004030:	2103      	movs	r1, #3
 8004032:	0018      	movs	r0, r3
 8004034:	f7ff ff7c 	bl	8003f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <SysTick_Config+0x44>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <SysTick_Config+0x44>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004044:	2300      	movs	r3, #0
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b002      	add	sp, #8
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	e000e010 	.word	0xe000e010

08004054 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	210f      	movs	r1, #15
 8004060:	187b      	adds	r3, r7, r1
 8004062:	1c02      	adds	r2, r0, #0
 8004064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	187b      	adds	r3, r7, r1
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b25b      	sxtb	r3, r3
 800406e:	0011      	movs	r1, r2
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff ff5d 	bl	8003f30 <__NVIC_SetPriority>
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b004      	add	sp, #16
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	0002      	movs	r2, r0
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	b25b      	sxtb	r3, r3
 8004090:	0018      	movs	r0, r3
 8004092:	f7ff ff33 	bl	8003efc <__NVIC_EnableIRQ>
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b002      	add	sp, #8
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7ff ffaf 	bl	800400c <SysTick_Config>
 80040ae:	0003      	movs	r3, r0
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c6:	e14f      	b.n	8004368 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2101      	movs	r1, #1
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4091      	lsls	r1, r2
 80040d2:	000a      	movs	r2, r1
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d100      	bne.n	80040e0 <HAL_GPIO_Init+0x28>
 80040de:	e140      	b.n	8004362 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2203      	movs	r2, #3
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d005      	beq.n	80040f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d130      	bne.n	800415a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	409a      	lsls	r2, r3
 8004106:	0013      	movs	r3, r2
 8004108:	43da      	mvns	r2, r3
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	409a      	lsls	r2, r3
 800411a:	0013      	movs	r3, r2
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800412e:	2201      	movs	r2, #1
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	409a      	lsls	r2, r3
 8004134:	0013      	movs	r3, r2
 8004136:	43da      	mvns	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	2201      	movs	r2, #1
 8004146:	401a      	ands	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	409a      	lsls	r2, r3
 800414c:	0013      	movs	r3, r2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2203      	movs	r2, #3
 8004160:	4013      	ands	r3, r2
 8004162:	2b03      	cmp	r3, #3
 8004164:	d017      	beq.n	8004196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	2203      	movs	r2, #3
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	43da      	mvns	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	0013      	movs	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2203      	movs	r2, #3
 800419c:	4013      	ands	r3, r2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d123      	bne.n	80041ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	08da      	lsrs	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3208      	adds	r2, #8
 80041aa:	0092      	lsls	r2, r2, #2
 80041ac:	58d3      	ldr	r3, [r2, r3]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2207      	movs	r2, #7
 80041b4:	4013      	ands	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	220f      	movs	r2, #15
 80041ba:	409a      	lsls	r2, r3
 80041bc:	0013      	movs	r3, r2
 80041be:	43da      	mvns	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2107      	movs	r1, #7
 80041ce:	400b      	ands	r3, r1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	409a      	lsls	r2, r3
 80041d4:	0013      	movs	r3, r2
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	08da      	lsrs	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3208      	adds	r2, #8
 80041e4:	0092      	lsls	r2, r2, #2
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	409a      	lsls	r2, r3
 80041f8:	0013      	movs	r3, r2
 80041fa:	43da      	mvns	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2203      	movs	r2, #3
 8004208:	401a      	ands	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	23c0      	movs	r3, #192	; 0xc0
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	4013      	ands	r3, r2
 8004228:	d100      	bne.n	800422c <HAL_GPIO_Init+0x174>
 800422a:	e09a      	b.n	8004362 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422c:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_GPIO_Init+0x2c8>)
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_GPIO_Init+0x2c8>)
 8004232:	2101      	movs	r1, #1
 8004234:	430a      	orrs	r2, r1
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	4b51      	ldr	r3, [pc, #324]	; (8004380 <HAL_GPIO_Init+0x2c8>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2201      	movs	r2, #1
 800423e:	4013      	ands	r3, r2
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004244:	4a4f      	ldr	r2, [pc, #316]	; (8004384 <HAL_GPIO_Init+0x2cc>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3302      	adds	r3, #2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	589b      	ldr	r3, [r3, r2]
 8004250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2203      	movs	r2, #3
 8004256:	4013      	ands	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	409a      	lsls	r2, r3
 800425e:	0013      	movs	r3, r2
 8004260:	43da      	mvns	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	2390      	movs	r3, #144	; 0x90
 800426c:	05db      	lsls	r3, r3, #23
 800426e:	429a      	cmp	r2, r3
 8004270:	d013      	beq.n	800429a <HAL_GPIO_Init+0x1e2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a44      	ldr	r2, [pc, #272]	; (8004388 <HAL_GPIO_Init+0x2d0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00d      	beq.n	8004296 <HAL_GPIO_Init+0x1de>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a43      	ldr	r2, [pc, #268]	; (800438c <HAL_GPIO_Init+0x2d4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <HAL_GPIO_Init+0x1da>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a42      	ldr	r2, [pc, #264]	; (8004390 <HAL_GPIO_Init+0x2d8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_GPIO_Init+0x1d6>
 800428a:	2303      	movs	r3, #3
 800428c:	e006      	b.n	800429c <HAL_GPIO_Init+0x1e4>
 800428e:	2305      	movs	r3, #5
 8004290:	e004      	b.n	800429c <HAL_GPIO_Init+0x1e4>
 8004292:	2302      	movs	r3, #2
 8004294:	e002      	b.n	800429c <HAL_GPIO_Init+0x1e4>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_GPIO_Init+0x1e4>
 800429a:	2300      	movs	r3, #0
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	2103      	movs	r1, #3
 80042a0:	400a      	ands	r2, r1
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	4093      	lsls	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042ac:	4935      	ldr	r1, [pc, #212]	; (8004384 <HAL_GPIO_Init+0x2cc>)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	3302      	adds	r3, #2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ba:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	025b      	lsls	r3, r3, #9
 80042d2:	4013      	ands	r3, r2
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042de:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	4013      	ands	r3, r2
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43da      	mvns	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	035b      	lsls	r3, r3, #13
 8004326:	4013      	ands	r3, r2
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004332:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004338:	4b16      	ldr	r3, [pc, #88]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43da      	mvns	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	039b      	lsls	r3, r3, #14
 8004350:	4013      	ands	r3, r2
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	3301      	adds	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	40da      	lsrs	r2, r3
 8004370:	1e13      	subs	r3, r2, #0
 8004372:	d000      	beq.n	8004376 <HAL_GPIO_Init+0x2be>
 8004374:	e6a8      	b.n	80040c8 <HAL_GPIO_Init+0x10>
  } 
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b006      	add	sp, #24
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	40010000 	.word	0x40010000
 8004388:	48000400 	.word	0x48000400
 800438c:	48000800 	.word	0x48000800
 8004390:	48000c00 	.word	0x48000c00
 8004394:	40010400 	.word	0x40010400

08004398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	0008      	movs	r0, r1
 80043a2:	0011      	movs	r1, r2
 80043a4:	1cbb      	adds	r3, r7, #2
 80043a6:	1c02      	adds	r2, r0, #0
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	1c7b      	adds	r3, r7, #1
 80043ac:	1c0a      	adds	r2, r1, #0
 80043ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043b0:	1c7b      	adds	r3, r7, #1
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b8:	1cbb      	adds	r3, r7, #2
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c0:	e003      	b.n	80043ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c2:	1cbb      	adds	r3, r7, #2
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	0002      	movs	r2, r0
 80043dc:	1dbb      	adds	r3, r7, #6
 80043de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	1dba      	adds	r2, r7, #6
 80043e6:	8812      	ldrh	r2, [r2, #0]
 80043e8:	4013      	ands	r3, r2
 80043ea:	d008      	beq.n	80043fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80043ee:	1dba      	adds	r2, r7, #6
 80043f0:	8812      	ldrh	r2, [r2, #0]
 80043f2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043f4:	1dbb      	adds	r3, r7, #6
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 f807 	bl	800440c <HAL_GPIO_EXTI_Callback>
  }
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	40010400 	.word	0x40010400

0800440c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	0002      	movs	r2, r0
 8004414:	1dbb      	adds	r3, r7, #6
 8004416:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b002      	add	sp, #8
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e082      	b.n	8004538 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2241      	movs	r2, #65	; 0x41
 8004436:	5c9b      	ldrb	r3, [r3, r2]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2240      	movs	r2, #64	; 0x40
 8004442:	2100      	movs	r1, #0
 8004444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f7ff f8b9 	bl	80035c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2241      	movs	r2, #65	; 0x41
 8004452:	2124      	movs	r1, #36	; 0x24
 8004454:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2101      	movs	r1, #1
 8004462:	438a      	bics	r2, r1
 8004464:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4934      	ldr	r1, [pc, #208]	; (8004540 <HAL_I2C_Init+0x120>)
 8004470:	400a      	ands	r2, r1
 8004472:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4931      	ldr	r1, [pc, #196]	; (8004544 <HAL_I2C_Init+0x124>)
 8004480:	400a      	ands	r2, r1
 8004482:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d108      	bne.n	800449e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	0209      	lsls	r1, r1, #8
 8004498:	430a      	orrs	r2, r1
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e007      	b.n	80044ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2184      	movs	r1, #132	; 0x84
 80044a8:	0209      	lsls	r1, r1, #8
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d104      	bne.n	80044c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	491f      	ldr	r1, [pc, #124]	; (8004548 <HAL_I2C_Init+0x128>)
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	491a      	ldr	r1, [pc, #104]	; (8004544 <HAL_I2C_Init+0x124>)
 80044dc:	400a      	ands	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69d9      	ldr	r1, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2241      	movs	r2, #65	; 0x41
 8004524:	2120      	movs	r1, #32
 8004526:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2242      	movs	r2, #66	; 0x42
 8004532:	2100      	movs	r1, #0
 8004534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}
 8004540:	f0ffffff 	.word	0xf0ffffff
 8004544:	ffff7fff 	.word	0xffff7fff
 8004548:	02008000 	.word	0x02008000

0800454c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	0008      	movs	r0, r1
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	0019      	movs	r1, r3
 800455a:	230a      	movs	r3, #10
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	1c02      	adds	r2, r0, #0
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	2308      	movs	r3, #8
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	1c0a      	adds	r2, r1, #0
 8004568:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2241      	movs	r2, #65	; 0x41
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b20      	cmp	r3, #32
 8004574:	d000      	beq.n	8004578 <HAL_I2C_Master_Transmit+0x2c>
 8004576:	e0e7      	b.n	8004748 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2240      	movs	r2, #64	; 0x40
 800457c:	5c9b      	ldrb	r3, [r3, r2]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_I2C_Master_Transmit+0x3a>
 8004582:	2302      	movs	r3, #2
 8004584:	e0e1      	b.n	800474a <HAL_I2C_Master_Transmit+0x1fe>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800458e:	f7ff fa51 	bl	8003a34 <HAL_GetTick>
 8004592:	0003      	movs	r3, r0
 8004594:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	0219      	lsls	r1, r3, #8
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2319      	movs	r3, #25
 80045a2:	2201      	movs	r2, #1
 80045a4:	f000 fa04 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0cc      	b.n	800474a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2241      	movs	r2, #65	; 0x41
 80045b4:	2121      	movs	r1, #33	; 0x21
 80045b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2242      	movs	r2, #66	; 0x42
 80045bc:	2110      	movs	r1, #16
 80045be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2208      	movs	r2, #8
 80045d0:	18ba      	adds	r2, r7, r2
 80045d2:	8812      	ldrh	r2, [r2, #0]
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2bff      	cmp	r3, #255	; 0xff
 80045e4:	d911      	bls.n	800460a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	045c      	lsls	r4, r3, #17
 80045f6:	230a      	movs	r3, #10
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	8819      	ldrh	r1, [r3, #0]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_I2C_Master_Transmit+0x208>)
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	0023      	movs	r3, r4
 8004604:	f000 fb74 	bl	8004cf0 <I2C_TransferConfig>
 8004608:	e075      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	b2da      	uxtb	r2, r3
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	049c      	lsls	r4, r3, #18
 800461e:	230a      	movs	r3, #10
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	8819      	ldrh	r1, [r3, #0]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <HAL_I2C_Master_Transmit+0x208>)
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	0023      	movs	r3, r4
 800462c:	f000 fb60 	bl	8004cf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004630:	e061      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 f9f8 	bl	8004a2e <I2C_WaitOnTXISFlagUntilTimeout>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e081      	b.n	800474a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d03a      	beq.n	80046f6 <HAL_I2C_Master_Transmit+0x1aa>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d136      	bne.n	80046f6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	0013      	movs	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	f000 f98b 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e053      	b.n	800474a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2bff      	cmp	r3, #255	; 0xff
 80046aa:	d911      	bls.n	80046d0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	22ff      	movs	r2, #255	; 0xff
 80046b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	045c      	lsls	r4, r3, #17
 80046bc:	230a      	movs	r3, #10
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	8819      	ldrh	r1, [r3, #0]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	0023      	movs	r3, r4
 80046ca:	f000 fb11 	bl	8004cf0 <I2C_TransferConfig>
 80046ce:	e012      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	049c      	lsls	r4, r3, #18
 80046e4:	230a      	movs	r3, #10
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	8819      	ldrh	r1, [r3, #0]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	0023      	movs	r3, r4
 80046f2:	f000 fafd 	bl	8004cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d198      	bne.n	8004632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	0018      	movs	r0, r3
 8004708:	f000 f9d0 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 800470c:	1e03      	subs	r3, r0, #0
 800470e:	d001      	beq.n	8004714 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e01a      	b.n	800474a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	490c      	ldr	r1, [pc, #48]	; (8004758 <HAL_I2C_Master_Transmit+0x20c>)
 8004728:	400a      	ands	r2, r1
 800472a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2241      	movs	r2, #65	; 0x41
 8004730:	2120      	movs	r1, #32
 8004732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2242      	movs	r2, #66	; 0x42
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2240      	movs	r2, #64	; 0x40
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b007      	add	sp, #28
 8004750:	bd90      	pop	{r4, r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	80002000 	.word	0x80002000
 8004758:	fe00e800 	.word	0xfe00e800

0800475c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	0008      	movs	r0, r1
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	0019      	movs	r1, r3
 800476a:	230a      	movs	r3, #10
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	1c02      	adds	r2, r0, #0
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	2308      	movs	r3, #8
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	1c0a      	adds	r2, r1, #0
 8004778:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2241      	movs	r2, #65	; 0x41
 800477e:	5c9b      	ldrb	r3, [r3, r2]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b20      	cmp	r3, #32
 8004784:	d000      	beq.n	8004788 <HAL_I2C_Master_Receive+0x2c>
 8004786:	e0e8      	b.n	800495a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2240      	movs	r2, #64	; 0x40
 800478c:	5c9b      	ldrb	r3, [r3, r2]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_I2C_Master_Receive+0x3a>
 8004792:	2302      	movs	r3, #2
 8004794:	e0e2      	b.n	800495c <HAL_I2C_Master_Receive+0x200>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	2101      	movs	r1, #1
 800479c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800479e:	f7ff f949 	bl	8003a34 <HAL_GetTick>
 80047a2:	0003      	movs	r3, r0
 80047a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	0219      	lsls	r1, r3, #8
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2319      	movs	r3, #25
 80047b2:	2201      	movs	r2, #1
 80047b4:	f000 f8fc 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	1e03      	subs	r3, r0, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cd      	b.n	800495c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2241      	movs	r2, #65	; 0x41
 80047c4:	2122      	movs	r1, #34	; 0x22
 80047c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2242      	movs	r2, #66	; 0x42
 80047cc:	2110      	movs	r1, #16
 80047ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2208      	movs	r2, #8
 80047e0:	18ba      	adds	r2, r7, r2
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2bff      	cmp	r3, #255	; 0xff
 80047f4:	d911      	bls.n	800481a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	b2da      	uxtb	r2, r3
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	045c      	lsls	r4, r3, #17
 8004806:	230a      	movs	r3, #10
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	8819      	ldrh	r1, [r3, #0]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	4b55      	ldr	r3, [pc, #340]	; (8004964 <HAL_I2C_Master_Receive+0x208>)
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	0023      	movs	r3, r4
 8004814:	f000 fa6c 	bl	8004cf0 <I2C_TransferConfig>
 8004818:	e076      	b.n	8004908 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	b2da      	uxtb	r2, r3
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	049c      	lsls	r4, r3, #18
 800482e:	230a      	movs	r3, #10
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	8819      	ldrh	r1, [r3, #0]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_I2C_Master_Receive+0x208>)
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	0023      	movs	r3, r4
 800483c:	f000 fa58 	bl	8004cf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004840:	e062      	b.n	8004908 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	0018      	movs	r0, r3
 800484a:	f000 f96b 	bl	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e082      	b.n	800495c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d03a      	beq.n	8004908 <HAL_I2C_Master_Receive+0x1ac>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d136      	bne.n	8004908 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800489a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	0013      	movs	r3, r2
 80048a4:	2200      	movs	r2, #0
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	f000 f882 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e053      	b.n	800495c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2bff      	cmp	r3, #255	; 0xff
 80048bc:	d911      	bls.n	80048e2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	045c      	lsls	r4, r3, #17
 80048ce:	230a      	movs	r3, #10
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	8819      	ldrh	r1, [r3, #0]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	0023      	movs	r3, r4
 80048dc:	f000 fa08 	bl	8004cf0 <I2C_TransferConfig>
 80048e0:	e012      	b.n	8004908 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	049c      	lsls	r4, r3, #18
 80048f6:	230a      	movs	r3, #10
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	8819      	ldrh	r1, [r3, #0]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	0023      	movs	r3, r4
 8004904:	f000 f9f4 	bl	8004cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d197      	bne.n	8004842 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 f8c7 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 800491e:	1e03      	subs	r3, r0, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e01a      	b.n	800495c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2220      	movs	r2, #32
 800492c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	490b      	ldr	r1, [pc, #44]	; (8004968 <HAL_I2C_Master_Receive+0x20c>)
 800493a:	400a      	ands	r2, r1
 800493c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2241      	movs	r2, #65	; 0x41
 8004942:	2120      	movs	r1, #32
 8004944:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2242      	movs	r2, #66	; 0x42
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
  }
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	b007      	add	sp, #28
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	80002400 	.word	0x80002400
 8004968:	fe00e800 	.word	0xfe00e800

0800496c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	2202      	movs	r2, #2
 800497c:	4013      	ands	r3, r2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d103      	bne.n	800498a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2201      	movs	r2, #1
 8004992:	4013      	ands	r3, r2
 8004994:	2b01      	cmp	r3, #1
 8004996:	d007      	beq.n	80049a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	430a      	orrs	r2, r1
 80049a6:	619a      	str	r2, [r3, #24]
  }
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	1dfb      	adds	r3, r7, #7
 80049be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	e021      	b.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	d01e      	beq.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7ff f834 	bl	8003a34 <HAL_GetTick>
 80049cc:	0002      	movs	r2, r0
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d113      	bne.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	2220      	movs	r2, #32
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2241      	movs	r2, #65	; 0x41
 80049ee:	2120      	movs	r1, #32
 80049f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2242      	movs	r2, #66	; 0x42
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	2100      	movs	r1, #0
 8004a00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00f      	b.n	8004a26 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	425a      	negs	r2, r3
 8004a16:	4153      	adcs	r3, r2
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0ce      	beq.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b004      	add	sp, #16
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a3a:	e02b      	b.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 f8da 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004a48:	1e03      	subs	r3, r0, #0
 8004a4a:	d001      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e029      	b.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3301      	adds	r3, #1
 8004a54:	d01e      	beq.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7fe ffed 	bl	8003a34 <HAL_GetTick>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d113      	bne.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	2220      	movs	r2, #32
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2241      	movs	r2, #65	; 0x41
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2242      	movs	r2, #66	; 0x42
 8004a84:	2100      	movs	r1, #0
 8004a86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d1cc      	bne.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b004      	add	sp, #16
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ab8:	e028      	b.n	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f89b 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e026      	b.n	8004b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe ffb1 	bl	8003a34 <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	2220      	movs	r2, #32
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2241      	movs	r2, #65	; 0x41
 8004af4:	2120      	movs	r1, #32
 8004af6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2242      	movs	r2, #66	; 0x42
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2240      	movs	r2, #64	; 0x40
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e007      	b.n	8004b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2220      	movs	r2, #32
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d1cf      	bne.n	8004aba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b004      	add	sp, #16
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b30:	e055      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 f85f 	bl	8004bfc <I2C_IsAcknowledgeFailed>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e053      	b.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d129      	bne.n	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d105      	bne.n	8004b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e03f      	b.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	491d      	ldr	r1, [pc, #116]	; (8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2241      	movs	r2, #65	; 0x41
 8004b90:	2120      	movs	r1, #32
 8004b92:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2242      	movs	r2, #66	; 0x42
 8004b98:	2100      	movs	r1, #0
 8004b9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e022      	b.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba8:	f7fe ff44 	bl	8003a34 <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2241      	movs	r2, #65	; 0x41
 8004bce:	2120      	movs	r1, #32
 8004bd0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2240      	movs	r2, #64	; 0x40
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e007      	b.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2204      	movs	r2, #4
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d1a2      	bne.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	fe00e800 	.word	0xfe00e800

08004bfc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2210      	movs	r2, #16
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d164      	bne.n	8004ce0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	049b      	lsls	r3, r3, #18
 8004c20:	401a      	ands	r2, r3
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	049b      	lsls	r3, r3, #18
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d02b      	beq.n	8004c82 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	01c9      	lsls	r1, r1, #7
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c3c:	e021      	b.n	8004c82 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3301      	adds	r3, #1
 8004c42:	d01e      	beq.n	8004c82 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fe fef6 	bl	8003a34 <HAL_GetTick>
 8004c48:	0002      	movs	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <I2C_IsAcknowledgeFailed+0x5e>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d113      	bne.n	8004c82 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	2220      	movs	r2, #32
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2241      	movs	r2, #65	; 0x41
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2242      	movs	r2, #66	; 0x42
 8004c72:	2100      	movs	r1, #0
 8004c74:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2240      	movs	r2, #64	; 0x40
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e02f      	b.n	8004ce2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d1d6      	bne.n	8004c3e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2210      	movs	r2, #16
 8004c96:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7ff fe62 	bl	800496c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	490e      	ldr	r1, [pc, #56]	; (8004cec <I2C_IsAcknowledgeFailed+0xf0>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2241      	movs	r2, #65	; 0x41
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2242      	movs	r2, #66	; 0x42
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b004      	add	sp, #16
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	fe00e800 	.word	0xfe00e800

08004cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	0008      	movs	r0, r1
 8004cfa:	0011      	movs	r1, r2
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	240a      	movs	r4, #10
 8004d00:	193b      	adds	r3, r7, r4
 8004d02:	1c02      	adds	r2, r0, #0
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	2009      	movs	r0, #9
 8004d08:	183b      	adds	r3, r7, r0
 8004d0a:	1c0a      	adds	r2, r1, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	6a3a      	ldr	r2, [r7, #32]
 8004d16:	0d51      	lsrs	r1, r2, #21
 8004d18:	2280      	movs	r2, #128	; 0x80
 8004d1a:	00d2      	lsls	r2, r2, #3
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	490e      	ldr	r1, [pc, #56]	; (8004d58 <I2C_TransferConfig+0x68>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	43d2      	mvns	r2, r2
 8004d24:	401a      	ands	r2, r3
 8004d26:	0011      	movs	r1, r2
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	059b      	lsls	r3, r3, #22
 8004d2e:	0d9a      	lsrs	r2, r3, #22
 8004d30:	183b      	adds	r3, r7, r0
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	0418      	lsls	r0, r3, #16
 8004d36:	23ff      	movs	r3, #255	; 0xff
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4003      	ands	r3, r0
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b005      	add	sp, #20
 8004d54:	bd90      	pop	{r4, r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	03ff63ff 	.word	0x03ff63ff

08004d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2241      	movs	r2, #65	; 0x41
 8004d6a:	5c9b      	ldrb	r3, [r3, r2]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d138      	bne.n	8004de4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2240      	movs	r2, #64	; 0x40
 8004d76:	5c9b      	ldrb	r3, [r3, r2]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e032      	b.n	8004de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2240      	movs	r2, #64	; 0x40
 8004d84:	2101      	movs	r1, #1
 8004d86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2241      	movs	r2, #65	; 0x41
 8004d8c:	2124      	movs	r1, #36	; 0x24
 8004d8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4911      	ldr	r1, [pc, #68]	; (8004df0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004dac:	400a      	ands	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2101      	movs	r1, #1
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2241      	movs	r2, #65	; 0x41
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
  }
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b002      	add	sp, #8
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	ffffefff 	.word	0xffffefff

08004df4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2241      	movs	r2, #65	; 0x41
 8004e02:	5c9b      	ldrb	r3, [r3, r2]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d139      	bne.n	8004e7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2240      	movs	r2, #64	; 0x40
 8004e0e:	5c9b      	ldrb	r3, [r3, r2]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e033      	b.n	8004e80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2241      	movs	r2, #65	; 0x41
 8004e24:	2124      	movs	r1, #36	; 0x24
 8004e26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2101      	movs	r1, #1
 8004e34:	438a      	bics	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2101      	movs	r1, #1
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2241      	movs	r2, #65	; 0x41
 8004e6e:	2120      	movs	r1, #32
 8004e70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	2100      	movs	r1, #0
 8004e78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b004      	add	sp, #16
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	fffff0ff 	.word	0xfffff0ff

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e305      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <HAL_RCC_OscConfig+0x1e>
 8004ea8:	e08d      	b.n	8004fc6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004eaa:	4bc5      	ldr	r3, [pc, #788]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	220c      	movs	r2, #12
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eb6:	4bc2      	ldr	r3, [pc, #776]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	220c      	movs	r2, #12
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d116      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x64>
 8004ec2:	4bbf      	ldr	r3, [pc, #764]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	401a      	ands	r2, r3
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	025b      	lsls	r3, r3, #9
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4bba      	ldr	r3, [pc, #744]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	029b      	lsls	r3, r3, #10
 8004edc:	4013      	ands	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x56>
 8004ee0:	e070      	b.n	8004fc4 <HAL_RCC_OscConfig+0x138>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d000      	beq.n	8004eec <HAL_RCC_OscConfig+0x60>
 8004eea:	e06b      	b.n	8004fc4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e2dc      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_OscConfig+0x7c>
 8004ef8:	4bb1      	ldr	r3, [pc, #708]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4bb0      	ldr	r3, [pc, #704]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	0249      	lsls	r1, r1, #9
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e02f      	b.n	8004f68 <HAL_RCC_OscConfig+0xdc>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <HAL_RCC_OscConfig+0x9e>
 8004f10:	4bab      	ldr	r3, [pc, #684]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4baa      	ldr	r3, [pc, #680]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f16:	49ab      	ldr	r1, [pc, #684]	; (80051c4 <HAL_RCC_OscConfig+0x338>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	4ba8      	ldr	r3, [pc, #672]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4ba7      	ldr	r3, [pc, #668]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f22:	49a9      	ldr	r1, [pc, #676]	; (80051c8 <HAL_RCC_OscConfig+0x33c>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e01e      	b.n	8004f68 <HAL_RCC_OscConfig+0xdc>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	d10e      	bne.n	8004f50 <HAL_RCC_OscConfig+0xc4>
 8004f32:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4ba2      	ldr	r3, [pc, #648]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f38:	2180      	movs	r1, #128	; 0x80
 8004f3a:	02c9      	lsls	r1, r1, #11
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	4b9f      	ldr	r3, [pc, #636]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b9e      	ldr	r3, [pc, #632]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	0249      	lsls	r1, r1, #9
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e00b      	b.n	8004f68 <HAL_RCC_OscConfig+0xdc>
 8004f50:	4b9b      	ldr	r3, [pc, #620]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	4b9a      	ldr	r3, [pc, #616]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f56:	499b      	ldr	r1, [pc, #620]	; (80051c4 <HAL_RCC_OscConfig+0x338>)
 8004f58:	400a      	ands	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	4b98      	ldr	r3, [pc, #608]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4b97      	ldr	r3, [pc, #604]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f62:	4999      	ldr	r1, [pc, #612]	; (80051c8 <HAL_RCC_OscConfig+0x33c>)
 8004f64:	400a      	ands	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d014      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fe fd60 	bl	8003a34 <HAL_GetTick>
 8004f74:	0003      	movs	r3, r0
 8004f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f7a:	f7fe fd5b 	bl	8003a34 <HAL_GetTick>
 8004f7e:	0002      	movs	r2, r0
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b64      	cmp	r3, #100	; 0x64
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e28e      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8c:	4b8c      	ldr	r3, [pc, #560]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	4013      	ands	r3, r2
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0xee>
 8004f98:	e015      	b.n	8004fc6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe fd4b 	bl	8003a34 <HAL_GetTick>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fe fd46 	bl	8003a34 <HAL_GetTick>
 8004fa8:	0002      	movs	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	; 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e279      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb6:	4b82      	ldr	r3, [pc, #520]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x118>
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d100      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x146>
 8004fd0:	e06c      	b.n	80050ac <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fd2:	4b7b      	ldr	r3, [pc, #492]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	220c      	movs	r2, #12
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fdc:	4b78      	ldr	r3, [pc, #480]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	220c      	movs	r2, #12
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d11f      	bne.n	8005028 <HAL_RCC_OscConfig+0x19c>
 8004fe8:	4b75      	ldr	r3, [pc, #468]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	025b      	lsls	r3, r3, #9
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d116      	bne.n	8005028 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	4b71      	ldr	r3, [pc, #452]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d005      	beq.n	8005010 <HAL_RCC_OscConfig+0x184>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e24c      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005010:	4b6b      	ldr	r3, [pc, #428]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	22f8      	movs	r2, #248	; 0xf8
 8005016:	4393      	bics	r3, r2
 8005018:	0019      	movs	r1, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00da      	lsls	r2, r3, #3
 8005020:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005022:	430a      	orrs	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005026:	e041      	b.n	80050ac <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d024      	beq.n	800507a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005030:	4b63      	ldr	r3, [pc, #396]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b62      	ldr	r3, [pc, #392]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005036:	2101      	movs	r1, #1
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fe fcfa 	bl	8003a34 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005046:	f7fe fcf5 	bl	8003a34 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e228      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005058:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2202      	movs	r2, #2
 800505e:	4013      	ands	r3, r2
 8005060:	d0f1      	beq.n	8005046 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b57      	ldr	r3, [pc, #348]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	22f8      	movs	r2, #248	; 0xf8
 8005068:	4393      	bics	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	00da      	lsls	r2, r3, #3
 8005072:	4b53      	ldr	r3, [pc, #332]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e018      	b.n	80050ac <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507a:	4b51      	ldr	r3, [pc, #324]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005080:	2101      	movs	r1, #1
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fe fcd5 	bl	8003a34 <HAL_GetTick>
 800508a:	0003      	movs	r3, r0
 800508c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005090:	f7fe fcd0 	bl	8003a34 <HAL_GetTick>
 8005094:	0002      	movs	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e203      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2202      	movs	r2, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	d1f1      	bne.n	8005090 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2208      	movs	r2, #8
 80050b2:	4013      	ands	r3, r2
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050be:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80050c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c2:	4b3f      	ldr	r3, [pc, #252]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80050c4:	2101      	movs	r1, #1
 80050c6:	430a      	orrs	r2, r1
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ca:	f7fe fcb3 	bl	8003a34 <HAL_GetTick>
 80050ce:	0003      	movs	r3, r0
 80050d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d4:	f7fe fcae 	bl	8003a34 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e1e1      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e6:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2202      	movs	r2, #2
 80050ec:	4013      	ands	r3, r2
 80050ee:	d0f1      	beq.n	80050d4 <HAL_RCC_OscConfig+0x248>
 80050f0:	e018      	b.n	8005124 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80050f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f6:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80050f8:	2101      	movs	r1, #1
 80050fa:	438a      	bics	r2, r1
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fe:	f7fe fc99 	bl	8003a34 <HAL_GetTick>
 8005102:	0003      	movs	r3, r0
 8005104:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005108:	f7fe fc94 	bl	8003a34 <HAL_GetTick>
 800510c:	0002      	movs	r2, r0
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e1c7      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511a:	4b29      	ldr	r3, [pc, #164]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2202      	movs	r2, #2
 8005120:	4013      	ands	r3, r2
 8005122:	d1f1      	bne.n	8005108 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2204      	movs	r2, #4
 800512a:	4013      	ands	r3, r2
 800512c:	d100      	bne.n	8005130 <HAL_RCC_OscConfig+0x2a4>
 800512e:	e0b5      	b.n	800529c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005130:	201f      	movs	r0, #31
 8005132:	183b      	adds	r3, r7, r0
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	055b      	lsls	r3, r3, #21
 8005140:	4013      	ands	r3, r2
 8005142:	d110      	bne.n	8005166 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 800514a:	2180      	movs	r1, #128	; 0x80
 800514c:	0549      	lsls	r1, r1, #21
 800514e:	430a      	orrs	r2, r1
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	055b      	lsls	r3, r3, #21
 800515a:	4013      	ands	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005160:	183b      	adds	r3, r7, r0
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_RCC_OscConfig+0x340>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4013      	ands	r3, r2
 8005170:	d11a      	bne.n	80051a8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_RCC_OscConfig+0x340>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_RCC_OscConfig+0x340>)
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	0049      	lsls	r1, r1, #1
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005180:	f7fe fc58 	bl	8003a34 <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518a:	f7fe fc53 	bl	8003a34 <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b64      	cmp	r3, #100	; 0x64
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e186      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_OscConfig+0x340>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10f      	bne.n	80051d0 <HAL_RCC_OscConfig+0x344>
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <HAL_RCC_OscConfig+0x334>)
 80051b6:	2101      	movs	r1, #1
 80051b8:	430a      	orrs	r2, r1
 80051ba:	621a      	str	r2, [r3, #32]
 80051bc:	e036      	b.n	800522c <HAL_RCC_OscConfig+0x3a0>
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	40021000 	.word	0x40021000
 80051c4:	fffeffff 	.word	0xfffeffff
 80051c8:	fffbffff 	.word	0xfffbffff
 80051cc:	40007000 	.word	0x40007000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCC_OscConfig+0x366>
 80051d8:	4bb6      	ldr	r3, [pc, #728]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	4bb5      	ldr	r3, [pc, #724]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80051de:	2101      	movs	r1, #1
 80051e0:	438a      	bics	r2, r1
 80051e2:	621a      	str	r2, [r3, #32]
 80051e4:	4bb3      	ldr	r3, [pc, #716]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	4bb2      	ldr	r3, [pc, #712]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80051ea:	2104      	movs	r1, #4
 80051ec:	438a      	bics	r2, r1
 80051ee:	621a      	str	r2, [r3, #32]
 80051f0:	e01c      	b.n	800522c <HAL_RCC_OscConfig+0x3a0>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x388>
 80051fa:	4bae      	ldr	r3, [pc, #696]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	4bad      	ldr	r3, [pc, #692]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005200:	2104      	movs	r1, #4
 8005202:	430a      	orrs	r2, r1
 8005204:	621a      	str	r2, [r3, #32]
 8005206:	4bab      	ldr	r3, [pc, #684]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	4baa      	ldr	r3, [pc, #680]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800520c:	2101      	movs	r1, #1
 800520e:	430a      	orrs	r2, r1
 8005210:	621a      	str	r2, [r3, #32]
 8005212:	e00b      	b.n	800522c <HAL_RCC_OscConfig+0x3a0>
 8005214:	4ba7      	ldr	r3, [pc, #668]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	4ba6      	ldr	r3, [pc, #664]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800521a:	2101      	movs	r1, #1
 800521c:	438a      	bics	r2, r1
 800521e:	621a      	str	r2, [r3, #32]
 8005220:	4ba4      	ldr	r3, [pc, #656]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	4ba3      	ldr	r3, [pc, #652]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005226:	2104      	movs	r1, #4
 8005228:	438a      	bics	r2, r1
 800522a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005234:	f7fe fbfe 	bl	8003a34 <HAL_GetTick>
 8005238:	0003      	movs	r3, r0
 800523a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523c:	e009      	b.n	8005252 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fe fbf9 	bl	8003a34 <HAL_GetTick>
 8005242:	0002      	movs	r2, r0
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	4a9b      	ldr	r2, [pc, #620]	; (80054b8 <HAL_RCC_OscConfig+0x62c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e12b      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	4b98      	ldr	r3, [pc, #608]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x3b2>
 800525c:	e013      	b.n	8005286 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525e:	f7fe fbe9 	bl	8003a34 <HAL_GetTick>
 8005262:	0003      	movs	r3, r0
 8005264:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005266:	e009      	b.n	800527c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fe fbe4 	bl	8003a34 <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a91      	ldr	r2, [pc, #580]	; (80054b8 <HAL_RCC_OscConfig+0x62c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e116      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527c:	4b8d      	ldr	r3, [pc, #564]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005286:	231f      	movs	r3, #31
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b88      	ldr	r3, [pc, #544]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	4b87      	ldr	r3, [pc, #540]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005296:	4989      	ldr	r1, [pc, #548]	; (80054bc <HAL_RCC_OscConfig+0x630>)
 8005298:	400a      	ands	r2, r1
 800529a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2210      	movs	r2, #16
 80052a2:	4013      	ands	r3, r2
 80052a4:	d063      	beq.n	800536e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d12a      	bne.n	8005304 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052ae:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b2:	4b80      	ldr	r3, [pc, #512]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052b4:	2104      	movs	r1, #4
 80052b6:	430a      	orrs	r2, r1
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80052ba:	4b7e      	ldr	r3, [pc, #504]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	4b7d      	ldr	r3, [pc, #500]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052c0:	2101      	movs	r1, #1
 80052c2:	430a      	orrs	r2, r1
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7fe fbb5 	bl	8003a34 <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80052d0:	f7fe fbb0 	bl	8003a34 <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0e3      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052e2:	4b74      	ldr	r3, [pc, #464]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	2202      	movs	r2, #2
 80052e8:	4013      	ands	r3, r2
 80052ea:	d0f1      	beq.n	80052d0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052ec:	4b71      	ldr	r3, [pc, #452]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	22f8      	movs	r2, #248	; 0xf8
 80052f2:	4393      	bics	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	4b6d      	ldr	r3, [pc, #436]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80052fe:	430a      	orrs	r2, r1
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
 8005302:	e034      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	3305      	adds	r3, #5
 800530a:	d111      	bne.n	8005330 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800530c:	4b69      	ldr	r3, [pc, #420]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005312:	2104      	movs	r1, #4
 8005314:	438a      	bics	r2, r1
 8005316:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005318:	4b66      	ldr	r3, [pc, #408]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	22f8      	movs	r2, #248	; 0xf8
 800531e:	4393      	bics	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	00da      	lsls	r2, r3, #3
 8005328:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800532a:	430a      	orrs	r2, r1
 800532c:	635a      	str	r2, [r3, #52]	; 0x34
 800532e:	e01e      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005330:	4b60      	ldr	r3, [pc, #384]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005334:	4b5f      	ldr	r3, [pc, #380]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005336:	2104      	movs	r1, #4
 8005338:	430a      	orrs	r2, r1
 800533a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800533c:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800533e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005340:	4b5c      	ldr	r3, [pc, #368]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005342:	2101      	movs	r1, #1
 8005344:	438a      	bics	r2, r1
 8005346:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005348:	f7fe fb74 	bl	8003a34 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005352:	f7fe fb6f 	bl	8003a34 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0a2      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005364:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	2202      	movs	r2, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d1f1      	bne.n	8005352 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d100      	bne.n	8005378 <HAL_RCC_OscConfig+0x4ec>
 8005376:	e097      	b.n	80054a8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005378:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	220c      	movs	r2, #12
 800537e:	4013      	ands	r3, r2
 8005380:	2b08      	cmp	r3, #8
 8005382:	d100      	bne.n	8005386 <HAL_RCC_OscConfig+0x4fa>
 8005384:	e06b      	b.n	800545e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d14c      	bne.n	8005428 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538e:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005394:	494a      	ldr	r1, [pc, #296]	; (80054c0 <HAL_RCC_OscConfig+0x634>)
 8005396:	400a      	ands	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fe fb4b 	bl	8003a34 <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fe fb46 	bl	8003a34 <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e079      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	049b      	lsls	r3, r3, #18
 80053be:	4013      	ands	r3, r2
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	220f      	movs	r2, #15
 80053c8:	4393      	bics	r3, r2
 80053ca:	0019      	movs	r1, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053d2:	430a      	orrs	r2, r1
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4a3a      	ldr	r2, [pc, #232]	; (80054c4 <HAL_RCC_OscConfig+0x638>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 80053f6:	2180      	movs	r1, #128	; 0x80
 80053f8:	0449      	lsls	r1, r1, #17
 80053fa:	430a      	orrs	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fe:	f7fe fb19 	bl	8003a34 <HAL_GetTick>
 8005402:	0003      	movs	r3, r0
 8005404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005408:	f7fe fb14 	bl	8003a34 <HAL_GetTick>
 800540c:	0002      	movs	r2, r0
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e047      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800541a:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	049b      	lsls	r3, r3, #18
 8005422:	4013      	ands	r3, r2
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0x57c>
 8005426:	e03f      	b.n	80054a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800542e:	4924      	ldr	r1, [pc, #144]	; (80054c0 <HAL_RCC_OscConfig+0x634>)
 8005430:	400a      	ands	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fe fafe 	bl	8003a34 <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543e:	f7fe faf9 	bl	8003a34 <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e02c      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005450:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	049b      	lsls	r3, r3, #18
 8005458:	4013      	ands	r3, r2
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x5b2>
 800545c:	e024      	b.n	80054a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e01f      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005470:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <HAL_RCC_OscConfig+0x628>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	429a      	cmp	r2, r3
 8005484:	d10e      	bne.n	80054a4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	220f      	movs	r2, #15
 800548a:	401a      	ands	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	23f0      	movs	r3, #240	; 0xf0
 8005498:	039b      	lsls	r3, r3, #14
 800549a:	401a      	ands	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b008      	add	sp, #32
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40021000 	.word	0x40021000
 80054b8:	00001388 	.word	0x00001388
 80054bc:	efffffff 	.word	0xefffffff
 80054c0:	feffffff 	.word	0xfeffffff
 80054c4:	ffc2ffff 	.word	0xffc2ffff

080054c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0b3      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2201      	movs	r2, #1
 80054e2:	4013      	ands	r3, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d911      	bls.n	800550e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b58      	ldr	r3, [pc, #352]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	4393      	bics	r3, r2
 80054f2:	0019      	movs	r1, r3
 80054f4:	4b55      	ldr	r3, [pc, #340]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	4013      	ands	r3, r2
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d001      	beq.n	800550e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e09a      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2202      	movs	r2, #2
 8005514:	4013      	ands	r3, r2
 8005516:	d015      	beq.n	8005544 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2204      	movs	r2, #4
 800551e:	4013      	ands	r3, r2
 8005520:	d006      	beq.n	8005530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005522:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005528:	21e0      	movs	r1, #224	; 0xe0
 800552a:	00c9      	lsls	r1, r1, #3
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	22f0      	movs	r2, #240	; 0xf0
 8005536:	4393      	bics	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	4b44      	ldr	r3, [pc, #272]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	4013      	ands	r3, r2
 800554c:	d040      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	4013      	ands	r3, r2
 8005560:	d114      	bne.n	800558c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e06e      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	4b38      	ldr	r3, [pc, #224]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	049b      	lsls	r3, r3, #18
 8005576:	4013      	ands	r3, r2
 8005578:	d108      	bne.n	800558c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e062      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557e:	4b34      	ldr	r3, [pc, #208]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2202      	movs	r2, #2
 8005584:	4013      	ands	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e05b      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558c:	4b30      	ldr	r3, [pc, #192]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2203      	movs	r2, #3
 8005592:	4393      	bics	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a0:	f7fe fa48 	bl	8003a34 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a8:	e009      	b.n	80055be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055aa:	f7fe fa43 	bl	8003a34 <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_RCC_ClockConfig+0x18c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e042      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	220c      	movs	r2, #12
 80055c4:	401a      	ands	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1ec      	bne.n	80055aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2201      	movs	r2, #1
 80055d6:	4013      	ands	r3, r2
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d211      	bcs.n	8005602 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4393      	bics	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	4b18      	ldr	r3, [pc, #96]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_RCC_ClockConfig+0x184>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e020      	b.n	8005644 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	d009      	beq.n	8005620 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <HAL_RCC_ClockConfig+0x190>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005620:	f000 f820 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8005624:	0001      	movs	r1, r0
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <HAL_RCC_ClockConfig+0x188>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	220f      	movs	r2, #15
 800562e:	4013      	ands	r3, r2
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_RCC_ClockConfig+0x194>)
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	000a      	movs	r2, r1
 8005636:	40da      	lsrs	r2, r3
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x198>)
 800563a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800563c:	2000      	movs	r0, #0
 800563e:	f7fe f9b3 	bl	80039a8 <HAL_InitTick>
  
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40022000 	.word	0x40022000
 8005650:	40021000 	.word	0x40021000
 8005654:	00001388 	.word	0x00001388
 8005658:	fffff8ff 	.word	0xfffff8ff
 800565c:	0800a35c 	.word	0x0800a35c
 8005660:	20000030 	.word	0x20000030

08005664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b08f      	sub	sp, #60	; 0x3c
 8005668:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800566a:	2314      	movs	r3, #20
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005670:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005672:	c313      	stmia	r3!, {r0, r1, r4}
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005678:	1d3b      	adds	r3, r7, #4
 800567a:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_RCC_GetSysClockFreq+0xb8>)
 800567c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800567e:	c313      	stmia	r3!, {r0, r1, r4}
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005688:	2300      	movs	r3, #0
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HAL_RCC_GetSysClockFreq+0xbc>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	220c      	movs	r2, #12
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d002      	beq.n	80056ae <HAL_RCC_GetSysClockFreq+0x4a>
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d003      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x50>
 80056ac:	e02c      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056b2:	e02c      	b.n	800570e <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	0c9b      	lsrs	r3, r3, #18
 80056b8:	220f      	movs	r2, #15
 80056ba:	4013      	ands	r3, r2
 80056bc:	2214      	movs	r2, #20
 80056be:	18ba      	adds	r2, r7, r2
 80056c0:	5cd3      	ldrb	r3, [r2, r3]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	220f      	movs	r2, #15
 80056ca:	4013      	ands	r3, r2
 80056cc:	1d3a      	adds	r2, r7, #4
 80056ce:	5cd3      	ldrb	r3, [r2, r3]
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	025b      	lsls	r3, r3, #9
 80056d8:	4013      	ands	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056de:	4811      	ldr	r0, [pc, #68]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056e0:	f7fa fd2c 	bl	800013c <__udivsi3>
 80056e4:	0003      	movs	r3, r0
 80056e6:	001a      	movs	r2, r3
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	4353      	muls	r3, r2
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	e008      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056f2:	480c      	ldr	r0, [pc, #48]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056f4:	f7fa fd22 	bl	800013c <__udivsi3>
 80056f8:	0003      	movs	r3, r0
 80056fa:	001a      	movs	r2, r3
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	4353      	muls	r3, r2
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005706:	e002      	b.n	800570e <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800570c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b00f      	add	sp, #60	; 0x3c
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	0800a1fc 	.word	0x0800a1fc
 800571c:	0800a20c 	.word	0x0800a20c
 8005720:	40021000 	.word	0x40021000
 8005724:	007a1200 	.word	0x007a1200

08005728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <HAL_RCC_GetHCLKFreq+0x10>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	20000030 	.word	0x20000030

0800573c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005740:	f7ff fff2 	bl	8005728 <HAL_RCC_GetHCLKFreq>
 8005744:	0001      	movs	r1, r0
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	2207      	movs	r2, #7
 800574e:	4013      	ands	r3, r2
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005752:	5cd3      	ldrb	r3, [r2, r3]
 8005754:	40d9      	lsrs	r1, r3
 8005756:	000b      	movs	r3, r1
}    
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	40021000 	.word	0x40021000
 8005764:	0800a36c 	.word	0x0800a36c

08005768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	4013      	ands	r3, r2
 8005782:	d100      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005784:	e08e      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2017      	movs	r0, #23
 8005788:	183b      	adds	r3, r7, r0
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578e:	4b57      	ldr	r3, [pc, #348]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	055b      	lsls	r3, r3, #21
 8005796:	4013      	ands	r3, r2
 8005798:	d110      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800579a:	4b54      	ldr	r3, [pc, #336]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	0549      	lsls	r1, r1, #21
 80057a4:	430a      	orrs	r2, r1
 80057a6:	61da      	str	r2, [r3, #28]
 80057a8:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	055b      	lsls	r3, r3, #21
 80057b0:	4013      	ands	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b6:	183b      	adds	r3, r7, r0
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4013      	ands	r3, r2
 80057c6:	d11a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c8:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b48      	ldr	r3, [pc, #288]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	0049      	lsls	r1, r1, #1
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d6:	f7fe f92d 	bl	8003a34 <HAL_GetTick>
 80057da:	0003      	movs	r3, r0
 80057dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	e008      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e0:	f7fe f928 	bl	8003a34 <HAL_GetTick>
 80057e4:	0002      	movs	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	; 0x64
 80057ec:	d901      	bls.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e077      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	4013      	ands	r3, r2
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057fe:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	23c0      	movs	r3, #192	; 0xc0
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4013      	ands	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d034      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	23c0      	movs	r3, #192	; 0xc0
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4013      	ands	r3, r2
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d02c      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005826:	4013      	ands	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800582a:	4b30      	ldr	r3, [pc, #192]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800582c:	6a1a      	ldr	r2, [r3, #32]
 800582e:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0249      	lsls	r1, r1, #9
 8005834:	430a      	orrs	r2, r1
 8005836:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005838:	4b2c      	ldr	r3, [pc, #176]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	4b2b      	ldr	r3, [pc, #172]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800583e:	492e      	ldr	r1, [pc, #184]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005840:	400a      	ands	r2, r1
 8005842:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005844:	4b29      	ldr	r3, [pc, #164]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	4013      	ands	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fe f8ef 	bl	8003a34 <HAL_GetTick>
 8005856:	0003      	movs	r3, r0
 8005858:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585a:	e009      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585c:	f7fe f8ea 	bl	8003a34 <HAL_GetTick>
 8005860:	0002      	movs	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e038      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	2202      	movs	r2, #2
 8005876:	4013      	ands	r3, r2
 8005878:	d0f0      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587a:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005880:	4013      	ands	r3, r2
 8005882:	0019      	movs	r1, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	4b18      	ldr	r3, [pc, #96]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800588a:	430a      	orrs	r2, r1
 800588c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800588e:	2317      	movs	r3, #23
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800589e:	4918      	ldr	r1, [pc, #96]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80058a0:	400a      	ands	r2, r1
 80058a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	4013      	ands	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	2203      	movs	r2, #3
 80058b4:	4393      	bics	r3, r2
 80058b6:	0019      	movs	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058be:	430a      	orrs	r2, r1
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2220      	movs	r2, #32
 80058c8:	4013      	ands	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058cc:	4b07      	ldr	r3, [pc, #28]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	2210      	movs	r2, #16
 80058d2:	4393      	bics	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	4b04      	ldr	r3, [pc, #16]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b006      	add	sp, #24
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40007000 	.word	0x40007000
 80058f4:	fffffcff 	.word	0xfffffcff
 80058f8:	fffeffff 	.word	0xfffeffff
 80058fc:	00001388 	.word	0x00001388
 8005900:	efffffff 	.word	0xefffffff

08005904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e042      	b.n	800599c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	223d      	movs	r2, #61	; 0x3d
 800591a:	5c9b      	ldrb	r3, [r3, r2]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d107      	bne.n	8005932 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	223c      	movs	r2, #60	; 0x3c
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0018      	movs	r0, r3
 800592e:	f7fd fe95 	bl	800365c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	223d      	movs	r2, #61	; 0x3d
 8005936:	2102      	movs	r1, #2
 8005938:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	0019      	movs	r1, r3
 8005944:	0010      	movs	r0, r2
 8005946:	f000 fa85 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2246      	movs	r2, #70	; 0x46
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	223e      	movs	r2, #62	; 0x3e
 8005956:	2101      	movs	r1, #1
 8005958:	5499      	strb	r1, [r3, r2]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	223f      	movs	r2, #63	; 0x3f
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2240      	movs	r2, #64	; 0x40
 8005966:	2101      	movs	r1, #1
 8005968:	5499      	strb	r1, [r3, r2]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2241      	movs	r2, #65	; 0x41
 800596e:	2101      	movs	r1, #1
 8005970:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2242      	movs	r2, #66	; 0x42
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2243      	movs	r2, #67	; 0x43
 800597e:	2101      	movs	r1, #1
 8005980:	5499      	strb	r1, [r3, r2]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2244      	movs	r2, #68	; 0x44
 8005986:	2101      	movs	r1, #1
 8005988:	5499      	strb	r1, [r3, r2]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2245      	movs	r2, #69	; 0x45
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	223d      	movs	r2, #61	; 0x3d
 8005996:	2101      	movs	r1, #1
 8005998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	223d      	movs	r2, #61	; 0x3d
 80059b0:	5c9b      	ldrb	r3, [r3, r2]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d001      	beq.n	80059bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e035      	b.n	8005a28 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	223d      	movs	r2, #61	; 0x3d
 80059c0:	2102      	movs	r1, #2
 80059c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2101      	movs	r1, #1
 80059d0:	430a      	orrs	r2, r1
 80059d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <HAL_TIM_Base_Start_IT+0x8c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIM_Base_Start_IT+0x4e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <HAL_TIM_Base_Start_IT+0x90>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_Base_Start_IT+0x4e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <HAL_TIM_Base_Start_IT+0x94>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d111      	bne.n	8005a16 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2207      	movs	r2, #7
 80059fa:	4013      	ands	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d010      	beq.n	8005a26 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2101      	movs	r1, #1
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	e007      	b.n	8005a26 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2101      	movs	r1, #1
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b004      	add	sp, #16
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40014000 	.word	0x40014000

08005a3c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2101      	movs	r1, #1
 8005a50:	438a      	bics	r2, r1
 8005a52:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <HAL_TIM_Base_Stop_IT+0x54>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d10d      	bne.n	8005a7c <HAL_TIM_Base_Stop_IT+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <HAL_TIM_Base_Stop_IT+0x58>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_Base_Stop_IT+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2101      	movs	r1, #1
 8005a78:	438a      	bics	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	223d      	movs	r2, #61	; 0x3d
 8005a80:	2101      	movs	r1, #1
 8005a82:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b002      	add	sp, #8
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	00001111 	.word	0x00001111
 8005a94:	00000444 	.word	0x00000444

08005a98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e042      	b.n	8005b30 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	223d      	movs	r2, #61	; 0x3d
 8005aae:	5c9b      	ldrb	r3, [r3, r2]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	223c      	movs	r2, #60	; 0x3c
 8005aba:	2100      	movs	r1, #0
 8005abc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f000 f839 	bl	8005b38 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	223d      	movs	r2, #61	; 0x3d
 8005aca:	2102      	movs	r1, #2
 8005acc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	0010      	movs	r0, r2
 8005ada:	f000 f9bb 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2246      	movs	r2, #70	; 0x46
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	223e      	movs	r2, #62	; 0x3e
 8005aea:	2101      	movs	r1, #1
 8005aec:	5499      	strb	r1, [r3, r2]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	223f      	movs	r2, #63	; 0x3f
 8005af2:	2101      	movs	r1, #1
 8005af4:	5499      	strb	r1, [r3, r2]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2240      	movs	r2, #64	; 0x40
 8005afa:	2101      	movs	r1, #1
 8005afc:	5499      	strb	r1, [r3, r2]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2241      	movs	r2, #65	; 0x41
 8005b02:	2101      	movs	r1, #1
 8005b04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2242      	movs	r2, #66	; 0x42
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2243      	movs	r2, #67	; 0x43
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2244      	movs	r2, #68	; 0x44
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	5499      	strb	r1, [r3, r2]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2245      	movs	r2, #69	; 0x45
 8005b22:	2101      	movs	r1, #1
 8005b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	223d      	movs	r2, #61	; 0x3d
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2202      	movs	r2, #2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d124      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2202      	movs	r2, #2
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d11d      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2203      	movs	r2, #3
 8005b72:	4252      	negs	r2, r2
 8005b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2203      	movs	r2, #3
 8005b84:	4013      	ands	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f000 f94a 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005b90:	e007      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fd fc81 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f000 f949 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d125      	bne.n	8005c02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d11e      	bne.n	8005c02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2205      	movs	r2, #5
 8005bca:	4252      	negs	r2, r2
 8005bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	23c0      	movs	r3, #192	; 0xc0
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4013      	ands	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 f91d 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005bea:	e007      	b.n	8005bfc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7fd fc54 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f91c 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d124      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2208      	movs	r2, #8
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d11d      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2209      	movs	r2, #9
 8005c24:	4252      	negs	r2, r2
 8005c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	2203      	movs	r2, #3
 8005c36:	4013      	ands	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 f8f1 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005c42:	e007      	b.n	8005c54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	0018      	movs	r0, r3
 8005c48:	f7fd fc28 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f8f0 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2210      	movs	r2, #16
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d125      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2210      	movs	r2, #16
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	d11e      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2211      	movs	r2, #17
 8005c7c:	4252      	negs	r2, r2
 8005c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2208      	movs	r2, #8
 8005c84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	23c0      	movs	r3, #192	; 0xc0
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4013      	ands	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f8c4 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e007      	b.n	8005cae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fd fbfb 	bl	800349c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 f8c3 	bl	8005e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d108      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	4252      	negs	r2, r2
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fd fbbb 	bl	8003458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b80      	cmp	r3, #128	; 0x80
 8005cee:	d10f      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d108      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2281      	movs	r2, #129	; 0x81
 8005d04:	4252      	negs	r2, r2
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fb7a 	bl	8006404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2240      	movs	r2, #64	; 0x40
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d10f      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d108      	bne.n	8005d3e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2241      	movs	r2, #65	; 0x41
 8005d32:	4252      	negs	r2, r2
 8005d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f000 f883 	bl	8005e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2220      	movs	r2, #32
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d10f      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d108      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2221      	movs	r2, #33	; 0x21
 8005d60:	4252      	negs	r2, r2
 8005d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	0018      	movs	r0, r3
 8005d68:	f000 fb44 	bl	80063f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b002      	add	sp, #8
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d80:	2317      	movs	r3, #23
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	223c      	movs	r2, #60	; 0x3c
 8005d8c:	5c9b      	ldrb	r3, [r3, r2]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_TIM_OC_ConfigChannel+0x22>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e042      	b.n	8005e1c <HAL_TIM_OC_ConfigChannel+0xa8>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	223c      	movs	r2, #60	; 0x3c
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	d027      	beq.n	8005df4 <HAL_TIM_OC_ConfigChannel+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d82c      	bhi.n	8005e04 <HAL_TIM_OC_ConfigChannel+0x90>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d019      	beq.n	8005de4 <HAL_TIM_OC_ConfigChannel+0x70>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d826      	bhi.n	8005e04 <HAL_TIM_OC_ConfigChannel+0x90>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_TIM_OC_ConfigChannel+0x50>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d008      	beq.n	8005dd4 <HAL_TIM_OC_ConfigChannel+0x60>
 8005dc2:	e01f      	b.n	8005e04 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	0011      	movs	r1, r2
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f000 f8b7 	bl	8005f40 <TIM_OC1_SetConfig>
      break;
 8005dd2:	e01c      	b.n	8005e0e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	0011      	movs	r1, r2
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f000 f937 	bl	8006050 <TIM_OC2_SetConfig>
      break;
 8005de2:	e014      	b.n	8005e0e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	0011      	movs	r1, r2
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 f9b3 	bl	8006158 <TIM_OC3_SetConfig>
      break;
 8005df2:	e00c      	b.n	8005e0e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	0011      	movs	r1, r2
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 fa31 	bl	8006264 <TIM_OC4_SetConfig>
      break;
 8005e02:	e004      	b.n	8005e0e <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005e04:	2317      	movs	r3, #23
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
      break;
 8005e0c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	223c      	movs	r2, #60	; 0x3c
 8005e12:	2100      	movs	r1, #0
 8005e14:	5499      	strb	r1, [r3, r2]

  return status;
 8005e16:	2317      	movs	r3, #23
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	781b      	ldrb	r3, [r3, #0]
}
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b006      	add	sp, #24
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b002      	add	sp, #8
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a2f      	ldr	r2, [pc, #188]	; (8005f24 <TIM_Base_SetConfig+0xd0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_Base_SetConfig+0x20>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a2e      	ldr	r2, [pc, #184]	; (8005f28 <TIM_Base_SetConfig+0xd4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2270      	movs	r2, #112	; 0x70
 8005e78:	4393      	bics	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <TIM_Base_SetConfig+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <TIM_Base_SetConfig+0x62>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <TIM_Base_SetConfig+0xd4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_Base_SetConfig+0x62>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <TIM_Base_SetConfig+0xd8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_Base_SetConfig+0x62>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a23      	ldr	r2, [pc, #140]	; (8005f30 <TIM_Base_SetConfig+0xdc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_Base_SetConfig+0x62>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <TIM_Base_SetConfig+0xe0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_Base_SetConfig+0x62>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d108      	bne.n	8005ec8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a20      	ldr	r2, [pc, #128]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2280      	movs	r2, #128	; 0x80
 8005ecc:	4393      	bics	r3, r2
 8005ece:	001a      	movs	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <TIM_Base_SetConfig+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00b      	beq.n	8005f0e <TIM_Base_SetConfig+0xba>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a0d      	ldr	r2, [pc, #52]	; (8005f30 <TIM_Base_SetConfig+0xdc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d007      	beq.n	8005f0e <TIM_Base_SetConfig+0xba>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a0c      	ldr	r2, [pc, #48]	; (8005f34 <TIM_Base_SetConfig+0xe0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d003      	beq.n	8005f0e <TIM_Base_SetConfig+0xba>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a0b      	ldr	r2, [pc, #44]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d103      	bne.n	8005f16 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	615a      	str	r2, [r3, #20]
}
 8005f1c:	46c0      	nop			; (mov r8, r8)
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b004      	add	sp, #16
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40002000 	.word	0x40002000
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	fffffcff 	.word	0xfffffcff

08005f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4393      	bics	r3, r2
 8005f52:	001a      	movs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2270      	movs	r2, #112	; 0x70
 8005f6e:	4393      	bics	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2203      	movs	r2, #3
 8005f76:	4393      	bics	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2202      	movs	r2, #2
 8005f88:	4393      	bics	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a27      	ldr	r2, [pc, #156]	; (8006038 <TIM_OC1_SetConfig+0xf8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_OC1_SetConfig+0x76>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a26      	ldr	r2, [pc, #152]	; (800603c <TIM_OC1_SetConfig+0xfc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_OC1_SetConfig+0x76>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a25      	ldr	r2, [pc, #148]	; (8006040 <TIM_OC1_SetConfig+0x100>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC1_SetConfig+0x76>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a24      	ldr	r2, [pc, #144]	; (8006044 <TIM_OC1_SetConfig+0x104>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10c      	bne.n	8005fd0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	4393      	bics	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	4393      	bics	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a19      	ldr	r2, [pc, #100]	; (8006038 <TIM_OC1_SetConfig+0xf8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_OC1_SetConfig+0xb0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a18      	ldr	r2, [pc, #96]	; (800603c <TIM_OC1_SetConfig+0xfc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_OC1_SetConfig+0xb0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a17      	ldr	r2, [pc, #92]	; (8006040 <TIM_OC1_SetConfig+0x100>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC1_SetConfig+0xb0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a16      	ldr	r2, [pc, #88]	; (8006044 <TIM_OC1_SetConfig+0x104>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d111      	bne.n	8006014 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <TIM_OC1_SetConfig+0x108>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4a14      	ldr	r2, [pc, #80]	; (800604c <TIM_OC1_SetConfig+0x10c>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b006      	add	sp, #24
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800
 8006048:	fffffeff 	.word	0xfffffeff
 800604c:	fffffdff 	.word	0xfffffdff

08006050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	2210      	movs	r2, #16
 8006060:	4393      	bics	r3, r2
 8006062:	001a      	movs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a2e      	ldr	r2, [pc, #184]	; (8006138 <TIM_OC2_SetConfig+0xe8>)
 800607e:	4013      	ands	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a2d      	ldr	r2, [pc, #180]	; (800613c <TIM_OC2_SetConfig+0xec>)
 8006086:	4013      	ands	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2220      	movs	r2, #32
 800609a:	4393      	bics	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a24      	ldr	r2, [pc, #144]	; (8006140 <TIM_OC2_SetConfig+0xf0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10d      	bne.n	80060ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	4393      	bics	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2240      	movs	r2, #64	; 0x40
 80060ca:	4393      	bics	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <TIM_OC2_SetConfig+0xf0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_OC2_SetConfig+0x9e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <TIM_OC2_SetConfig+0xf4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_OC2_SetConfig+0x9e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a19      	ldr	r2, [pc, #100]	; (8006148 <TIM_OC2_SetConfig+0xf8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC2_SetConfig+0x9e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a18      	ldr	r2, [pc, #96]	; (800614c <TIM_OC2_SetConfig+0xfc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d113      	bne.n	8006116 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <TIM_OC2_SetConfig+0x100>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <TIM_OC2_SetConfig+0x104>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b006      	add	sp, #24
 8006136:	bd80      	pop	{r7, pc}
 8006138:	ffff8fff 	.word	0xffff8fff
 800613c:	fffffcff 	.word	0xfffffcff
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400
 800614c:	40014800 	.word	0x40014800
 8006150:	fffffbff 	.word	0xfffffbff
 8006154:	fffff7ff 	.word	0xfffff7ff

08006158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	4a35      	ldr	r2, [pc, #212]	; (800623c <TIM_OC3_SetConfig+0xe4>)
 8006168:	401a      	ands	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2270      	movs	r2, #112	; 0x70
 8006184:	4393      	bics	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2203      	movs	r2, #3
 800618c:	4393      	bics	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4a28      	ldr	r2, [pc, #160]	; (8006240 <TIM_OC3_SetConfig+0xe8>)
 800619e:	4013      	ands	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a24      	ldr	r2, [pc, #144]	; (8006244 <TIM_OC3_SetConfig+0xec>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10d      	bne.n	80061d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4a23      	ldr	r2, [pc, #140]	; (8006248 <TIM_OC3_SetConfig+0xf0>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <TIM_OC3_SetConfig+0xf4>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <TIM_OC3_SetConfig+0xec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_OC3_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <TIM_OC3_SetConfig+0xf8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_OC3_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <TIM_OC3_SetConfig+0xfc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_OC3_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <TIM_OC3_SetConfig+0x100>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d113      	bne.n	800621a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <TIM_OC3_SetConfig+0x104>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4a18      	ldr	r2, [pc, #96]	; (8006260 <TIM_OC3_SetConfig+0x108>)
 80061fe:	4013      	ands	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	621a      	str	r2, [r3, #32]
}
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	46bd      	mov	sp, r7
 8006238:	b006      	add	sp, #24
 800623a:	bd80      	pop	{r7, pc}
 800623c:	fffffeff 	.word	0xfffffeff
 8006240:	fffffdff 	.word	0xfffffdff
 8006244:	40012c00 	.word	0x40012c00
 8006248:	fffff7ff 	.word	0xfffff7ff
 800624c:	fffffbff 	.word	0xfffffbff
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	ffffefff 	.word	0xffffefff
 8006260:	ffffdfff 	.word	0xffffdfff

08006264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	4a28      	ldr	r2, [pc, #160]	; (8006314 <TIM_OC4_SetConfig+0xb0>)
 8006274:	401a      	ands	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <TIM_OC4_SetConfig+0xb4>)
 8006290:	4013      	ands	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <TIM_OC4_SetConfig+0xb8>)
 8006298:	4013      	ands	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <TIM_OC4_SetConfig+0xbc>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	031b      	lsls	r3, r3, #12
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <TIM_OC4_SetConfig+0xc0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_OC4_SetConfig+0x78>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a18      	ldr	r2, [pc, #96]	; (8006328 <TIM_OC4_SetConfig+0xc4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_OC4_SetConfig+0x78>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a17      	ldr	r2, [pc, #92]	; (800632c <TIM_OC4_SetConfig+0xc8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x78>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <TIM_OC4_SetConfig+0xcc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d109      	bne.n	80062f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4a15      	ldr	r2, [pc, #84]	; (8006334 <TIM_OC4_SetConfig+0xd0>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	46bd      	mov	sp, r7
 800630e:	b006      	add	sp, #24
 8006310:	bd80      	pop	{r7, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	ffffefff 	.word	0xffffefff
 8006318:	ffff8fff 	.word	0xffff8fff
 800631c:	fffffcff 	.word	0xfffffcff
 8006320:	ffffdfff 	.word	0xffffdfff
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800
 8006334:	ffffbfff 	.word	0xffffbfff

08006338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	223c      	movs	r2, #60	; 0x3c
 800634a:	5c9b      	ldrb	r3, [r3, r2]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006350:	2302      	movs	r3, #2
 8006352:	e03e      	b.n	80063d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	223c      	movs	r2, #60	; 0x3c
 8006358:	2101      	movs	r1, #1
 800635a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	4393      	bics	r3, r2
 8006362:	001a      	movs	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006370:	401a      	ands	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800637e:	401a      	ands	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800638c:	401a      	ands	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800639a:	401a      	ands	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4a11      	ldr	r2, [pc, #68]	; (80063ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80063a8:	401a      	ands	r2, r3
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a0e      	ldr	r2, [pc, #56]	; (80063f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80063b6:	401a      	ands	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	223c      	movs	r2, #60	; 0x3c
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b004      	add	sp, #16
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	fffffcff 	.word	0xfffffcff
 80063e0:	fffffbff 	.word	0xfffffbff
 80063e4:	fffff7ff 	.word	0xfffff7ff
 80063e8:	ffffefff 	.word	0xffffefff
 80063ec:	ffffdfff 	.word	0xffffdfff
 80063f0:	ffffbfff 	.word	0xffffbfff

080063f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46bd      	mov	sp, r7
 8006410:	b002      	add	sp, #8
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e044      	b.n	80064b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2274      	movs	r2, #116	; 0x74
 8006432:	2100      	movs	r1, #0
 8006434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0018      	movs	r0, r3
 800643a:	f7fd f937 	bl	80036ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2224      	movs	r2, #36	; 0x24
 8006442:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2101      	movs	r1, #1
 8006450:	438a      	bics	r2, r1
 8006452:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	0018      	movs	r0, r3
 8006458:	f000 f8da 	bl	8006610 <UART_SetConfig>
 800645c:	0003      	movs	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e024      	b.n	80064b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0018      	movs	r0, r3
 8006472:	f000 fa3d 	bl	80068f0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	490d      	ldr	r1, [pc, #52]	; (80064b8 <HAL_UART_Init+0xa4>)
 8006482:	400a      	ands	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2108      	movs	r1, #8
 8006492:	438a      	bics	r2, r1
 8006494:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	430a      	orrs	r2, r1
 80064a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 fad5 	bl	8006a58 <UART_CheckIdleState>
 80064ae:	0003      	movs	r3, r0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	fffff7ff 	.word	0xfffff7ff

080064bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	1dbb      	adds	r3, r7, #6
 80064ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d000      	beq.n	80064d6 <HAL_UART_Transmit+0x1a>
 80064d4:	e096      	b.n	8006604 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_UART_Transmit+0x28>
 80064dc:	1dbb      	adds	r3, r7, #6
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e08e      	b.n	8006606 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d109      	bne.n	8006508 <HAL_UART_Transmit+0x4c>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d105      	bne.n	8006508 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2201      	movs	r2, #1
 8006500:	4013      	ands	r3, r2
 8006502:	d001      	beq.n	8006508 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e07e      	b.n	8006606 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2274      	movs	r2, #116	; 0x74
 800650c:	5c9b      	ldrb	r3, [r3, r2]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_UART_Transmit+0x5a>
 8006512:	2302      	movs	r3, #2
 8006514:	e077      	b.n	8006606 <HAL_UART_Transmit+0x14a>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2274      	movs	r2, #116	; 0x74
 800651a:	2101      	movs	r1, #1
 800651c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2280      	movs	r2, #128	; 0x80
 8006522:	2100      	movs	r1, #0
 8006524:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2221      	movs	r2, #33	; 0x21
 800652a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800652c:	f7fd fa82 	bl	8003a34 <HAL_GetTick>
 8006530:	0003      	movs	r3, r0
 8006532:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1dba      	adds	r2, r7, #6
 8006538:	2150      	movs	r1, #80	; 0x50
 800653a:	8812      	ldrh	r2, [r2, #0]
 800653c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1dba      	adds	r2, r7, #6
 8006542:	2152      	movs	r1, #82	; 0x52
 8006544:	8812      	ldrh	r2, [r2, #0]
 8006546:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	015b      	lsls	r3, r3, #5
 8006550:	429a      	cmp	r2, r3
 8006552:	d108      	bne.n	8006566 <HAL_UART_Transmit+0xaa>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e003      	b.n	800656e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2274      	movs	r2, #116	; 0x74
 8006572:	2100      	movs	r1, #0
 8006574:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006576:	e02d      	b.n	80065d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	0013      	movs	r3, r2
 8006582:	2200      	movs	r2, #0
 8006584:	2180      	movs	r1, #128	; 0x80
 8006586:	f000 faaf 	bl	8006ae8 <UART_WaitOnFlagUntilTimeout>
 800658a:	1e03      	subs	r3, r0, #0
 800658c:	d001      	beq.n	8006592 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e039      	b.n	8006606 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	05d2      	lsls	r2, r2, #23
 80065a2:	0dd2      	lsrs	r2, r2, #23
 80065a4:	b292      	uxth	r2, r2
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	3302      	adds	r3, #2
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	e008      	b.n	80065c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	b292      	uxth	r2, r2
 80065ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2252      	movs	r2, #82	; 0x52
 80065c6:	5a9b      	ldrh	r3, [r3, r2]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b299      	uxth	r1, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2252      	movs	r2, #82	; 0x52
 80065d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2252      	movs	r2, #82	; 0x52
 80065d8:	5a9b      	ldrh	r3, [r3, r2]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1cb      	bne.n	8006578 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	0013      	movs	r3, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	2140      	movs	r1, #64	; 0x40
 80065ee:	f000 fa7b 	bl	8006ae8 <UART_WaitOnFlagUntilTimeout>
 80065f2:	1e03      	subs	r3, r0, #0
 80065f4:	d001      	beq.n	80065fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e005      	b.n	8006606 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	0018      	movs	r0, r3
 8006608:	46bd      	mov	sp, r7
 800660a:	b008      	add	sp, #32
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006618:	231e      	movs	r3, #30
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4aa1      	ldr	r2, [pc, #644]	; (80068c4 <UART_SetConfig+0x2b4>)
 8006640:	4013      	ands	r3, r2
 8006642:	0019      	movs	r1, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	430a      	orrs	r2, r1
 800664c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4a9c      	ldr	r2, [pc, #624]	; (80068c8 <UART_SetConfig+0x2b8>)
 8006656:	4013      	ands	r3, r2
 8006658:	0019      	movs	r1, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4a93      	ldr	r2, [pc, #588]	; (80068cc <UART_SetConfig+0x2bc>)
 800667e:	4013      	ands	r3, r2
 8006680:	0019      	movs	r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a8f      	ldr	r2, [pc, #572]	; (80068d0 <UART_SetConfig+0x2c0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d127      	bne.n	80066e6 <UART_SetConfig+0xd6>
 8006696:	4b8f      	ldr	r3, [pc, #572]	; (80068d4 <UART_SetConfig+0x2c4>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	2203      	movs	r2, #3
 800669c:	4013      	ands	r3, r2
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d00d      	beq.n	80066be <UART_SetConfig+0xae>
 80066a2:	d81b      	bhi.n	80066dc <UART_SetConfig+0xcc>
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d014      	beq.n	80066d2 <UART_SetConfig+0xc2>
 80066a8:	d818      	bhi.n	80066dc <UART_SetConfig+0xcc>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <UART_SetConfig+0xa4>
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d00a      	beq.n	80066c8 <UART_SetConfig+0xb8>
 80066b2:	e013      	b.n	80066dc <UART_SetConfig+0xcc>
 80066b4:	231f      	movs	r3, #31
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	e049      	b.n	8006752 <UART_SetConfig+0x142>
 80066be:	231f      	movs	r3, #31
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2202      	movs	r2, #2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e044      	b.n	8006752 <UART_SetConfig+0x142>
 80066c8:	231f      	movs	r3, #31
 80066ca:	18fb      	adds	r3, r7, r3
 80066cc:	2204      	movs	r2, #4
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	e03f      	b.n	8006752 <UART_SetConfig+0x142>
 80066d2:	231f      	movs	r3, #31
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	2208      	movs	r2, #8
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e03a      	b.n	8006752 <UART_SetConfig+0x142>
 80066dc:	231f      	movs	r3, #31
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	2210      	movs	r2, #16
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	e035      	b.n	8006752 <UART_SetConfig+0x142>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a7b      	ldr	r2, [pc, #492]	; (80068d8 <UART_SetConfig+0x2c8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d104      	bne.n	80066fa <UART_SetConfig+0xea>
 80066f0:	231f      	movs	r3, #31
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e02b      	b.n	8006752 <UART_SetConfig+0x142>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a77      	ldr	r2, [pc, #476]	; (80068dc <UART_SetConfig+0x2cc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d104      	bne.n	800670e <UART_SetConfig+0xfe>
 8006704:	231f      	movs	r3, #31
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e021      	b.n	8006752 <UART_SetConfig+0x142>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a73      	ldr	r2, [pc, #460]	; (80068e0 <UART_SetConfig+0x2d0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d104      	bne.n	8006722 <UART_SetConfig+0x112>
 8006718:	231f      	movs	r3, #31
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	e017      	b.n	8006752 <UART_SetConfig+0x142>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6f      	ldr	r2, [pc, #444]	; (80068e4 <UART_SetConfig+0x2d4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d104      	bne.n	8006736 <UART_SetConfig+0x126>
 800672c:	231f      	movs	r3, #31
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e00d      	b.n	8006752 <UART_SetConfig+0x142>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6b      	ldr	r2, [pc, #428]	; (80068e8 <UART_SetConfig+0x2d8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d104      	bne.n	800674a <UART_SetConfig+0x13a>
 8006740:	231f      	movs	r3, #31
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e003      	b.n	8006752 <UART_SetConfig+0x142>
 800674a:	231f      	movs	r3, #31
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	2210      	movs	r2, #16
 8006750:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	429a      	cmp	r2, r3
 800675c:	d15d      	bne.n	800681a <UART_SetConfig+0x20a>
  {
    switch (clocksource)
 800675e:	231f      	movs	r3, #31
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d015      	beq.n	8006794 <UART_SetConfig+0x184>
 8006768:	dc18      	bgt.n	800679c <UART_SetConfig+0x18c>
 800676a:	2b04      	cmp	r3, #4
 800676c:	d00d      	beq.n	800678a <UART_SetConfig+0x17a>
 800676e:	dc15      	bgt.n	800679c <UART_SetConfig+0x18c>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <UART_SetConfig+0x16a>
 8006774:	2b02      	cmp	r3, #2
 8006776:	d005      	beq.n	8006784 <UART_SetConfig+0x174>
 8006778:	e010      	b.n	800679c <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677a:	f7fe ffdf 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 800677e:	0003      	movs	r3, r0
 8006780:	61bb      	str	r3, [r7, #24]
        break;
 8006782:	e012      	b.n	80067aa <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <UART_SetConfig+0x2dc>)
 8006786:	61bb      	str	r3, [r7, #24]
        break;
 8006788:	e00f      	b.n	80067aa <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678a:	f7fe ff6b 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 800678e:	0003      	movs	r3, r0
 8006790:	61bb      	str	r3, [r7, #24]
        break;
 8006792:	e00a      	b.n	80067aa <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	61bb      	str	r3, [r7, #24]
        break;
 800679a:	e006      	b.n	80067aa <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067a0:	231e      	movs	r3, #30
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	2201      	movs	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
        break;
 80067a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d100      	bne.n	80067b2 <UART_SetConfig+0x1a2>
 80067b0:	e07b      	b.n	80068aa <UART_SetConfig+0x29a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	005a      	lsls	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	18d2      	adds	r2, r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	0019      	movs	r1, r3
 80067c4:	0010      	movs	r0, r2
 80067c6:	f7f9 fcb9 	bl	800013c <__udivsi3>
 80067ca:	0003      	movs	r3, r0
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b0f      	cmp	r3, #15
 80067d4:	d91c      	bls.n	8006810 <UART_SetConfig+0x200>
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	025b      	lsls	r3, r3, #9
 80067dc:	429a      	cmp	r2, r3
 80067de:	d217      	bcs.n	8006810 <UART_SetConfig+0x200>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	200e      	movs	r0, #14
 80067e6:	183b      	adds	r3, r7, r0
 80067e8:	210f      	movs	r1, #15
 80067ea:	438a      	bics	r2, r1
 80067ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2207      	movs	r2, #7
 80067f6:	4013      	ands	r3, r2
 80067f8:	b299      	uxth	r1, r3
 80067fa:	183b      	adds	r3, r7, r0
 80067fc:	183a      	adds	r2, r7, r0
 80067fe:	8812      	ldrh	r2, [r2, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	183a      	adds	r2, r7, r0
 800680a:	8812      	ldrh	r2, [r2, #0]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e04c      	b.n	80068aa <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	231e      	movs	r3, #30
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	e047      	b.n	80068aa <UART_SetConfig+0x29a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681a:	231f      	movs	r3, #31
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d015      	beq.n	8006850 <UART_SetConfig+0x240>
 8006824:	dc18      	bgt.n	8006858 <UART_SetConfig+0x248>
 8006826:	2b04      	cmp	r3, #4
 8006828:	d00d      	beq.n	8006846 <UART_SetConfig+0x236>
 800682a:	dc15      	bgt.n	8006858 <UART_SetConfig+0x248>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <UART_SetConfig+0x226>
 8006830:	2b02      	cmp	r3, #2
 8006832:	d005      	beq.n	8006840 <UART_SetConfig+0x230>
 8006834:	e010      	b.n	8006858 <UART_SetConfig+0x248>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006836:	f7fe ff81 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 800683a:	0003      	movs	r3, r0
 800683c:	61bb      	str	r3, [r7, #24]
        break;
 800683e:	e012      	b.n	8006866 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <UART_SetConfig+0x2dc>)
 8006842:	61bb      	str	r3, [r7, #24]
        break;
 8006844:	e00f      	b.n	8006866 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fe ff0d 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 800684a:	0003      	movs	r3, r0
 800684c:	61bb      	str	r3, [r7, #24]
        break;
 800684e:	e00a      	b.n	8006866 <UART_SetConfig+0x256>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	61bb      	str	r3, [r7, #24]
        break;
 8006856:	e006      	b.n	8006866 <UART_SetConfig+0x256>
      default:
        pclk = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800685c:	231e      	movs	r3, #30
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	2201      	movs	r2, #1
 8006862:	701a      	strb	r2, [r3, #0]
        break;
 8006864:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01e      	beq.n	80068aa <UART_SetConfig+0x29a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	085a      	lsrs	r2, r3, #1
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	18d2      	adds	r2, r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	0019      	movs	r1, r3
 800687c:	0010      	movs	r0, r2
 800687e:	f7f9 fc5d 	bl	800013c <__udivsi3>
 8006882:	0003      	movs	r3, r0
 8006884:	b29b      	uxth	r3, r3
 8006886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d909      	bls.n	80068a2 <UART_SetConfig+0x292>
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	025b      	lsls	r3, r3, #9
 8006894:	429a      	cmp	r2, r3
 8006896:	d204      	bcs.n	80068a2 <UART_SetConfig+0x292>
      {
        huart->Instance->BRR = usartdiv;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	60da      	str	r2, [r3, #12]
 80068a0:	e003      	b.n	80068aa <UART_SetConfig+0x29a>
      }
      else
      {
        ret = HAL_ERROR;
 80068a2:	231e      	movs	r3, #30
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068b6:	231e      	movs	r3, #30
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	781b      	ldrb	r3, [r3, #0]
}
 80068bc:	0018      	movs	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	b008      	add	sp, #32
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	efff69f3 	.word	0xefff69f3
 80068c8:	ffffcfff 	.word	0xffffcfff
 80068cc:	fffff4ff 	.word	0xfffff4ff
 80068d0:	40013800 	.word	0x40013800
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40004400 	.word	0x40004400
 80068dc:	40004800 	.word	0x40004800
 80068e0:	40004c00 	.word	0x40004c00
 80068e4:	40005000 	.word	0x40005000
 80068e8:	40011400 	.word	0x40011400
 80068ec:	007a1200 	.word	0x007a1200

080068f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	2201      	movs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	d00b      	beq.n	800691a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a4a      	ldr	r2, [pc, #296]	; (8006a34 <UART_AdvFeatureConfig+0x144>)
 800690a:	4013      	ands	r3, r2
 800690c:	0019      	movs	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2202      	movs	r2, #2
 8006920:	4013      	ands	r3, r2
 8006922:	d00b      	beq.n	800693c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4a43      	ldr	r2, [pc, #268]	; (8006a38 <UART_AdvFeatureConfig+0x148>)
 800692c:	4013      	ands	r3, r2
 800692e:	0019      	movs	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2204      	movs	r2, #4
 8006942:	4013      	ands	r3, r2
 8006944:	d00b      	beq.n	800695e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a3b      	ldr	r2, [pc, #236]	; (8006a3c <UART_AdvFeatureConfig+0x14c>)
 800694e:	4013      	ands	r3, r2
 8006950:	0019      	movs	r1, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	2208      	movs	r2, #8
 8006964:	4013      	ands	r3, r2
 8006966:	d00b      	beq.n	8006980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	4a34      	ldr	r2, [pc, #208]	; (8006a40 <UART_AdvFeatureConfig+0x150>)
 8006970:	4013      	ands	r3, r2
 8006972:	0019      	movs	r1, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2210      	movs	r2, #16
 8006986:	4013      	ands	r3, r2
 8006988:	d00b      	beq.n	80069a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	4a2c      	ldr	r2, [pc, #176]	; (8006a44 <UART_AdvFeatureConfig+0x154>)
 8006992:	4013      	ands	r3, r2
 8006994:	0019      	movs	r1, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2220      	movs	r2, #32
 80069a8:	4013      	ands	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4a25      	ldr	r2, [pc, #148]	; (8006a48 <UART_AdvFeatureConfig+0x158>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	0019      	movs	r1, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	2240      	movs	r2, #64	; 0x40
 80069ca:	4013      	ands	r3, r2
 80069cc:	d01d      	beq.n	8006a0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	4a1d      	ldr	r2, [pc, #116]	; (8006a4c <UART_AdvFeatureConfig+0x15c>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ea:	2380      	movs	r3, #128	; 0x80
 80069ec:	035b      	lsls	r3, r3, #13
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d10b      	bne.n	8006a0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <UART_AdvFeatureConfig+0x160>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	0019      	movs	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	4013      	ands	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4a0e      	ldr	r2, [pc, #56]	; (8006a54 <UART_AdvFeatureConfig+0x164>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	0019      	movs	r1, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b002      	add	sp, #8
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	fffdffff 	.word	0xfffdffff
 8006a38:	fffeffff 	.word	0xfffeffff
 8006a3c:	fffbffff 	.word	0xfffbffff
 8006a40:	ffff7fff 	.word	0xffff7fff
 8006a44:	ffffefff 	.word	0xffffefff
 8006a48:	ffffdfff 	.word	0xffffdfff
 8006a4c:	ffefffff 	.word	0xffefffff
 8006a50:	ff9fffff 	.word	0xff9fffff
 8006a54:	fff7ffff 	.word	0xfff7ffff

08006a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2280      	movs	r2, #128	; 0x80
 8006a64:	2100      	movs	r1, #0
 8006a66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a68:	f7fc ffe4 	bl	8003a34 <HAL_GetTick>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2208      	movs	r2, #8
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d10c      	bne.n	8006a98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2280      	movs	r2, #128	; 0x80
 8006a82:	0391      	lsls	r1, r2, #14
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <UART_CheckIdleState+0x8c>)
 8006a88:	9200      	str	r2, [sp, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f000 f82c 	bl	8006ae8 <UART_WaitOnFlagUntilTimeout>
 8006a90:	1e03      	subs	r3, r0, #0
 8006a92:	d001      	beq.n	8006a98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e021      	b.n	8006adc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d10c      	bne.n	8006ac0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	03d1      	lsls	r1, r2, #15
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4a0d      	ldr	r2, [pc, #52]	; (8006ae4 <UART_CheckIdleState+0x8c>)
 8006ab0:	9200      	str	r2, [sp, #0]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f000 f818 	bl	8006ae8 <UART_WaitOnFlagUntilTimeout>
 8006ab8:	1e03      	subs	r3, r0, #0
 8006aba:	d001      	beq.n	8006ac0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e00d      	b.n	8006adc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2274      	movs	r2, #116	; 0x74
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b004      	add	sp, #16
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	01ffffff 	.word	0x01ffffff

08006ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b094      	sub	sp, #80	; 0x50
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	1dfb      	adds	r3, r7, #7
 8006af6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af8:	e0a3      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006afc:	3301      	adds	r3, #1
 8006afe:	d100      	bne.n	8006b02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006b00:	e09f      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b02:	f7fc ff97 	bl	8003a34 <HAL_GetTick>
 8006b06:	0002      	movs	r2, r0
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d13d      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b18:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b20:	647b      	str	r3, [r7, #68]	; 0x44
 8006b22:	2301      	movs	r3, #1
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	f383 8810 	msr	PRIMASK, r3
}
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	494c      	ldr	r1, [pc, #304]	; (8006c6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006b3a:	400a      	ands	r2, r1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	f383 8810 	msr	PRIMASK, r3
}
 8006b48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40
 8006b54:	2301      	movs	r3, #1
 8006b56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	f383 8810 	msr	PRIMASK, r3
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	438a      	bics	r2, r1
 8006b6e:	609a      	str	r2, [r3, #8]
 8006b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	f383 8810 	msr	PRIMASK, r3
}
 8006b7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2274      	movs	r2, #116	; 0x74
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e067      	b.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d050      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69da      	ldr	r2, [r3, #28]
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	401a      	ands	r2, r3
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d146      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	0112      	lsls	r2, r2, #4
 8006bbc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc2:	613b      	str	r3, [r7, #16]
  return(result);
 8006bc4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f383 8810 	msr	PRIMASK, r3
}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4923      	ldr	r1, [pc, #140]	; (8006c6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006be0:	400a      	ands	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f383 8810 	msr	PRIMASK, r3
}
 8006bee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bf6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f383 8810 	msr	PRIMASK, r3
}
 8006c04:	46c0      	nop			; (mov r8, r8)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2101      	movs	r1, #1
 8006c12:	438a      	bics	r2, r1
 8006c14:	609a      	str	r2, [r3, #8]
 8006c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	f383 8810 	msr	PRIMASK, r3
}
 8006c20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2280      	movs	r2, #128	; 0x80
 8006c32:	2120      	movs	r1, #32
 8006c34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2274      	movs	r2, #116	; 0x74
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e010      	b.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	425a      	negs	r2, r3
 8006c52:	4153      	adcs	r3, r2
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	001a      	movs	r2, r3
 8006c58:	1dfb      	adds	r3, r7, #7
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d100      	bne.n	8006c62 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006c60:	e74b      	b.n	8006afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	0018      	movs	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b014      	add	sp, #80	; 0x50
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	fffffe5f 	.word	0xfffffe5f

08006c70 <atan2>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	f000 f82f 	bl	8006cd4 <__ieee754_atan2>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <sqrt>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	0004      	movs	r4, r0
 8006c7c:	000d      	movs	r5, r1
 8006c7e:	f000 f8d5 	bl	8006e2c <__ieee754_sqrt>
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <sqrt+0x58>)
 8006c84:	0006      	movs	r6, r0
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	000f      	movs	r7, r1
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	d01b      	beq.n	8006cc8 <sqrt+0x50>
 8006c90:	0022      	movs	r2, r4
 8006c92:	002b      	movs	r3, r5
 8006c94:	0020      	movs	r0, r4
 8006c96:	0029      	movs	r1, r5
 8006c98:	f7fb fe90 	bl	80029bc <__aeabi_dcmpun>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d113      	bne.n	8006cc8 <sqrt+0x50>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	0020      	movs	r0, r4
 8006ca6:	0029      	movs	r1, r5
 8006ca8:	f7f9 fbd4 	bl	8000454 <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d00b      	beq.n	8006cc8 <sqrt+0x50>
 8006cb0:	f000 faf4 	bl	800729c <__errno>
 8006cb4:	2321      	movs	r3, #33	; 0x21
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	6003      	str	r3, [r0, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	0010      	movs	r0, r2
 8006cbe:	0019      	movs	r1, r3
 8006cc0:	f7fa fc78 	bl	80015b4 <__aeabi_ddiv>
 8006cc4:	0006      	movs	r6, r0
 8006cc6:	000f      	movs	r7, r1
 8006cc8:	0030      	movs	r0, r6
 8006cca:	0039      	movs	r1, r7
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	20000039 	.word	0x20000039

08006cd4 <__ieee754_atan2>:
 8006cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cd6:	0016      	movs	r6, r2
 8006cd8:	001d      	movs	r5, r3
 8006cda:	005a      	lsls	r2, r3, #1
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4273      	negs	r3, r6
 8006ce0:	4333      	orrs	r3, r6
 8006ce2:	4f46      	ldr	r7, [pc, #280]	; (8006dfc <__ieee754_atan2+0x128>)
 8006ce4:	0852      	lsrs	r2, r2, #1
 8006ce6:	0fdb      	lsrs	r3, r3, #31
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	42bb      	cmp	r3, r7
 8006cec:	d809      	bhi.n	8006d02 <__ieee754_atan2+0x2e>
 8006cee:	4244      	negs	r4, r0
 8006cf0:	004b      	lsls	r3, r1, #1
 8006cf2:	4304      	orrs	r4, r0
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	0fe4      	lsrs	r4, r4, #31
 8006cf8:	9100      	str	r1, [sp, #0]
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	431c      	orrs	r4, r3
 8006cfe:	42bc      	cmp	r4, r7
 8006d00:	d905      	bls.n	8006d0e <__ieee754_atan2+0x3a>
 8006d02:	0032      	movs	r2, r6
 8006d04:	002b      	movs	r3, r5
 8006d06:	f7fa f8eb 	bl	8000ee0 <__aeabi_dadd>
 8006d0a:	b003      	add	sp, #12
 8006d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0e:	4c3c      	ldr	r4, [pc, #240]	; (8006e00 <__ieee754_atan2+0x12c>)
 8006d10:	192c      	adds	r4, r5, r4
 8006d12:	4334      	orrs	r4, r6
 8006d14:	d102      	bne.n	8006d1c <__ieee754_atan2+0x48>
 8006d16:	f000 f93d 	bl	8006f94 <atan>
 8006d1a:	e7f6      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006d1c:	17ac      	asrs	r4, r5, #30
 8006d1e:	46a4      	mov	ip, r4
 8006d20:	2402      	movs	r4, #2
 8006d22:	4667      	mov	r7, ip
 8006d24:	403c      	ands	r4, r7
 8006d26:	9f00      	ldr	r7, [sp, #0]
 8006d28:	0fff      	lsrs	r7, r7, #31
 8006d2a:	433c      	orrs	r4, r7
 8006d2c:	9f01      	ldr	r7, [sp, #4]
 8006d2e:	431f      	orrs	r7, r3
 8006d30:	d106      	bne.n	8006d40 <__ieee754_atan2+0x6c>
 8006d32:	2c02      	cmp	r4, #2
 8006d34:	d056      	beq.n	8006de4 <__ieee754_atan2+0x110>
 8006d36:	2c03      	cmp	r4, #3
 8006d38:	d1e7      	bne.n	8006d0a <__ieee754_atan2+0x36>
 8006d3a:	4832      	ldr	r0, [pc, #200]	; (8006e04 <__ieee754_atan2+0x130>)
 8006d3c:	4932      	ldr	r1, [pc, #200]	; (8006e08 <__ieee754_atan2+0x134>)
 8006d3e:	e7e4      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006d40:	0017      	movs	r7, r2
 8006d42:	4337      	orrs	r7, r6
 8006d44:	d105      	bne.n	8006d52 <__ieee754_atan2+0x7e>
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	482e      	ldr	r0, [pc, #184]	; (8006e04 <__ieee754_atan2+0x130>)
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da53      	bge.n	8006df6 <__ieee754_atan2+0x122>
 8006d4e:	492f      	ldr	r1, [pc, #188]	; (8006e0c <__ieee754_atan2+0x138>)
 8006d50:	e7db      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006d52:	4f2a      	ldr	r7, [pc, #168]	; (8006dfc <__ieee754_atan2+0x128>)
 8006d54:	42ba      	cmp	r2, r7
 8006d56:	d10f      	bne.n	8006d78 <__ieee754_atan2+0xa4>
 8006d58:	3c01      	subs	r4, #1
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d107      	bne.n	8006d6e <__ieee754_atan2+0x9a>
 8006d5e:	2c02      	cmp	r4, #2
 8006d60:	d843      	bhi.n	8006dea <__ieee754_atan2+0x116>
 8006d62:	4b2b      	ldr	r3, [pc, #172]	; (8006e10 <__ieee754_atan2+0x13c>)
 8006d64:	00e4      	lsls	r4, r4, #3
 8006d66:	191c      	adds	r4, r3, r4
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	6861      	ldr	r1, [r4, #4]
 8006d6c:	e7cd      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006d6e:	2c02      	cmp	r4, #2
 8006d70:	d83e      	bhi.n	8006df0 <__ieee754_atan2+0x11c>
 8006d72:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <__ieee754_atan2+0x140>)
 8006d74:	00e4      	lsls	r4, r4, #3
 8006d76:	e7f6      	b.n	8006d66 <__ieee754_atan2+0x92>
 8006d78:	4f20      	ldr	r7, [pc, #128]	; (8006dfc <__ieee754_atan2+0x128>)
 8006d7a:	42bb      	cmp	r3, r7
 8006d7c:	d0e3      	beq.n	8006d46 <__ieee754_atan2+0x72>
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	151b      	asrs	r3, r3, #20
 8006d82:	2b3c      	cmp	r3, #60	; 0x3c
 8006d84:	dc18      	bgt.n	8006db8 <__ieee754_atan2+0xe4>
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	da01      	bge.n	8006d8e <__ieee754_atan2+0xba>
 8006d8a:	333c      	adds	r3, #60	; 0x3c
 8006d8c:	db17      	blt.n	8006dbe <__ieee754_atan2+0xea>
 8006d8e:	0032      	movs	r2, r6
 8006d90:	002b      	movs	r3, r5
 8006d92:	f7fa fc0f 	bl	80015b4 <__aeabi_ddiv>
 8006d96:	f000 fa7d 	bl	8007294 <fabs>
 8006d9a:	f000 f8fb 	bl	8006f94 <atan>
 8006d9e:	2c01      	cmp	r4, #1
 8006da0:	d010      	beq.n	8006dc4 <__ieee754_atan2+0xf0>
 8006da2:	2c02      	cmp	r4, #2
 8006da4:	d013      	beq.n	8006dce <__ieee754_atan2+0xfa>
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	d0af      	beq.n	8006d0a <__ieee754_atan2+0x36>
 8006daa:	4a1b      	ldr	r2, [pc, #108]	; (8006e18 <__ieee754_atan2+0x144>)
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <__ieee754_atan2+0x148>)
 8006dae:	f7fb fa73 	bl	8002298 <__aeabi_dsub>
 8006db2:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <__ieee754_atan2+0x130>)
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <__ieee754_atan2+0x14c>)
 8006db6:	e012      	b.n	8006dde <__ieee754_atan2+0x10a>
 8006db8:	4812      	ldr	r0, [pc, #72]	; (8006e04 <__ieee754_atan2+0x130>)
 8006dba:	491a      	ldr	r1, [pc, #104]	; (8006e24 <__ieee754_atan2+0x150>)
 8006dbc:	e7ef      	b.n	8006d9e <__ieee754_atan2+0xca>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	e7ec      	b.n	8006d9e <__ieee754_atan2+0xca>
 8006dc4:	2480      	movs	r4, #128	; 0x80
 8006dc6:	0624      	lsls	r4, r4, #24
 8006dc8:	190b      	adds	r3, r1, r4
 8006dca:	0019      	movs	r1, r3
 8006dcc:	e79d      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <__ieee754_atan2+0x144>)
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <__ieee754_atan2+0x148>)
 8006dd2:	f7fb fa61 	bl	8002298 <__aeabi_dsub>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	000b      	movs	r3, r1
 8006dda:	480a      	ldr	r0, [pc, #40]	; (8006e04 <__ieee754_atan2+0x130>)
 8006ddc:	4910      	ldr	r1, [pc, #64]	; (8006e20 <__ieee754_atan2+0x14c>)
 8006dde:	f7fb fa5b 	bl	8002298 <__aeabi_dsub>
 8006de2:	e792      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006de4:	4807      	ldr	r0, [pc, #28]	; (8006e04 <__ieee754_atan2+0x130>)
 8006de6:	490e      	ldr	r1, [pc, #56]	; (8006e20 <__ieee754_atan2+0x14c>)
 8006de8:	e78f      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006dea:	4806      	ldr	r0, [pc, #24]	; (8006e04 <__ieee754_atan2+0x130>)
 8006dec:	490e      	ldr	r1, [pc, #56]	; (8006e28 <__ieee754_atan2+0x154>)
 8006dee:	e78c      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006df0:	2000      	movs	r0, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	e789      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006df6:	490b      	ldr	r1, [pc, #44]	; (8006e24 <__ieee754_atan2+0x150>)
 8006df8:	e787      	b.n	8006d0a <__ieee754_atan2+0x36>
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	c0100000 	.word	0xc0100000
 8006e04:	54442d18 	.word	0x54442d18
 8006e08:	c00921fb 	.word	0xc00921fb
 8006e0c:	bff921fb 	.word	0xbff921fb
 8006e10:	0800a378 	.word	0x0800a378
 8006e14:	0800a390 	.word	0x0800a390
 8006e18:	33145c07 	.word	0x33145c07
 8006e1c:	3ca1a626 	.word	0x3ca1a626
 8006e20:	400921fb 	.word	0x400921fb
 8006e24:	3ff921fb 	.word	0x3ff921fb
 8006e28:	3fe921fb 	.word	0x3fe921fb

08006e2c <__ieee754_sqrt>:
 8006e2c:	4b56      	ldr	r3, [pc, #344]	; (8006f88 <__ieee754_sqrt+0x15c>)
 8006e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e30:	0002      	movs	r2, r0
 8006e32:	0005      	movs	r5, r0
 8006e34:	0018      	movs	r0, r3
 8006e36:	000c      	movs	r4, r1
 8006e38:	b085      	sub	sp, #20
 8006e3a:	4008      	ands	r0, r1
 8006e3c:	4298      	cmp	r0, r3
 8006e3e:	d10f      	bne.n	8006e60 <__ieee754_sqrt+0x34>
 8006e40:	000b      	movs	r3, r1
 8006e42:	0028      	movs	r0, r5
 8006e44:	f7fa ffbc 	bl	8001dc0 <__aeabi_dmul>
 8006e48:	0002      	movs	r2, r0
 8006e4a:	000b      	movs	r3, r1
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	0021      	movs	r1, r4
 8006e50:	f7fa f846 	bl	8000ee0 <__aeabi_dadd>
 8006e54:	0005      	movs	r5, r0
 8006e56:	000c      	movs	r4, r1
 8006e58:	0028      	movs	r0, r5
 8006e5a:	0021      	movs	r1, r4
 8006e5c:	b005      	add	sp, #20
 8006e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e60:	2900      	cmp	r1, #0
 8006e62:	dc10      	bgt.n	8006e86 <__ieee754_sqrt+0x5a>
 8006e64:	004b      	lsls	r3, r1, #1
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	432b      	orrs	r3, r5
 8006e6a:	d0f5      	beq.n	8006e58 <__ieee754_sqrt+0x2c>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4281      	cmp	r1, r0
 8006e70:	d100      	bne.n	8006e74 <__ieee754_sqrt+0x48>
 8006e72:	e080      	b.n	8006f76 <__ieee754_sqrt+0x14a>
 8006e74:	000b      	movs	r3, r1
 8006e76:	0028      	movs	r0, r5
 8006e78:	f7fb fa0e 	bl	8002298 <__aeabi_dsub>
 8006e7c:	0002      	movs	r2, r0
 8006e7e:	000b      	movs	r3, r1
 8006e80:	f7fa fb98 	bl	80015b4 <__aeabi_ddiv>
 8006e84:	e7e6      	b.n	8006e54 <__ieee754_sqrt+0x28>
 8006e86:	1508      	asrs	r0, r1, #20
 8006e88:	d075      	beq.n	8006f76 <__ieee754_sqrt+0x14a>
 8006e8a:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <__ieee754_sqrt+0x160>)
 8006e8c:	0309      	lsls	r1, r1, #12
 8006e8e:	18c4      	adds	r4, r0, r3
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	0b09      	lsrs	r1, r1, #12
 8006e94:	035b      	lsls	r3, r3, #13
 8006e96:	4319      	orrs	r1, r3
 8006e98:	07c3      	lsls	r3, r0, #31
 8006e9a:	d403      	bmi.n	8006ea4 <__ieee754_sqrt+0x78>
 8006e9c:	0fd3      	lsrs	r3, r2, #31
 8006e9e:	0049      	lsls	r1, r1, #1
 8006ea0:	18c9      	adds	r1, r1, r3
 8006ea2:	0052      	lsls	r2, r2, #1
 8006ea4:	1063      	asrs	r3, r4, #1
 8006ea6:	2400      	movs	r4, #0
 8006ea8:	0049      	lsls	r1, r1, #1
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	0fd3      	lsrs	r3, r2, #31
 8006eae:	18cb      	adds	r3, r1, r3
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	2516      	movs	r5, #22
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	0052      	lsls	r2, r2, #1
 8006eb8:	0389      	lsls	r1, r1, #14
 8006eba:	1846      	adds	r6, r0, r1
 8006ebc:	429e      	cmp	r6, r3
 8006ebe:	dc02      	bgt.n	8006ec6 <__ieee754_sqrt+0x9a>
 8006ec0:	1870      	adds	r0, r6, r1
 8006ec2:	1b9b      	subs	r3, r3, r6
 8006ec4:	1864      	adds	r4, r4, r1
 8006ec6:	0fd6      	lsrs	r6, r2, #31
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	3d01      	subs	r5, #1
 8006ecc:	18f3      	adds	r3, r6, r3
 8006ece:	0052      	lsls	r2, r2, #1
 8006ed0:	0849      	lsrs	r1, r1, #1
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	d1f1      	bne.n	8006eba <__ieee754_sqrt+0x8e>
 8006ed6:	2620      	movs	r6, #32
 8006ed8:	2780      	movs	r7, #128	; 0x80
 8006eda:	0029      	movs	r1, r5
 8006edc:	9601      	str	r6, [sp, #4]
 8006ede:	063f      	lsls	r7, r7, #24
 8006ee0:	197e      	adds	r6, r7, r5
 8006ee2:	46b4      	mov	ip, r6
 8006ee4:	4283      	cmp	r3, r0
 8006ee6:	dc02      	bgt.n	8006eee <__ieee754_sqrt+0xc2>
 8006ee8:	d114      	bne.n	8006f14 <__ieee754_sqrt+0xe8>
 8006eea:	4296      	cmp	r6, r2
 8006eec:	d812      	bhi.n	8006f14 <__ieee754_sqrt+0xe8>
 8006eee:	4665      	mov	r5, ip
 8006ef0:	4666      	mov	r6, ip
 8006ef2:	19ed      	adds	r5, r5, r7
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	da03      	bge.n	8006f02 <__ieee754_sqrt+0xd6>
 8006efa:	43ee      	mvns	r6, r5
 8006efc:	0ff6      	lsrs	r6, r6, #31
 8006efe:	1986      	adds	r6, r0, r6
 8006f00:	9602      	str	r6, [sp, #8]
 8006f02:	1a1b      	subs	r3, r3, r0
 8006f04:	4562      	cmp	r2, ip
 8006f06:	4180      	sbcs	r0, r0
 8006f08:	4240      	negs	r0, r0
 8006f0a:	1a1b      	subs	r3, r3, r0
 8006f0c:	4660      	mov	r0, ip
 8006f0e:	1a12      	subs	r2, r2, r0
 8006f10:	9802      	ldr	r0, [sp, #8]
 8006f12:	19c9      	adds	r1, r1, r7
 8006f14:	0fd6      	lsrs	r6, r2, #31
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	18f3      	adds	r3, r6, r3
 8006f1a:	9e01      	ldr	r6, [sp, #4]
 8006f1c:	0052      	lsls	r2, r2, #1
 8006f1e:	3e01      	subs	r6, #1
 8006f20:	087f      	lsrs	r7, r7, #1
 8006f22:	9601      	str	r6, [sp, #4]
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d1db      	bne.n	8006ee0 <__ieee754_sqrt+0xb4>
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <__ieee754_sqrt+0x108>
 8006f2c:	1c4b      	adds	r3, r1, #1
 8006f2e:	d127      	bne.n	8006f80 <__ieee754_sqrt+0x154>
 8006f30:	0031      	movs	r1, r6
 8006f32:	3401      	adds	r4, #1
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <__ieee754_sqrt+0x164>)
 8006f36:	1060      	asrs	r0, r4, #1
 8006f38:	18c0      	adds	r0, r0, r3
 8006f3a:	0849      	lsrs	r1, r1, #1
 8006f3c:	07e3      	lsls	r3, r4, #31
 8006f3e:	d502      	bpl.n	8006f46 <__ieee754_sqrt+0x11a>
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	061b      	lsls	r3, r3, #24
 8006f44:	4319      	orrs	r1, r3
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	000d      	movs	r5, r1
 8006f4a:	051c      	lsls	r4, r3, #20
 8006f4c:	1823      	adds	r3, r4, r0
 8006f4e:	001c      	movs	r4, r3
 8006f50:	e782      	b.n	8006e58 <__ieee754_sqrt+0x2c>
 8006f52:	0ad1      	lsrs	r1, r2, #11
 8006f54:	3b15      	subs	r3, #21
 8006f56:	0552      	lsls	r2, r2, #21
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	d0fa      	beq.n	8006f52 <__ieee754_sqrt+0x126>
 8006f5c:	2480      	movs	r4, #128	; 0x80
 8006f5e:	0364      	lsls	r4, r4, #13
 8006f60:	4221      	tst	r1, r4
 8006f62:	d00a      	beq.n	8006f7a <__ieee754_sqrt+0x14e>
 8006f64:	2420      	movs	r4, #32
 8006f66:	0016      	movs	r6, r2
 8006f68:	1a24      	subs	r4, r4, r0
 8006f6a:	40e6      	lsrs	r6, r4
 8006f6c:	1e45      	subs	r5, r0, #1
 8006f6e:	4082      	lsls	r2, r0
 8006f70:	4331      	orrs	r1, r6
 8006f72:	1b58      	subs	r0, r3, r5
 8006f74:	e789      	b.n	8006e8a <__ieee754_sqrt+0x5e>
 8006f76:	2300      	movs	r3, #0
 8006f78:	e7ee      	b.n	8006f58 <__ieee754_sqrt+0x12c>
 8006f7a:	0049      	lsls	r1, r1, #1
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	e7ef      	b.n	8006f60 <__ieee754_sqrt+0x134>
 8006f80:	2301      	movs	r3, #1
 8006f82:	3101      	adds	r1, #1
 8006f84:	4399      	bics	r1, r3
 8006f86:	e7d5      	b.n	8006f34 <__ieee754_sqrt+0x108>
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	fffffc01 	.word	0xfffffc01
 8006f90:	3fe00000 	.word	0x3fe00000

08006f94 <atan>:
 8006f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f96:	4b98      	ldr	r3, [pc, #608]	; (80071f8 <atan+0x264>)
 8006f98:	b085      	sub	sp, #20
 8006f9a:	004e      	lsls	r6, r1, #1
 8006f9c:	0004      	movs	r4, r0
 8006f9e:	000d      	movs	r5, r1
 8006fa0:	9103      	str	r1, [sp, #12]
 8006fa2:	0876      	lsrs	r6, r6, #1
 8006fa4:	429e      	cmp	r6, r3
 8006fa6:	dd18      	ble.n	8006fda <atan+0x46>
 8006fa8:	4b94      	ldr	r3, [pc, #592]	; (80071fc <atan+0x268>)
 8006faa:	429e      	cmp	r6, r3
 8006fac:	dc02      	bgt.n	8006fb4 <atan+0x20>
 8006fae:	d10a      	bne.n	8006fc6 <atan+0x32>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d008      	beq.n	8006fc6 <atan+0x32>
 8006fb4:	0022      	movs	r2, r4
 8006fb6:	002b      	movs	r3, r5
 8006fb8:	0020      	movs	r0, r4
 8006fba:	0029      	movs	r1, r5
 8006fbc:	f7f9 ff90 	bl	8000ee0 <__aeabi_dadd>
 8006fc0:	0004      	movs	r4, r0
 8006fc2:	000d      	movs	r5, r1
 8006fc4:	e005      	b.n	8006fd2 <atan+0x3e>
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	4c8d      	ldr	r4, [pc, #564]	; (8007200 <atan+0x26c>)
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dd00      	ble.n	8006fd0 <atan+0x3c>
 8006fce:	e110      	b.n	80071f2 <atan+0x25e>
 8006fd0:	4d8c      	ldr	r5, [pc, #560]	; (8007204 <atan+0x270>)
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	0029      	movs	r1, r5
 8006fd6:	b005      	add	sp, #20
 8006fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fda:	4b8b      	ldr	r3, [pc, #556]	; (8007208 <atan+0x274>)
 8006fdc:	429e      	cmp	r6, r3
 8006fde:	dc0f      	bgt.n	8007000 <atan+0x6c>
 8006fe0:	4b8a      	ldr	r3, [pc, #552]	; (800720c <atan+0x278>)
 8006fe2:	429e      	cmp	r6, r3
 8006fe4:	dc09      	bgt.n	8006ffa <atan+0x66>
 8006fe6:	4a8a      	ldr	r2, [pc, #552]	; (8007210 <atan+0x27c>)
 8006fe8:	4b8a      	ldr	r3, [pc, #552]	; (8007214 <atan+0x280>)
 8006fea:	f7f9 ff79 	bl	8000ee0 <__aeabi_dadd>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4b89      	ldr	r3, [pc, #548]	; (8007218 <atan+0x284>)
 8006ff2:	f7f9 fa43 	bl	800047c <__aeabi_dcmpgt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d1eb      	bne.n	8006fd2 <atan+0x3e>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	425b      	negs	r3, r3
 8006ffe:	e025      	b.n	800704c <atan+0xb8>
 8007000:	f000 f948 	bl	8007294 <fabs>
 8007004:	4b85      	ldr	r3, [pc, #532]	; (800721c <atan+0x288>)
 8007006:	0004      	movs	r4, r0
 8007008:	000d      	movs	r5, r1
 800700a:	429e      	cmp	r6, r3
 800700c:	dd00      	ble.n	8007010 <atan+0x7c>
 800700e:	e0aa      	b.n	8007166 <atan+0x1d2>
 8007010:	4b83      	ldr	r3, [pc, #524]	; (8007220 <atan+0x28c>)
 8007012:	429e      	cmp	r6, r3
 8007014:	dd00      	ble.n	8007018 <atan+0x84>
 8007016:	e090      	b.n	800713a <atan+0x1a6>
 8007018:	0002      	movs	r2, r0
 800701a:	000b      	movs	r3, r1
 800701c:	f7f9 ff60 	bl	8000ee0 <__aeabi_dadd>
 8007020:	2200      	movs	r2, #0
 8007022:	4b7d      	ldr	r3, [pc, #500]	; (8007218 <atan+0x284>)
 8007024:	f7fb f938 	bl	8002298 <__aeabi_dsub>
 8007028:	2380      	movs	r3, #128	; 0x80
 800702a:	0006      	movs	r6, r0
 800702c:	000f      	movs	r7, r1
 800702e:	2200      	movs	r2, #0
 8007030:	0020      	movs	r0, r4
 8007032:	0029      	movs	r1, r5
 8007034:	05db      	lsls	r3, r3, #23
 8007036:	f7f9 ff53 	bl	8000ee0 <__aeabi_dadd>
 800703a:	000b      	movs	r3, r1
 800703c:	0002      	movs	r2, r0
 800703e:	0039      	movs	r1, r7
 8007040:	0030      	movs	r0, r6
 8007042:	f7fa fab7 	bl	80015b4 <__aeabi_ddiv>
 8007046:	2300      	movs	r3, #0
 8007048:	0004      	movs	r4, r0
 800704a:	000d      	movs	r5, r1
 800704c:	0022      	movs	r2, r4
 800704e:	9302      	str	r3, [sp, #8]
 8007050:	0020      	movs	r0, r4
 8007052:	002b      	movs	r3, r5
 8007054:	0029      	movs	r1, r5
 8007056:	f7fa feb3 	bl	8001dc0 <__aeabi_dmul>
 800705a:	0002      	movs	r2, r0
 800705c:	000b      	movs	r3, r1
 800705e:	9000      	str	r0, [sp, #0]
 8007060:	9101      	str	r1, [sp, #4]
 8007062:	f7fa fead 	bl	8001dc0 <__aeabi_dmul>
 8007066:	0006      	movs	r6, r0
 8007068:	000f      	movs	r7, r1
 800706a:	4a6e      	ldr	r2, [pc, #440]	; (8007224 <atan+0x290>)
 800706c:	4b6e      	ldr	r3, [pc, #440]	; (8007228 <atan+0x294>)
 800706e:	f7fa fea7 	bl	8001dc0 <__aeabi_dmul>
 8007072:	4a6e      	ldr	r2, [pc, #440]	; (800722c <atan+0x298>)
 8007074:	4b6e      	ldr	r3, [pc, #440]	; (8007230 <atan+0x29c>)
 8007076:	f7f9 ff33 	bl	8000ee0 <__aeabi_dadd>
 800707a:	0032      	movs	r2, r6
 800707c:	003b      	movs	r3, r7
 800707e:	f7fa fe9f 	bl	8001dc0 <__aeabi_dmul>
 8007082:	4a6c      	ldr	r2, [pc, #432]	; (8007234 <atan+0x2a0>)
 8007084:	4b6c      	ldr	r3, [pc, #432]	; (8007238 <atan+0x2a4>)
 8007086:	f7f9 ff2b 	bl	8000ee0 <__aeabi_dadd>
 800708a:	0032      	movs	r2, r6
 800708c:	003b      	movs	r3, r7
 800708e:	f7fa fe97 	bl	8001dc0 <__aeabi_dmul>
 8007092:	4a6a      	ldr	r2, [pc, #424]	; (800723c <atan+0x2a8>)
 8007094:	4b6a      	ldr	r3, [pc, #424]	; (8007240 <atan+0x2ac>)
 8007096:	f7f9 ff23 	bl	8000ee0 <__aeabi_dadd>
 800709a:	0032      	movs	r2, r6
 800709c:	003b      	movs	r3, r7
 800709e:	f7fa fe8f 	bl	8001dc0 <__aeabi_dmul>
 80070a2:	4a68      	ldr	r2, [pc, #416]	; (8007244 <atan+0x2b0>)
 80070a4:	4b68      	ldr	r3, [pc, #416]	; (8007248 <atan+0x2b4>)
 80070a6:	f7f9 ff1b 	bl	8000ee0 <__aeabi_dadd>
 80070aa:	0032      	movs	r2, r6
 80070ac:	003b      	movs	r3, r7
 80070ae:	f7fa fe87 	bl	8001dc0 <__aeabi_dmul>
 80070b2:	4a66      	ldr	r2, [pc, #408]	; (800724c <atan+0x2b8>)
 80070b4:	4b66      	ldr	r3, [pc, #408]	; (8007250 <atan+0x2bc>)
 80070b6:	f7f9 ff13 	bl	8000ee0 <__aeabi_dadd>
 80070ba:	9a00      	ldr	r2, [sp, #0]
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	f7fa fe7f 	bl	8001dc0 <__aeabi_dmul>
 80070c2:	4a64      	ldr	r2, [pc, #400]	; (8007254 <atan+0x2c0>)
 80070c4:	9000      	str	r0, [sp, #0]
 80070c6:	9101      	str	r1, [sp, #4]
 80070c8:	4b63      	ldr	r3, [pc, #396]	; (8007258 <atan+0x2c4>)
 80070ca:	0030      	movs	r0, r6
 80070cc:	0039      	movs	r1, r7
 80070ce:	f7fa fe77 	bl	8001dc0 <__aeabi_dmul>
 80070d2:	4a62      	ldr	r2, [pc, #392]	; (800725c <atan+0x2c8>)
 80070d4:	4b62      	ldr	r3, [pc, #392]	; (8007260 <atan+0x2cc>)
 80070d6:	f7fb f8df 	bl	8002298 <__aeabi_dsub>
 80070da:	0032      	movs	r2, r6
 80070dc:	003b      	movs	r3, r7
 80070de:	f7fa fe6f 	bl	8001dc0 <__aeabi_dmul>
 80070e2:	4a60      	ldr	r2, [pc, #384]	; (8007264 <atan+0x2d0>)
 80070e4:	4b60      	ldr	r3, [pc, #384]	; (8007268 <atan+0x2d4>)
 80070e6:	f7fb f8d7 	bl	8002298 <__aeabi_dsub>
 80070ea:	0032      	movs	r2, r6
 80070ec:	003b      	movs	r3, r7
 80070ee:	f7fa fe67 	bl	8001dc0 <__aeabi_dmul>
 80070f2:	4a5e      	ldr	r2, [pc, #376]	; (800726c <atan+0x2d8>)
 80070f4:	4b5e      	ldr	r3, [pc, #376]	; (8007270 <atan+0x2dc>)
 80070f6:	f7fb f8cf 	bl	8002298 <__aeabi_dsub>
 80070fa:	0032      	movs	r2, r6
 80070fc:	003b      	movs	r3, r7
 80070fe:	f7fa fe5f 	bl	8001dc0 <__aeabi_dmul>
 8007102:	4a5c      	ldr	r2, [pc, #368]	; (8007274 <atan+0x2e0>)
 8007104:	4b5c      	ldr	r3, [pc, #368]	; (8007278 <atan+0x2e4>)
 8007106:	f7fb f8c7 	bl	8002298 <__aeabi_dsub>
 800710a:	0032      	movs	r2, r6
 800710c:	003b      	movs	r3, r7
 800710e:	f7fa fe57 	bl	8001dc0 <__aeabi_dmul>
 8007112:	0002      	movs	r2, r0
 8007114:	000b      	movs	r3, r1
 8007116:	9800      	ldr	r0, [sp, #0]
 8007118:	9901      	ldr	r1, [sp, #4]
 800711a:	f7f9 fee1 	bl	8000ee0 <__aeabi_dadd>
 800711e:	002b      	movs	r3, r5
 8007120:	0022      	movs	r2, r4
 8007122:	f7fa fe4d 	bl	8001dc0 <__aeabi_dmul>
 8007126:	9b02      	ldr	r3, [sp, #8]
 8007128:	3301      	adds	r3, #1
 800712a:	d143      	bne.n	80071b4 <atan+0x220>
 800712c:	0002      	movs	r2, r0
 800712e:	000b      	movs	r3, r1
 8007130:	0020      	movs	r0, r4
 8007132:	0029      	movs	r1, r5
 8007134:	f7fb f8b0 	bl	8002298 <__aeabi_dsub>
 8007138:	e742      	b.n	8006fc0 <atan+0x2c>
 800713a:	2200      	movs	r2, #0
 800713c:	4b36      	ldr	r3, [pc, #216]	; (8007218 <atan+0x284>)
 800713e:	f7fb f8ab 	bl	8002298 <__aeabi_dsub>
 8007142:	2200      	movs	r2, #0
 8007144:	0006      	movs	r6, r0
 8007146:	000f      	movs	r7, r1
 8007148:	0020      	movs	r0, r4
 800714a:	0029      	movs	r1, r5
 800714c:	4b32      	ldr	r3, [pc, #200]	; (8007218 <atan+0x284>)
 800714e:	f7f9 fec7 	bl	8000ee0 <__aeabi_dadd>
 8007152:	000b      	movs	r3, r1
 8007154:	0002      	movs	r2, r0
 8007156:	0039      	movs	r1, r7
 8007158:	0030      	movs	r0, r6
 800715a:	f7fa fa2b 	bl	80015b4 <__aeabi_ddiv>
 800715e:	2301      	movs	r3, #1
 8007160:	0004      	movs	r4, r0
 8007162:	000d      	movs	r5, r1
 8007164:	e772      	b.n	800704c <atan+0xb8>
 8007166:	4b45      	ldr	r3, [pc, #276]	; (800727c <atan+0x2e8>)
 8007168:	429e      	cmp	r6, r3
 800716a:	dc19      	bgt.n	80071a0 <atan+0x20c>
 800716c:	2200      	movs	r2, #0
 800716e:	4b44      	ldr	r3, [pc, #272]	; (8007280 <atan+0x2ec>)
 8007170:	f7fb f892 	bl	8002298 <__aeabi_dsub>
 8007174:	2200      	movs	r2, #0
 8007176:	0006      	movs	r6, r0
 8007178:	000f      	movs	r7, r1
 800717a:	0020      	movs	r0, r4
 800717c:	0029      	movs	r1, r5
 800717e:	4b40      	ldr	r3, [pc, #256]	; (8007280 <atan+0x2ec>)
 8007180:	f7fa fe1e 	bl	8001dc0 <__aeabi_dmul>
 8007184:	2200      	movs	r2, #0
 8007186:	4b24      	ldr	r3, [pc, #144]	; (8007218 <atan+0x284>)
 8007188:	f7f9 feaa 	bl	8000ee0 <__aeabi_dadd>
 800718c:	000b      	movs	r3, r1
 800718e:	0002      	movs	r2, r0
 8007190:	0039      	movs	r1, r7
 8007192:	0030      	movs	r0, r6
 8007194:	f7fa fa0e 	bl	80015b4 <__aeabi_ddiv>
 8007198:	2302      	movs	r3, #2
 800719a:	0004      	movs	r4, r0
 800719c:	000d      	movs	r5, r1
 800719e:	e755      	b.n	800704c <atan+0xb8>
 80071a0:	000b      	movs	r3, r1
 80071a2:	0002      	movs	r2, r0
 80071a4:	4937      	ldr	r1, [pc, #220]	; (8007284 <atan+0x2f0>)
 80071a6:	2000      	movs	r0, #0
 80071a8:	f7fa fa04 	bl	80015b4 <__aeabi_ddiv>
 80071ac:	2303      	movs	r3, #3
 80071ae:	0004      	movs	r4, r0
 80071b0:	000d      	movs	r5, r1
 80071b2:	e74b      	b.n	800704c <atan+0xb8>
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	4f34      	ldr	r7, [pc, #208]	; (8007288 <atan+0x2f4>)
 80071b8:	00de      	lsls	r6, r3, #3
 80071ba:	4b34      	ldr	r3, [pc, #208]	; (800728c <atan+0x2f8>)
 80071bc:	19bf      	adds	r7, r7, r6
 80071be:	199e      	adds	r6, r3, r6
 80071c0:	6832      	ldr	r2, [r6, #0]
 80071c2:	6873      	ldr	r3, [r6, #4]
 80071c4:	f7fb f868 	bl	8002298 <__aeabi_dsub>
 80071c8:	0022      	movs	r2, r4
 80071ca:	002b      	movs	r3, r5
 80071cc:	f7fb f864 	bl	8002298 <__aeabi_dsub>
 80071d0:	000b      	movs	r3, r1
 80071d2:	0002      	movs	r2, r0
 80071d4:	6838      	ldr	r0, [r7, #0]
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	f7fb f85e 	bl	8002298 <__aeabi_dsub>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	0004      	movs	r4, r0
 80071e0:	000d      	movs	r5, r1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db00      	blt.n	80071e8 <atan+0x254>
 80071e6:	e6f4      	b.n	8006fd2 <atan+0x3e>
 80071e8:	2180      	movs	r1, #128	; 0x80
 80071ea:	0609      	lsls	r1, r1, #24
 80071ec:	186b      	adds	r3, r5, r1
 80071ee:	001d      	movs	r5, r3
 80071f0:	e6ef      	b.n	8006fd2 <atan+0x3e>
 80071f2:	4d27      	ldr	r5, [pc, #156]	; (8007290 <atan+0x2fc>)
 80071f4:	e6ed      	b.n	8006fd2 <atan+0x3e>
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	440fffff 	.word	0x440fffff
 80071fc:	7ff00000 	.word	0x7ff00000
 8007200:	54442d18 	.word	0x54442d18
 8007204:	bff921fb 	.word	0xbff921fb
 8007208:	3fdbffff 	.word	0x3fdbffff
 800720c:	3e1fffff 	.word	0x3e1fffff
 8007210:	8800759c 	.word	0x8800759c
 8007214:	7e37e43c 	.word	0x7e37e43c
 8007218:	3ff00000 	.word	0x3ff00000
 800721c:	3ff2ffff 	.word	0x3ff2ffff
 8007220:	3fe5ffff 	.word	0x3fe5ffff
 8007224:	e322da11 	.word	0xe322da11
 8007228:	3f90ad3a 	.word	0x3f90ad3a
 800722c:	24760deb 	.word	0x24760deb
 8007230:	3fa97b4b 	.word	0x3fa97b4b
 8007234:	a0d03d51 	.word	0xa0d03d51
 8007238:	3fb10d66 	.word	0x3fb10d66
 800723c:	c54c206e 	.word	0xc54c206e
 8007240:	3fb745cd 	.word	0x3fb745cd
 8007244:	920083ff 	.word	0x920083ff
 8007248:	3fc24924 	.word	0x3fc24924
 800724c:	5555550d 	.word	0x5555550d
 8007250:	3fd55555 	.word	0x3fd55555
 8007254:	2c6a6c2f 	.word	0x2c6a6c2f
 8007258:	bfa2b444 	.word	0xbfa2b444
 800725c:	52defd9a 	.word	0x52defd9a
 8007260:	3fadde2d 	.word	0x3fadde2d
 8007264:	af749a6d 	.word	0xaf749a6d
 8007268:	3fb3b0f2 	.word	0x3fb3b0f2
 800726c:	fe231671 	.word	0xfe231671
 8007270:	3fbc71c6 	.word	0x3fbc71c6
 8007274:	9998ebc4 	.word	0x9998ebc4
 8007278:	3fc99999 	.word	0x3fc99999
 800727c:	40037fff 	.word	0x40037fff
 8007280:	3ff80000 	.word	0x3ff80000
 8007284:	bff00000 	.word	0xbff00000
 8007288:	0800a3a8 	.word	0x0800a3a8
 800728c:	0800a3c8 	.word	0x0800a3c8
 8007290:	3ff921fb 	.word	0x3ff921fb

08007294 <fabs>:
 8007294:	004b      	lsls	r3, r1, #1
 8007296:	0859      	lsrs	r1, r3, #1
 8007298:	4770      	bx	lr
	...

0800729c <__errno>:
 800729c:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <__errno+0x8>)
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	4770      	bx	lr
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	2000003c 	.word	0x2000003c

080072a8 <__libc_init_array>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	2600      	movs	r6, #0
 80072ac:	4d0c      	ldr	r5, [pc, #48]	; (80072e0 <__libc_init_array+0x38>)
 80072ae:	4c0d      	ldr	r4, [pc, #52]	; (80072e4 <__libc_init_array+0x3c>)
 80072b0:	1b64      	subs	r4, r4, r5
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	42a6      	cmp	r6, r4
 80072b6:	d109      	bne.n	80072cc <__libc_init_array+0x24>
 80072b8:	2600      	movs	r6, #0
 80072ba:	f002 ff6d 	bl	800a198 <_init>
 80072be:	4d0a      	ldr	r5, [pc, #40]	; (80072e8 <__libc_init_array+0x40>)
 80072c0:	4c0a      	ldr	r4, [pc, #40]	; (80072ec <__libc_init_array+0x44>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	42a6      	cmp	r6, r4
 80072c8:	d105      	bne.n	80072d6 <__libc_init_array+0x2e>
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	00b3      	lsls	r3, r6, #2
 80072ce:	58eb      	ldr	r3, [r5, r3]
 80072d0:	4798      	blx	r3
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7ee      	b.n	80072b4 <__libc_init_array+0xc>
 80072d6:	00b3      	lsls	r3, r6, #2
 80072d8:	58eb      	ldr	r3, [r5, r3]
 80072da:	4798      	blx	r3
 80072dc:	3601      	adds	r6, #1
 80072de:	e7f2      	b.n	80072c6 <__libc_init_array+0x1e>
 80072e0:	0800a7cc 	.word	0x0800a7cc
 80072e4:	0800a7cc 	.word	0x0800a7cc
 80072e8:	0800a7cc 	.word	0x0800a7cc
 80072ec:	0800a7d0 	.word	0x0800a7d0

080072f0 <memset>:
 80072f0:	0003      	movs	r3, r0
 80072f2:	1882      	adds	r2, r0, r2
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d100      	bne.n	80072fa <memset+0xa>
 80072f8:	4770      	bx	lr
 80072fa:	7019      	strb	r1, [r3, #0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	e7f9      	b.n	80072f4 <memset+0x4>

08007300 <__cvt>:
 8007300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007302:	001e      	movs	r6, r3
 8007304:	2300      	movs	r3, #0
 8007306:	0014      	movs	r4, r2
 8007308:	b08b      	sub	sp, #44	; 0x2c
 800730a:	429e      	cmp	r6, r3
 800730c:	da04      	bge.n	8007318 <__cvt+0x18>
 800730e:	2180      	movs	r1, #128	; 0x80
 8007310:	0609      	lsls	r1, r1, #24
 8007312:	1873      	adds	r3, r6, r1
 8007314:	001e      	movs	r6, r3
 8007316:	232d      	movs	r3, #45	; 0x2d
 8007318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800731a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800731c:	7013      	strb	r3, [r2, #0]
 800731e:	2320      	movs	r3, #32
 8007320:	2203      	movs	r2, #3
 8007322:	439f      	bics	r7, r3
 8007324:	2f46      	cmp	r7, #70	; 0x46
 8007326:	d007      	beq.n	8007338 <__cvt+0x38>
 8007328:	003b      	movs	r3, r7
 800732a:	3b45      	subs	r3, #69	; 0x45
 800732c:	4259      	negs	r1, r3
 800732e:	414b      	adcs	r3, r1
 8007330:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007332:	3a01      	subs	r2, #1
 8007334:	18cb      	adds	r3, r1, r3
 8007336:	9310      	str	r3, [sp, #64]	; 0x40
 8007338:	ab09      	add	r3, sp, #36	; 0x24
 800733a:	9304      	str	r3, [sp, #16]
 800733c:	ab08      	add	r3, sp, #32
 800733e:	9303      	str	r3, [sp, #12]
 8007340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007342:	9200      	str	r2, [sp, #0]
 8007344:	9302      	str	r3, [sp, #8]
 8007346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007348:	0022      	movs	r2, r4
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	0033      	movs	r3, r6
 800734e:	f000 fcfd 	bl	8007d4c <_dtoa_r>
 8007352:	0005      	movs	r5, r0
 8007354:	2f47      	cmp	r7, #71	; 0x47
 8007356:	d102      	bne.n	800735e <__cvt+0x5e>
 8007358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800735a:	07db      	lsls	r3, r3, #31
 800735c:	d528      	bpl.n	80073b0 <__cvt+0xb0>
 800735e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007360:	18eb      	adds	r3, r5, r3
 8007362:	9307      	str	r3, [sp, #28]
 8007364:	2f46      	cmp	r7, #70	; 0x46
 8007366:	d114      	bne.n	8007392 <__cvt+0x92>
 8007368:	782b      	ldrb	r3, [r5, #0]
 800736a:	2b30      	cmp	r3, #48	; 0x30
 800736c:	d10c      	bne.n	8007388 <__cvt+0x88>
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	0020      	movs	r0, r4
 8007374:	0031      	movs	r1, r6
 8007376:	f7f9 f867 	bl	8000448 <__aeabi_dcmpeq>
 800737a:	2800      	cmp	r0, #0
 800737c:	d104      	bne.n	8007388 <__cvt+0x88>
 800737e:	2301      	movs	r3, #1
 8007380:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800738a:	9a07      	ldr	r2, [sp, #28]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	18d3      	adds	r3, r2, r3
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	0020      	movs	r0, r4
 8007398:	0031      	movs	r1, r6
 800739a:	f7f9 f855 	bl	8000448 <__aeabi_dcmpeq>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d001      	beq.n	80073a6 <__cvt+0xa6>
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	2230      	movs	r2, #48	; 0x30
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	9907      	ldr	r1, [sp, #28]
 80073ac:	428b      	cmp	r3, r1
 80073ae:	d306      	bcc.n	80073be <__cvt+0xbe>
 80073b0:	0028      	movs	r0, r5
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073b6:	1b5b      	subs	r3, r3, r5
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	b00b      	add	sp, #44	; 0x2c
 80073bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	9109      	str	r1, [sp, #36]	; 0x24
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	e7f0      	b.n	80073a8 <__cvt+0xa8>

080073c6 <__exponent>:
 80073c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c8:	1c83      	adds	r3, r0, #2
 80073ca:	b087      	sub	sp, #28
 80073cc:	9303      	str	r3, [sp, #12]
 80073ce:	0005      	movs	r5, r0
 80073d0:	000c      	movs	r4, r1
 80073d2:	232b      	movs	r3, #43	; 0x2b
 80073d4:	7002      	strb	r2, [r0, #0]
 80073d6:	2900      	cmp	r1, #0
 80073d8:	da01      	bge.n	80073de <__exponent+0x18>
 80073da:	424c      	negs	r4, r1
 80073dc:	3302      	adds	r3, #2
 80073de:	706b      	strb	r3, [r5, #1]
 80073e0:	2c09      	cmp	r4, #9
 80073e2:	dd31      	ble.n	8007448 <__exponent+0x82>
 80073e4:	270a      	movs	r7, #10
 80073e6:	ab04      	add	r3, sp, #16
 80073e8:	1dde      	adds	r6, r3, #7
 80073ea:	0020      	movs	r0, r4
 80073ec:	0039      	movs	r1, r7
 80073ee:	9601      	str	r6, [sp, #4]
 80073f0:	f7f9 f814 	bl	800041c <__aeabi_idivmod>
 80073f4:	3e01      	subs	r6, #1
 80073f6:	3130      	adds	r1, #48	; 0x30
 80073f8:	0020      	movs	r0, r4
 80073fa:	7031      	strb	r1, [r6, #0]
 80073fc:	0039      	movs	r1, r7
 80073fe:	9402      	str	r4, [sp, #8]
 8007400:	f7f8 ff26 	bl	8000250 <__divsi3>
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	0004      	movs	r4, r0
 8007408:	2b63      	cmp	r3, #99	; 0x63
 800740a:	dcee      	bgt.n	80073ea <__exponent+0x24>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	3430      	adds	r4, #48	; 0x30
 8007410:	1e9a      	subs	r2, r3, #2
 8007412:	0013      	movs	r3, r2
 8007414:	9903      	ldr	r1, [sp, #12]
 8007416:	7014      	strb	r4, [r2, #0]
 8007418:	a804      	add	r0, sp, #16
 800741a:	3007      	adds	r0, #7
 800741c:	4298      	cmp	r0, r3
 800741e:	d80e      	bhi.n	800743e <__exponent+0x78>
 8007420:	ab04      	add	r3, sp, #16
 8007422:	3307      	adds	r3, #7
 8007424:	2000      	movs	r0, #0
 8007426:	429a      	cmp	r2, r3
 8007428:	d804      	bhi.n	8007434 <__exponent+0x6e>
 800742a:	ab04      	add	r3, sp, #16
 800742c:	3009      	adds	r0, #9
 800742e:	18c0      	adds	r0, r0, r3
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1818      	adds	r0, r3, r0
 8007438:	1b40      	subs	r0, r0, r5
 800743a:	b007      	add	sp, #28
 800743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743e:	7818      	ldrb	r0, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	7008      	strb	r0, [r1, #0]
 8007444:	3101      	adds	r1, #1
 8007446:	e7e7      	b.n	8007418 <__exponent+0x52>
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	18e4      	adds	r4, r4, r3
 800744c:	70ab      	strb	r3, [r5, #2]
 800744e:	1d28      	adds	r0, r5, #4
 8007450:	70ec      	strb	r4, [r5, #3]
 8007452:	e7f1      	b.n	8007438 <__exponent+0x72>

08007454 <_printf_float>:
 8007454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007456:	b095      	sub	sp, #84	; 0x54
 8007458:	000c      	movs	r4, r1
 800745a:	9208      	str	r2, [sp, #32]
 800745c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800745e:	9309      	str	r3, [sp, #36]	; 0x24
 8007460:	0007      	movs	r7, r0
 8007462:	f001 fa91 	bl	8008988 <_localeconv_r>
 8007466:	6803      	ldr	r3, [r0, #0]
 8007468:	0018      	movs	r0, r3
 800746a:	930b      	str	r3, [sp, #44]	; 0x2c
 800746c:	f7f8 fe4a 	bl	8000104 <strlen>
 8007470:	2300      	movs	r3, #0
 8007472:	9312      	str	r3, [sp, #72]	; 0x48
 8007474:	7e23      	ldrb	r3, [r4, #24]
 8007476:	2207      	movs	r2, #7
 8007478:	001e      	movs	r6, r3
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	900d      	str	r0, [sp, #52]	; 0x34
 800747e:	930c      	str	r3, [sp, #48]	; 0x30
 8007480:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	05c9      	lsls	r1, r1, #23
 8007486:	d547      	bpl.n	8007518 <_printf_float+0xc4>
 8007488:	189b      	adds	r3, r3, r2
 800748a:	4393      	bics	r3, r2
 800748c:	001a      	movs	r2, r3
 800748e:	3208      	adds	r2, #8
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	64a2      	str	r2, [r4, #72]	; 0x48
 8007498:	64e3      	str	r3, [r4, #76]	; 0x4c
 800749a:	2201      	movs	r2, #1
 800749c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800749e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	006b      	lsls	r3, r5, #1
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	930e      	str	r3, [sp, #56]	; 0x38
 80074a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074aa:	4ba8      	ldr	r3, [pc, #672]	; (800774c <_printf_float+0x2f8>)
 80074ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80074ae:	4252      	negs	r2, r2
 80074b0:	f7fb fa84 	bl	80029bc <__aeabi_dcmpun>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d131      	bne.n	800751c <_printf_float+0xc8>
 80074b8:	2201      	movs	r2, #1
 80074ba:	4ba4      	ldr	r3, [pc, #656]	; (800774c <_printf_float+0x2f8>)
 80074bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80074c0:	4252      	negs	r2, r2
 80074c2:	f7f8 ffd1 	bl	8000468 <__aeabi_dcmple>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d128      	bne.n	800751c <_printf_float+0xc8>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	0029      	movs	r1, r5
 80074d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074d2:	f7f8 ffbf 	bl	8000454 <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d003      	beq.n	80074e2 <_printf_float+0x8e>
 80074da:	0023      	movs	r3, r4
 80074dc:	222d      	movs	r2, #45	; 0x2d
 80074de:	3343      	adds	r3, #67	; 0x43
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	4d9b      	ldr	r5, [pc, #620]	; (8007750 <_printf_float+0x2fc>)
 80074e4:	2e47      	cmp	r6, #71	; 0x47
 80074e6:	d900      	bls.n	80074ea <_printf_float+0x96>
 80074e8:	4d9a      	ldr	r5, [pc, #616]	; (8007754 <_printf_float+0x300>)
 80074ea:	2303      	movs	r3, #3
 80074ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	3301      	adds	r3, #1
 80074f2:	439a      	bics	r2, r3
 80074f4:	2300      	movs	r3, #0
 80074f6:	6022      	str	r2, [r4, #0]
 80074f8:	930a      	str	r3, [sp, #40]	; 0x28
 80074fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fc:	0021      	movs	r1, r4
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	0038      	movs	r0, r7
 8007502:	9b08      	ldr	r3, [sp, #32]
 8007504:	aa13      	add	r2, sp, #76	; 0x4c
 8007506:	f000 f9f3 	bl	80078f0 <_printf_common>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d000      	beq.n	8007510 <_printf_float+0xbc>
 800750e:	e09e      	b.n	800764e <_printf_float+0x1fa>
 8007510:	2001      	movs	r0, #1
 8007512:	4240      	negs	r0, r0
 8007514:	b015      	add	sp, #84	; 0x54
 8007516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007518:	3307      	adds	r3, #7
 800751a:	e7b6      	b.n	800748a <_printf_float+0x36>
 800751c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751e:	002b      	movs	r3, r5
 8007520:	0010      	movs	r0, r2
 8007522:	0029      	movs	r1, r5
 8007524:	f7fb fa4a 	bl	80029bc <__aeabi_dcmpun>
 8007528:	2800      	cmp	r0, #0
 800752a:	d00a      	beq.n	8007542 <_printf_float+0xee>
 800752c:	2d00      	cmp	r5, #0
 800752e:	da03      	bge.n	8007538 <_printf_float+0xe4>
 8007530:	0023      	movs	r3, r4
 8007532:	222d      	movs	r2, #45	; 0x2d
 8007534:	3343      	adds	r3, #67	; 0x43
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	4d87      	ldr	r5, [pc, #540]	; (8007758 <_printf_float+0x304>)
 800753a:	2e47      	cmp	r6, #71	; 0x47
 800753c:	d9d5      	bls.n	80074ea <_printf_float+0x96>
 800753e:	4d87      	ldr	r5, [pc, #540]	; (800775c <_printf_float+0x308>)
 8007540:	e7d3      	b.n	80074ea <_printf_float+0x96>
 8007542:	2220      	movs	r2, #32
 8007544:	0031      	movs	r1, r6
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	4391      	bics	r1, r2
 800754a:	910e      	str	r1, [sp, #56]	; 0x38
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	d147      	bne.n	80075e0 <_printf_float+0x18c>
 8007550:	3307      	adds	r3, #7
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	4313      	orrs	r3, r2
 800755c:	2200      	movs	r2, #0
 800755e:	9206      	str	r2, [sp, #24]
 8007560:	aa12      	add	r2, sp, #72	; 0x48
 8007562:	9205      	str	r2, [sp, #20]
 8007564:	aa11      	add	r2, sp, #68	; 0x44
 8007566:	9203      	str	r2, [sp, #12]
 8007568:	2223      	movs	r2, #35	; 0x23
 800756a:	a908      	add	r1, sp, #32
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	1852      	adds	r2, r2, r1
 8007574:	9202      	str	r2, [sp, #8]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	0038      	movs	r0, r7
 800757a:	002b      	movs	r3, r5
 800757c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800757e:	9604      	str	r6, [sp, #16]
 8007580:	f7ff febe 	bl	8007300 <__cvt>
 8007584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007586:	0005      	movs	r5, r0
 8007588:	9911      	ldr	r1, [sp, #68]	; 0x44
 800758a:	2b47      	cmp	r3, #71	; 0x47
 800758c:	d108      	bne.n	80075a0 <_printf_float+0x14c>
 800758e:	1ccb      	adds	r3, r1, #3
 8007590:	db02      	blt.n	8007598 <_printf_float+0x144>
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	4299      	cmp	r1, r3
 8007596:	dd46      	ble.n	8007626 <_printf_float+0x1d2>
 8007598:	0033      	movs	r3, r6
 800759a:	3b02      	subs	r3, #2
 800759c:	b2db      	uxtb	r3, r3
 800759e:	001e      	movs	r6, r3
 80075a0:	2e65      	cmp	r6, #101	; 0x65
 80075a2:	d824      	bhi.n	80075ee <_printf_float+0x19a>
 80075a4:	0020      	movs	r0, r4
 80075a6:	0032      	movs	r2, r6
 80075a8:	3901      	subs	r1, #1
 80075aa:	3050      	adds	r0, #80	; 0x50
 80075ac:	9111      	str	r1, [sp, #68]	; 0x44
 80075ae:	f7ff ff0a 	bl	80073c6 <__exponent>
 80075b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075b4:	900a      	str	r0, [sp, #40]	; 0x28
 80075b6:	1813      	adds	r3, r2, r0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	2a01      	cmp	r2, #1
 80075bc:	dc02      	bgt.n	80075c4 <_printf_float+0x170>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	07d2      	lsls	r2, r2, #31
 80075c2:	d501      	bpl.n	80075c8 <_printf_float+0x174>
 80075c4:	3301      	adds	r3, #1
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	2323      	movs	r3, #35	; 0x23
 80075ca:	aa08      	add	r2, sp, #32
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d100      	bne.n	80075d6 <_printf_float+0x182>
 80075d4:	e791      	b.n	80074fa <_printf_float+0xa6>
 80075d6:	0023      	movs	r3, r4
 80075d8:	222d      	movs	r2, #45	; 0x2d
 80075da:	3343      	adds	r3, #67	; 0x43
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e78c      	b.n	80074fa <_printf_float+0xa6>
 80075e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e2:	2a47      	cmp	r2, #71	; 0x47
 80075e4:	d1b6      	bne.n	8007554 <_printf_float+0x100>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1b4      	bne.n	8007554 <_printf_float+0x100>
 80075ea:	3301      	adds	r3, #1
 80075ec:	e7b1      	b.n	8007552 <_printf_float+0xfe>
 80075ee:	2e66      	cmp	r6, #102	; 0x66
 80075f0:	d11b      	bne.n	800762a <_printf_float+0x1d6>
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	dd0d      	ble.n	8007614 <_printf_float+0x1c0>
 80075f8:	6121      	str	r1, [r4, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d102      	bne.n	8007604 <_printf_float+0x1b0>
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	07d2      	lsls	r2, r2, #31
 8007602:	d502      	bpl.n	800760a <_printf_float+0x1b6>
 8007604:	3301      	adds	r3, #1
 8007606:	1859      	adds	r1, r3, r1
 8007608:	6121      	str	r1, [r4, #16]
 800760a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800760c:	65a3      	str	r3, [r4, #88]	; 0x58
 800760e:	2300      	movs	r3, #0
 8007610:	930a      	str	r3, [sp, #40]	; 0x28
 8007612:	e7d9      	b.n	80075c8 <_printf_float+0x174>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <_printf_float+0x1cc>
 8007618:	2201      	movs	r2, #1
 800761a:	6821      	ldr	r1, [r4, #0]
 800761c:	4211      	tst	r1, r2
 800761e:	d000      	beq.n	8007622 <_printf_float+0x1ce>
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	e7f1      	b.n	800760a <_printf_float+0x1b6>
 8007626:	2367      	movs	r3, #103	; 0x67
 8007628:	001e      	movs	r6, r3
 800762a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800762c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800762e:	4293      	cmp	r3, r2
 8007630:	db06      	blt.n	8007640 <_printf_float+0x1ec>
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	07d2      	lsls	r2, r2, #31
 8007638:	d5e7      	bpl.n	800760a <_printf_float+0x1b6>
 800763a:	3301      	adds	r3, #1
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	e7e4      	b.n	800760a <_printf_float+0x1b6>
 8007640:	2101      	movs	r1, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	dc01      	bgt.n	800764a <_printf_float+0x1f6>
 8007646:	1849      	adds	r1, r1, r1
 8007648:	1ac9      	subs	r1, r1, r3
 800764a:	1852      	adds	r2, r2, r1
 800764c:	e7e9      	b.n	8007622 <_printf_float+0x1ce>
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	0553      	lsls	r3, r2, #21
 8007652:	d408      	bmi.n	8007666 <_printf_float+0x212>
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	002a      	movs	r2, r5
 8007658:	0038      	movs	r0, r7
 800765a:	9908      	ldr	r1, [sp, #32]
 800765c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800765e:	47a8      	blx	r5
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d129      	bne.n	80076b8 <_printf_float+0x264>
 8007664:	e754      	b.n	8007510 <_printf_float+0xbc>
 8007666:	2e65      	cmp	r6, #101	; 0x65
 8007668:	d800      	bhi.n	800766c <_printf_float+0x218>
 800766a:	e0ec      	b.n	8007846 <_printf_float+0x3f2>
 800766c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800766e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	f7f8 fee8 	bl	8000448 <__aeabi_dcmpeq>
 8007678:	2800      	cmp	r0, #0
 800767a:	d034      	beq.n	80076e6 <_printf_float+0x292>
 800767c:	2301      	movs	r3, #1
 800767e:	0038      	movs	r0, r7
 8007680:	4a37      	ldr	r2, [pc, #220]	; (8007760 <_printf_float+0x30c>)
 8007682:	9908      	ldr	r1, [sp, #32]
 8007684:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007686:	47a8      	blx	r5
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d100      	bne.n	800768e <_printf_float+0x23a>
 800768c:	e740      	b.n	8007510 <_printf_float+0xbc>
 800768e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007692:	4293      	cmp	r3, r2
 8007694:	db02      	blt.n	800769c <_printf_float+0x248>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	07db      	lsls	r3, r3, #31
 800769a:	d50d      	bpl.n	80076b8 <_printf_float+0x264>
 800769c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800769e:	0038      	movs	r0, r7
 80076a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a4:	9908      	ldr	r1, [sp, #32]
 80076a6:	47a8      	blx	r5
 80076a8:	2500      	movs	r5, #0
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d100      	bne.n	80076b0 <_printf_float+0x25c>
 80076ae:	e72f      	b.n	8007510 <_printf_float+0xbc>
 80076b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076b2:	3b01      	subs	r3, #1
 80076b4:	42ab      	cmp	r3, r5
 80076b6:	dc0a      	bgt.n	80076ce <_printf_float+0x27a>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	079b      	lsls	r3, r3, #30
 80076bc:	d500      	bpl.n	80076c0 <_printf_float+0x26c>
 80076be:	e114      	b.n	80078ea <_printf_float+0x496>
 80076c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076c2:	68e0      	ldr	r0, [r4, #12]
 80076c4:	4298      	cmp	r0, r3
 80076c6:	db00      	blt.n	80076ca <_printf_float+0x276>
 80076c8:	e724      	b.n	8007514 <_printf_float+0xc0>
 80076ca:	0018      	movs	r0, r3
 80076cc:	e722      	b.n	8007514 <_printf_float+0xc0>
 80076ce:	0022      	movs	r2, r4
 80076d0:	2301      	movs	r3, #1
 80076d2:	0038      	movs	r0, r7
 80076d4:	9908      	ldr	r1, [sp, #32]
 80076d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076d8:	321a      	adds	r2, #26
 80076da:	47b0      	blx	r6
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d100      	bne.n	80076e2 <_printf_float+0x28e>
 80076e0:	e716      	b.n	8007510 <_printf_float+0xbc>
 80076e2:	3501      	adds	r5, #1
 80076e4:	e7e4      	b.n	80076b0 <_printf_float+0x25c>
 80076e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dc3b      	bgt.n	8007764 <_printf_float+0x310>
 80076ec:	2301      	movs	r3, #1
 80076ee:	0038      	movs	r0, r7
 80076f0:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <_printf_float+0x30c>)
 80076f2:	9908      	ldr	r1, [sp, #32]
 80076f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076f6:	47b0      	blx	r6
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d100      	bne.n	80076fe <_printf_float+0x2aa>
 80076fc:	e708      	b.n	8007510 <_printf_float+0xbc>
 80076fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007700:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007702:	4313      	orrs	r3, r2
 8007704:	d102      	bne.n	800770c <_printf_float+0x2b8>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	07db      	lsls	r3, r3, #31
 800770a:	d5d5      	bpl.n	80076b8 <_printf_float+0x264>
 800770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770e:	0038      	movs	r0, r7
 8007710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007712:	9908      	ldr	r1, [sp, #32]
 8007714:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007716:	47b0      	blx	r6
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d100      	bne.n	800771e <_printf_float+0x2ca>
 800771c:	e6f8      	b.n	8007510 <_printf_float+0xbc>
 800771e:	2300      	movs	r3, #0
 8007720:	930a      	str	r3, [sp, #40]	; 0x28
 8007722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007726:	425b      	negs	r3, r3
 8007728:	4293      	cmp	r3, r2
 800772a:	dc01      	bgt.n	8007730 <_printf_float+0x2dc>
 800772c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800772e:	e792      	b.n	8007656 <_printf_float+0x202>
 8007730:	0022      	movs	r2, r4
 8007732:	2301      	movs	r3, #1
 8007734:	0038      	movs	r0, r7
 8007736:	9908      	ldr	r1, [sp, #32]
 8007738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800773a:	321a      	adds	r2, #26
 800773c:	47b0      	blx	r6
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d100      	bne.n	8007744 <_printf_float+0x2f0>
 8007742:	e6e5      	b.n	8007510 <_printf_float+0xbc>
 8007744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007746:	3301      	adds	r3, #1
 8007748:	e7ea      	b.n	8007720 <_printf_float+0x2cc>
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	7fefffff 	.word	0x7fefffff
 8007750:	0800a3ec 	.word	0x0800a3ec
 8007754:	0800a3f0 	.word	0x0800a3f0
 8007758:	0800a3f4 	.word	0x0800a3f4
 800775c:	0800a3f8 	.word	0x0800a3f8
 8007760:	0800a3fc 	.word	0x0800a3fc
 8007764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007768:	920a      	str	r2, [sp, #40]	; 0x28
 800776a:	429a      	cmp	r2, r3
 800776c:	dd00      	ble.n	8007770 <_printf_float+0x31c>
 800776e:	930a      	str	r3, [sp, #40]	; 0x28
 8007770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	dc3d      	bgt.n	80077f2 <_printf_float+0x39e>
 8007776:	2300      	movs	r3, #0
 8007778:	930e      	str	r3, [sp, #56]	; 0x38
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	43db      	mvns	r3, r3
 800777e:	17db      	asrs	r3, r3, #31
 8007780:	930f      	str	r3, [sp, #60]	; 0x3c
 8007782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007786:	930c      	str	r3, [sp, #48]	; 0x30
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	4013      	ands	r3, r2
 800778c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007792:	4293      	cmp	r3, r2
 8007794:	dc36      	bgt.n	8007804 <_printf_float+0x3b0>
 8007796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800779a:	4293      	cmp	r3, r2
 800779c:	db40      	blt.n	8007820 <_printf_float+0x3cc>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	07db      	lsls	r3, r3, #31
 80077a2:	d43d      	bmi.n	8007820 <_printf_float+0x3cc>
 80077a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	1a52      	subs	r2, r2, r1
 80077ae:	920a      	str	r2, [sp, #40]	; 0x28
 80077b0:	429a      	cmp	r2, r3
 80077b2:	dd00      	ble.n	80077b6 <_printf_float+0x362>
 80077b4:	930a      	str	r3, [sp, #40]	; 0x28
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc3a      	bgt.n	8007832 <_printf_float+0x3de>
 80077bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077be:	2500      	movs	r5, #0
 80077c0:	43db      	mvns	r3, r3
 80077c2:	17db      	asrs	r3, r3, #31
 80077c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80077c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d0:	400a      	ands	r2, r1
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	42ab      	cmp	r3, r5
 80077d6:	dc00      	bgt.n	80077da <_printf_float+0x386>
 80077d8:	e76e      	b.n	80076b8 <_printf_float+0x264>
 80077da:	0022      	movs	r2, r4
 80077dc:	2301      	movs	r3, #1
 80077de:	0038      	movs	r0, r7
 80077e0:	9908      	ldr	r1, [sp, #32]
 80077e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077e4:	321a      	adds	r2, #26
 80077e6:	47b0      	blx	r6
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d100      	bne.n	80077ee <_printf_float+0x39a>
 80077ec:	e690      	b.n	8007510 <_printf_float+0xbc>
 80077ee:	3501      	adds	r5, #1
 80077f0:	e7e9      	b.n	80077c6 <_printf_float+0x372>
 80077f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f4:	002a      	movs	r2, r5
 80077f6:	0038      	movs	r0, r7
 80077f8:	9908      	ldr	r1, [sp, #32]
 80077fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077fc:	47b0      	blx	r6
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d1b9      	bne.n	8007776 <_printf_float+0x322>
 8007802:	e685      	b.n	8007510 <_printf_float+0xbc>
 8007804:	0022      	movs	r2, r4
 8007806:	2301      	movs	r3, #1
 8007808:	0038      	movs	r0, r7
 800780a:	9908      	ldr	r1, [sp, #32]
 800780c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800780e:	321a      	adds	r2, #26
 8007810:	47b0      	blx	r6
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d100      	bne.n	8007818 <_printf_float+0x3c4>
 8007816:	e67b      	b.n	8007510 <_printf_float+0xbc>
 8007818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800781a:	3301      	adds	r3, #1
 800781c:	930e      	str	r3, [sp, #56]	; 0x38
 800781e:	e7b0      	b.n	8007782 <_printf_float+0x32e>
 8007820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007822:	0038      	movs	r0, r7
 8007824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007826:	9908      	ldr	r1, [sp, #32]
 8007828:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800782a:	47b0      	blx	r6
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d1b9      	bne.n	80077a4 <_printf_float+0x350>
 8007830:	e66e      	b.n	8007510 <_printf_float+0xbc>
 8007832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007834:	0038      	movs	r0, r7
 8007836:	18ea      	adds	r2, r5, r3
 8007838:	9908      	ldr	r1, [sp, #32]
 800783a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800783c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800783e:	47a8      	blx	r5
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d1bb      	bne.n	80077bc <_printf_float+0x368>
 8007844:	e664      	b.n	8007510 <_printf_float+0xbc>
 8007846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007848:	2b01      	cmp	r3, #1
 800784a:	dc02      	bgt.n	8007852 <_printf_float+0x3fe>
 800784c:	2301      	movs	r3, #1
 800784e:	421a      	tst	r2, r3
 8007850:	d038      	beq.n	80078c4 <_printf_float+0x470>
 8007852:	2301      	movs	r3, #1
 8007854:	002a      	movs	r2, r5
 8007856:	0038      	movs	r0, r7
 8007858:	9908      	ldr	r1, [sp, #32]
 800785a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800785c:	47b0      	blx	r6
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d100      	bne.n	8007864 <_printf_float+0x410>
 8007862:	e655      	b.n	8007510 <_printf_float+0xbc>
 8007864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007866:	0038      	movs	r0, r7
 8007868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800786a:	9908      	ldr	r1, [sp, #32]
 800786c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800786e:	47b0      	blx	r6
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d100      	bne.n	8007876 <_printf_float+0x422>
 8007874:	e64c      	b.n	8007510 <_printf_float+0xbc>
 8007876:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007878:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800787a:	2200      	movs	r2, #0
 800787c:	2300      	movs	r3, #0
 800787e:	f7f8 fde3 	bl	8000448 <__aeabi_dcmpeq>
 8007882:	2800      	cmp	r0, #0
 8007884:	d11c      	bne.n	80078c0 <_printf_float+0x46c>
 8007886:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007888:	1c6a      	adds	r2, r5, #1
 800788a:	3b01      	subs	r3, #1
 800788c:	0038      	movs	r0, r7
 800788e:	9908      	ldr	r1, [sp, #32]
 8007890:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007892:	47a8      	blx	r5
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d10f      	bne.n	80078b8 <_printf_float+0x464>
 8007898:	e63a      	b.n	8007510 <_printf_float+0xbc>
 800789a:	0022      	movs	r2, r4
 800789c:	2301      	movs	r3, #1
 800789e:	0038      	movs	r0, r7
 80078a0:	9908      	ldr	r1, [sp, #32]
 80078a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078a4:	321a      	adds	r2, #26
 80078a6:	47b0      	blx	r6
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d100      	bne.n	80078ae <_printf_float+0x45a>
 80078ac:	e630      	b.n	8007510 <_printf_float+0xbc>
 80078ae:	3501      	adds	r5, #1
 80078b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078b2:	3b01      	subs	r3, #1
 80078b4:	42ab      	cmp	r3, r5
 80078b6:	dcf0      	bgt.n	800789a <_printf_float+0x446>
 80078b8:	0022      	movs	r2, r4
 80078ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078bc:	3250      	adds	r2, #80	; 0x50
 80078be:	e6cb      	b.n	8007658 <_printf_float+0x204>
 80078c0:	2500      	movs	r5, #0
 80078c2:	e7f5      	b.n	80078b0 <_printf_float+0x45c>
 80078c4:	002a      	movs	r2, r5
 80078c6:	e7e1      	b.n	800788c <_printf_float+0x438>
 80078c8:	0022      	movs	r2, r4
 80078ca:	2301      	movs	r3, #1
 80078cc:	0038      	movs	r0, r7
 80078ce:	9908      	ldr	r1, [sp, #32]
 80078d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80078d2:	3219      	adds	r2, #25
 80078d4:	47b0      	blx	r6
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d100      	bne.n	80078dc <_printf_float+0x488>
 80078da:	e619      	b.n	8007510 <_printf_float+0xbc>
 80078dc:	3501      	adds	r5, #1
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	42ab      	cmp	r3, r5
 80078e6:	dcef      	bgt.n	80078c8 <_printf_float+0x474>
 80078e8:	e6ea      	b.n	80076c0 <_printf_float+0x26c>
 80078ea:	2500      	movs	r5, #0
 80078ec:	e7f7      	b.n	80078de <_printf_float+0x48a>
 80078ee:	46c0      	nop			; (mov r8, r8)

080078f0 <_printf_common>:
 80078f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078f2:	0015      	movs	r5, r2
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	688a      	ldr	r2, [r1, #8]
 80078f8:	690b      	ldr	r3, [r1, #16]
 80078fa:	000c      	movs	r4, r1
 80078fc:	9000      	str	r0, [sp, #0]
 80078fe:	4293      	cmp	r3, r2
 8007900:	da00      	bge.n	8007904 <_printf_common+0x14>
 8007902:	0013      	movs	r3, r2
 8007904:	0022      	movs	r2, r4
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	3243      	adds	r2, #67	; 0x43
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	2a00      	cmp	r2, #0
 800790e:	d001      	beq.n	8007914 <_printf_common+0x24>
 8007910:	3301      	adds	r3, #1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	069b      	lsls	r3, r3, #26
 8007918:	d502      	bpl.n	8007920 <_printf_common+0x30>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	3302      	adds	r3, #2
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	2306      	movs	r3, #6
 8007924:	0017      	movs	r7, r2
 8007926:	401f      	ands	r7, r3
 8007928:	421a      	tst	r2, r3
 800792a:	d027      	beq.n	800797c <_printf_common+0x8c>
 800792c:	0023      	movs	r3, r4
 800792e:	3343      	adds	r3, #67	; 0x43
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	4193      	sbcs	r3, r2
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	0692      	lsls	r2, r2, #26
 800793a:	d430      	bmi.n	800799e <_printf_common+0xae>
 800793c:	0022      	movs	r2, r4
 800793e:	9901      	ldr	r1, [sp, #4]
 8007940:	9800      	ldr	r0, [sp, #0]
 8007942:	9e08      	ldr	r6, [sp, #32]
 8007944:	3243      	adds	r2, #67	; 0x43
 8007946:	47b0      	blx	r6
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d025      	beq.n	8007998 <_printf_common+0xa8>
 800794c:	2306      	movs	r3, #6
 800794e:	6820      	ldr	r0, [r4, #0]
 8007950:	682a      	ldr	r2, [r5, #0]
 8007952:	68e1      	ldr	r1, [r4, #12]
 8007954:	2500      	movs	r5, #0
 8007956:	4003      	ands	r3, r0
 8007958:	2b04      	cmp	r3, #4
 800795a:	d103      	bne.n	8007964 <_printf_common+0x74>
 800795c:	1a8d      	subs	r5, r1, r2
 800795e:	43eb      	mvns	r3, r5
 8007960:	17db      	asrs	r3, r3, #31
 8007962:	401d      	ands	r5, r3
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	6922      	ldr	r2, [r4, #16]
 8007968:	4293      	cmp	r3, r2
 800796a:	dd01      	ble.n	8007970 <_printf_common+0x80>
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	18ed      	adds	r5, r5, r3
 8007970:	2700      	movs	r7, #0
 8007972:	42bd      	cmp	r5, r7
 8007974:	d120      	bne.n	80079b8 <_printf_common+0xc8>
 8007976:	2000      	movs	r0, #0
 8007978:	e010      	b.n	800799c <_printf_common+0xac>
 800797a:	3701      	adds	r7, #1
 800797c:	68e3      	ldr	r3, [r4, #12]
 800797e:	682a      	ldr	r2, [r5, #0]
 8007980:	1a9b      	subs	r3, r3, r2
 8007982:	42bb      	cmp	r3, r7
 8007984:	ddd2      	ble.n	800792c <_printf_common+0x3c>
 8007986:	0022      	movs	r2, r4
 8007988:	2301      	movs	r3, #1
 800798a:	9901      	ldr	r1, [sp, #4]
 800798c:	9800      	ldr	r0, [sp, #0]
 800798e:	9e08      	ldr	r6, [sp, #32]
 8007990:	3219      	adds	r2, #25
 8007992:	47b0      	blx	r6
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d1f0      	bne.n	800797a <_printf_common+0x8a>
 8007998:	2001      	movs	r0, #1
 800799a:	4240      	negs	r0, r0
 800799c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800799e:	2030      	movs	r0, #48	; 0x30
 80079a0:	18e1      	adds	r1, r4, r3
 80079a2:	3143      	adds	r1, #67	; 0x43
 80079a4:	7008      	strb	r0, [r1, #0]
 80079a6:	0021      	movs	r1, r4
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	3145      	adds	r1, #69	; 0x45
 80079ac:	7809      	ldrb	r1, [r1, #0]
 80079ae:	18a2      	adds	r2, r4, r2
 80079b0:	3243      	adds	r2, #67	; 0x43
 80079b2:	3302      	adds	r3, #2
 80079b4:	7011      	strb	r1, [r2, #0]
 80079b6:	e7c1      	b.n	800793c <_printf_common+0x4c>
 80079b8:	0022      	movs	r2, r4
 80079ba:	2301      	movs	r3, #1
 80079bc:	9901      	ldr	r1, [sp, #4]
 80079be:	9800      	ldr	r0, [sp, #0]
 80079c0:	9e08      	ldr	r6, [sp, #32]
 80079c2:	321a      	adds	r2, #26
 80079c4:	47b0      	blx	r6
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	d0e6      	beq.n	8007998 <_printf_common+0xa8>
 80079ca:	3701      	adds	r7, #1
 80079cc:	e7d1      	b.n	8007972 <_printf_common+0x82>
	...

080079d0 <_printf_i>:
 80079d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d2:	b08b      	sub	sp, #44	; 0x2c
 80079d4:	9206      	str	r2, [sp, #24]
 80079d6:	000a      	movs	r2, r1
 80079d8:	3243      	adds	r2, #67	; 0x43
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	9005      	str	r0, [sp, #20]
 80079de:	9204      	str	r2, [sp, #16]
 80079e0:	7e0a      	ldrb	r2, [r1, #24]
 80079e2:	000c      	movs	r4, r1
 80079e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079e6:	2a78      	cmp	r2, #120	; 0x78
 80079e8:	d806      	bhi.n	80079f8 <_printf_i+0x28>
 80079ea:	2a62      	cmp	r2, #98	; 0x62
 80079ec:	d808      	bhi.n	8007a00 <_printf_i+0x30>
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	d100      	bne.n	80079f4 <_printf_i+0x24>
 80079f2:	e0c0      	b.n	8007b76 <_printf_i+0x1a6>
 80079f4:	2a58      	cmp	r2, #88	; 0x58
 80079f6:	d052      	beq.n	8007a9e <_printf_i+0xce>
 80079f8:	0026      	movs	r6, r4
 80079fa:	3642      	adds	r6, #66	; 0x42
 80079fc:	7032      	strb	r2, [r6, #0]
 80079fe:	e022      	b.n	8007a46 <_printf_i+0x76>
 8007a00:	0010      	movs	r0, r2
 8007a02:	3863      	subs	r0, #99	; 0x63
 8007a04:	2815      	cmp	r0, #21
 8007a06:	d8f7      	bhi.n	80079f8 <_printf_i+0x28>
 8007a08:	f7f8 fb8e 	bl	8000128 <__gnu_thumb1_case_shi>
 8007a0c:	001f0016 	.word	0x001f0016
 8007a10:	fff6fff6 	.word	0xfff6fff6
 8007a14:	fff6fff6 	.word	0xfff6fff6
 8007a18:	fff6001f 	.word	0xfff6001f
 8007a1c:	fff6fff6 	.word	0xfff6fff6
 8007a20:	00a8fff6 	.word	0x00a8fff6
 8007a24:	009a0036 	.word	0x009a0036
 8007a28:	fff6fff6 	.word	0xfff6fff6
 8007a2c:	fff600b9 	.word	0xfff600b9
 8007a30:	fff60036 	.word	0xfff60036
 8007a34:	009efff6 	.word	0x009efff6
 8007a38:	0026      	movs	r6, r4
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	3642      	adds	r6, #66	; 0x42
 8007a3e:	1d11      	adds	r1, r2, #4
 8007a40:	6019      	str	r1, [r3, #0]
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	7033      	strb	r3, [r6, #0]
 8007a46:	2301      	movs	r3, #1
 8007a48:	e0a7      	b.n	8007b9a <_printf_i+0x1ca>
 8007a4a:	6808      	ldr	r0, [r1, #0]
 8007a4c:	6819      	ldr	r1, [r3, #0]
 8007a4e:	1d0a      	adds	r2, r1, #4
 8007a50:	0605      	lsls	r5, r0, #24
 8007a52:	d50b      	bpl.n	8007a6c <_printf_i+0x9c>
 8007a54:	680d      	ldr	r5, [r1, #0]
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	da03      	bge.n	8007a64 <_printf_i+0x94>
 8007a5c:	232d      	movs	r3, #45	; 0x2d
 8007a5e:	9a04      	ldr	r2, [sp, #16]
 8007a60:	426d      	negs	r5, r5
 8007a62:	7013      	strb	r3, [r2, #0]
 8007a64:	4b61      	ldr	r3, [pc, #388]	; (8007bec <_printf_i+0x21c>)
 8007a66:	270a      	movs	r7, #10
 8007a68:	9303      	str	r3, [sp, #12]
 8007a6a:	e032      	b.n	8007ad2 <_printf_i+0x102>
 8007a6c:	680d      	ldr	r5, [r1, #0]
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	0641      	lsls	r1, r0, #25
 8007a72:	d5f1      	bpl.n	8007a58 <_printf_i+0x88>
 8007a74:	b22d      	sxth	r5, r5
 8007a76:	e7ef      	b.n	8007a58 <_printf_i+0x88>
 8007a78:	680d      	ldr	r5, [r1, #0]
 8007a7a:	6819      	ldr	r1, [r3, #0]
 8007a7c:	1d08      	adds	r0, r1, #4
 8007a7e:	6018      	str	r0, [r3, #0]
 8007a80:	062e      	lsls	r6, r5, #24
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0xb8>
 8007a84:	680d      	ldr	r5, [r1, #0]
 8007a86:	e003      	b.n	8007a90 <_printf_i+0xc0>
 8007a88:	066d      	lsls	r5, r5, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0xb4>
 8007a8c:	680d      	ldr	r5, [r1, #0]
 8007a8e:	b2ad      	uxth	r5, r5
 8007a90:	4b56      	ldr	r3, [pc, #344]	; (8007bec <_printf_i+0x21c>)
 8007a92:	270a      	movs	r7, #10
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	2a6f      	cmp	r2, #111	; 0x6f
 8007a98:	d117      	bne.n	8007aca <_printf_i+0xfa>
 8007a9a:	2708      	movs	r7, #8
 8007a9c:	e015      	b.n	8007aca <_printf_i+0xfa>
 8007a9e:	3145      	adds	r1, #69	; 0x45
 8007aa0:	700a      	strb	r2, [r1, #0]
 8007aa2:	4a52      	ldr	r2, [pc, #328]	; (8007bec <_printf_i+0x21c>)
 8007aa4:	9203      	str	r2, [sp, #12]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	ca20      	ldmia	r2!, {r5}
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	0608      	lsls	r0, r1, #24
 8007ab0:	d550      	bpl.n	8007b54 <_printf_i+0x184>
 8007ab2:	07cb      	lsls	r3, r1, #31
 8007ab4:	d502      	bpl.n	8007abc <_printf_i+0xec>
 8007ab6:	2320      	movs	r3, #32
 8007ab8:	4319      	orrs	r1, r3
 8007aba:	6021      	str	r1, [r4, #0]
 8007abc:	2710      	movs	r7, #16
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	d103      	bne.n	8007aca <_printf_i+0xfa>
 8007ac2:	2320      	movs	r3, #32
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	439a      	bics	r2, r3
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	0023      	movs	r3, r4
 8007acc:	2200      	movs	r2, #0
 8007ace:	3343      	adds	r3, #67	; 0x43
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	6863      	ldr	r3, [r4, #4]
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db03      	blt.n	8007ae2 <_printf_i+0x112>
 8007ada:	2204      	movs	r2, #4
 8007adc:	6821      	ldr	r1, [r4, #0]
 8007ade:	4391      	bics	r1, r2
 8007ae0:	6021      	str	r1, [r4, #0]
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	d102      	bne.n	8007aec <_printf_i+0x11c>
 8007ae6:	9e04      	ldr	r6, [sp, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00c      	beq.n	8007b06 <_printf_i+0x136>
 8007aec:	9e04      	ldr	r6, [sp, #16]
 8007aee:	0028      	movs	r0, r5
 8007af0:	0039      	movs	r1, r7
 8007af2:	f7f8 fba9 	bl	8000248 <__aeabi_uidivmod>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	3e01      	subs	r6, #1
 8007afa:	5c5b      	ldrb	r3, [r3, r1]
 8007afc:	7033      	strb	r3, [r6, #0]
 8007afe:	002b      	movs	r3, r5
 8007b00:	0005      	movs	r5, r0
 8007b02:	429f      	cmp	r7, r3
 8007b04:	d9f3      	bls.n	8007aee <_printf_i+0x11e>
 8007b06:	2f08      	cmp	r7, #8
 8007b08:	d109      	bne.n	8007b1e <_printf_i+0x14e>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	07db      	lsls	r3, r3, #31
 8007b0e:	d506      	bpl.n	8007b1e <_printf_i+0x14e>
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	6922      	ldr	r2, [r4, #16]
 8007b14:	4293      	cmp	r3, r2
 8007b16:	dc02      	bgt.n	8007b1e <_printf_i+0x14e>
 8007b18:	2330      	movs	r3, #48	; 0x30
 8007b1a:	3e01      	subs	r6, #1
 8007b1c:	7033      	strb	r3, [r6, #0]
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	1b9b      	subs	r3, r3, r6
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	9b07      	ldr	r3, [sp, #28]
 8007b26:	0021      	movs	r1, r4
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	9805      	ldr	r0, [sp, #20]
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	aa09      	add	r2, sp, #36	; 0x24
 8007b30:	f7ff fede 	bl	80078f0 <_printf_common>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d135      	bne.n	8007ba4 <_printf_i+0x1d4>
 8007b38:	2001      	movs	r0, #1
 8007b3a:	4240      	negs	r0, r0
 8007b3c:	b00b      	add	sp, #44	; 0x2c
 8007b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b40:	2220      	movs	r2, #32
 8007b42:	6809      	ldr	r1, [r1, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	6022      	str	r2, [r4, #0]
 8007b48:	0022      	movs	r2, r4
 8007b4a:	2178      	movs	r1, #120	; 0x78
 8007b4c:	3245      	adds	r2, #69	; 0x45
 8007b4e:	7011      	strb	r1, [r2, #0]
 8007b50:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <_printf_i+0x220>)
 8007b52:	e7a7      	b.n	8007aa4 <_printf_i+0xd4>
 8007b54:	0648      	lsls	r0, r1, #25
 8007b56:	d5ac      	bpl.n	8007ab2 <_printf_i+0xe2>
 8007b58:	b2ad      	uxth	r5, r5
 8007b5a:	e7aa      	b.n	8007ab2 <_printf_i+0xe2>
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	680d      	ldr	r5, [r1, #0]
 8007b60:	1d10      	adds	r0, r2, #4
 8007b62:	6949      	ldr	r1, [r1, #20]
 8007b64:	6018      	str	r0, [r3, #0]
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	062e      	lsls	r6, r5, #24
 8007b6a:	d501      	bpl.n	8007b70 <_printf_i+0x1a0>
 8007b6c:	6019      	str	r1, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <_printf_i+0x1a6>
 8007b70:	066d      	lsls	r5, r5, #25
 8007b72:	d5fb      	bpl.n	8007b6c <_printf_i+0x19c>
 8007b74:	8019      	strh	r1, [r3, #0]
 8007b76:	2300      	movs	r3, #0
 8007b78:	9e04      	ldr	r6, [sp, #16]
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	e7d2      	b.n	8007b24 <_printf_i+0x154>
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	1d11      	adds	r1, r2, #4
 8007b82:	6019      	str	r1, [r3, #0]
 8007b84:	6816      	ldr	r6, [r2, #0]
 8007b86:	2100      	movs	r1, #0
 8007b88:	0030      	movs	r0, r6
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	f000 ff0a 	bl	80089a4 <memchr>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d001      	beq.n	8007b98 <_printf_i+0x1c8>
 8007b94:	1b80      	subs	r0, r0, r6
 8007b96:	6060      	str	r0, [r4, #4]
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	6123      	str	r3, [r4, #16]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	9a04      	ldr	r2, [sp, #16]
 8007ba0:	7013      	strb	r3, [r2, #0]
 8007ba2:	e7bf      	b.n	8007b24 <_printf_i+0x154>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	0032      	movs	r2, r6
 8007ba8:	9906      	ldr	r1, [sp, #24]
 8007baa:	9805      	ldr	r0, [sp, #20]
 8007bac:	9d07      	ldr	r5, [sp, #28]
 8007bae:	47a8      	blx	r5
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d0c1      	beq.n	8007b38 <_printf_i+0x168>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	079b      	lsls	r3, r3, #30
 8007bb8:	d415      	bmi.n	8007be6 <_printf_i+0x216>
 8007bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbc:	68e0      	ldr	r0, [r4, #12]
 8007bbe:	4298      	cmp	r0, r3
 8007bc0:	dabc      	bge.n	8007b3c <_printf_i+0x16c>
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	e7ba      	b.n	8007b3c <_printf_i+0x16c>
 8007bc6:	0022      	movs	r2, r4
 8007bc8:	2301      	movs	r3, #1
 8007bca:	9906      	ldr	r1, [sp, #24]
 8007bcc:	9805      	ldr	r0, [sp, #20]
 8007bce:	9e07      	ldr	r6, [sp, #28]
 8007bd0:	3219      	adds	r2, #25
 8007bd2:	47b0      	blx	r6
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d0af      	beq.n	8007b38 <_printf_i+0x168>
 8007bd8:	3501      	adds	r5, #1
 8007bda:	68e3      	ldr	r3, [r4, #12]
 8007bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	dcf0      	bgt.n	8007bc6 <_printf_i+0x1f6>
 8007be4:	e7e9      	b.n	8007bba <_printf_i+0x1ea>
 8007be6:	2500      	movs	r5, #0
 8007be8:	e7f7      	b.n	8007bda <_printf_i+0x20a>
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	0800a3fe 	.word	0x0800a3fe
 8007bf0:	0800a40f 	.word	0x0800a40f

08007bf4 <siprintf>:
 8007bf4:	b40e      	push	{r1, r2, r3}
 8007bf6:	b500      	push	{lr}
 8007bf8:	490b      	ldr	r1, [pc, #44]	; (8007c28 <siprintf+0x34>)
 8007bfa:	b09c      	sub	sp, #112	; 0x70
 8007bfc:	ab1d      	add	r3, sp, #116	; 0x74
 8007bfe:	9002      	str	r0, [sp, #8]
 8007c00:	9006      	str	r0, [sp, #24]
 8007c02:	9107      	str	r1, [sp, #28]
 8007c04:	9104      	str	r1, [sp, #16]
 8007c06:	4809      	ldr	r0, [pc, #36]	; (8007c2c <siprintf+0x38>)
 8007c08:	4909      	ldr	r1, [pc, #36]	; (8007c30 <siprintf+0x3c>)
 8007c0a:	cb04      	ldmia	r3!, {r2}
 8007c0c:	9105      	str	r1, [sp, #20]
 8007c0e:	6800      	ldr	r0, [r0, #0]
 8007c10:	a902      	add	r1, sp, #8
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	f001 fb90 	bl	8009338 <_svfiprintf_r>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9a02      	ldr	r2, [sp, #8]
 8007c1c:	7013      	strb	r3, [r2, #0]
 8007c1e:	b01c      	add	sp, #112	; 0x70
 8007c20:	bc08      	pop	{r3}
 8007c22:	b003      	add	sp, #12
 8007c24:	4718      	bx	r3
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	7fffffff 	.word	0x7fffffff
 8007c2c:	2000003c 	.word	0x2000003c
 8007c30:	ffff0208 	.word	0xffff0208

08007c34 <quorem>:
 8007c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c36:	0006      	movs	r6, r0
 8007c38:	690d      	ldr	r5, [r1, #16]
 8007c3a:	6933      	ldr	r3, [r6, #16]
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	2000      	movs	r0, #0
 8007c40:	9102      	str	r1, [sp, #8]
 8007c42:	42ab      	cmp	r3, r5
 8007c44:	db6b      	blt.n	8007d1e <quorem+0xea>
 8007c46:	000b      	movs	r3, r1
 8007c48:	3d01      	subs	r5, #1
 8007c4a:	00ac      	lsls	r4, r5, #2
 8007c4c:	3314      	adds	r3, #20
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	191b      	adds	r3, r3, r4
 8007c52:	9303      	str	r3, [sp, #12]
 8007c54:	0033      	movs	r3, r6
 8007c56:	3314      	adds	r3, #20
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	191c      	adds	r4, r3, r4
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	6827      	ldr	r7, [r4, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	0038      	movs	r0, r7
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	0019      	movs	r1, r3
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	f7f8 fa66 	bl	800013c <__udivsi3>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	9000      	str	r0, [sp, #0]
 8007c74:	429f      	cmp	r7, r3
 8007c76:	d329      	bcc.n	8007ccc <quorem+0x98>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	469c      	mov	ip, r3
 8007c7c:	9801      	ldr	r0, [sp, #4]
 8007c7e:	9f05      	ldr	r7, [sp, #20]
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	cf08      	ldmia	r7!, {r3}
 8007c84:	9a00      	ldr	r2, [sp, #0]
 8007c86:	b299      	uxth	r1, r3
 8007c88:	4351      	muls	r1, r2
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	4353      	muls	r3, r2
 8007c8e:	4461      	add	r1, ip
 8007c90:	0c0a      	lsrs	r2, r1, #16
 8007c92:	189b      	adds	r3, r3, r2
 8007c94:	0c1a      	lsrs	r2, r3, #16
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	6803      	ldr	r3, [r0, #0]
 8007c9a:	4694      	mov	ip, r2
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	b289      	uxth	r1, r1
 8007ca2:	18d2      	adds	r2, r2, r3
 8007ca4:	6803      	ldr	r3, [r0, #0]
 8007ca6:	1a52      	subs	r2, r2, r1
 8007ca8:	0c19      	lsrs	r1, r3, #16
 8007caa:	466b      	mov	r3, sp
 8007cac:	8a9b      	ldrh	r3, [r3, #20]
 8007cae:	1acb      	subs	r3, r1, r3
 8007cb0:	1411      	asrs	r1, r2, #16
 8007cb2:	185b      	adds	r3, r3, r1
 8007cb4:	1419      	asrs	r1, r3, #16
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	9104      	str	r1, [sp, #16]
 8007cc0:	c004      	stmia	r0!, {r2}
 8007cc2:	42bb      	cmp	r3, r7
 8007cc4:	d2dd      	bcs.n	8007c82 <quorem+0x4e>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02e      	beq.n	8007d2a <quorem+0xf6>
 8007ccc:	0030      	movs	r0, r6
 8007cce:	9902      	ldr	r1, [sp, #8]
 8007cd0:	f001 f902 	bl	8008ed8 <__mcmp>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	db21      	blt.n	8007d1c <quorem+0xe8>
 8007cd8:	0030      	movs	r0, r6
 8007cda:	2400      	movs	r4, #0
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	9902      	ldr	r1, [sp, #8]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	3014      	adds	r0, #20
 8007ce6:	3114      	adds	r1, #20
 8007ce8:	6802      	ldr	r2, [r0, #0]
 8007cea:	c908      	ldmia	r1!, {r3}
 8007cec:	b292      	uxth	r2, r2
 8007cee:	1914      	adds	r4, r2, r4
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	1aa2      	subs	r2, r4, r2
 8007cf4:	6804      	ldr	r4, [r0, #0]
 8007cf6:	0c1b      	lsrs	r3, r3, #16
 8007cf8:	0c24      	lsrs	r4, r4, #16
 8007cfa:	1ae3      	subs	r3, r4, r3
 8007cfc:	1414      	asrs	r4, r2, #16
 8007cfe:	191b      	adds	r3, r3, r4
 8007d00:	141c      	asrs	r4, r3, #16
 8007d02:	b292      	uxth	r2, r2
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	4313      	orrs	r3, r2
 8007d08:	c008      	stmia	r0!, {r3}
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	428b      	cmp	r3, r1
 8007d0e:	d2eb      	bcs.n	8007ce8 <quorem+0xb4>
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	00ab      	lsls	r3, r5, #2
 8007d14:	18d3      	adds	r3, r2, r3
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	d010      	beq.n	8007d3e <quorem+0x10a>
 8007d1c:	9800      	ldr	r0, [sp, #0]
 8007d1e:	b007      	add	sp, #28
 8007d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <quorem+0xfe>
 8007d28:	3d01      	subs	r5, #1
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	3c04      	subs	r4, #4
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	d3f7      	bcc.n	8007d22 <quorem+0xee>
 8007d32:	6135      	str	r5, [r6, #16]
 8007d34:	e7ca      	b.n	8007ccc <quorem+0x98>
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d104      	bne.n	8007d46 <quorem+0x112>
 8007d3c:	3d01      	subs	r5, #1
 8007d3e:	9a01      	ldr	r2, [sp, #4]
 8007d40:	3b04      	subs	r3, #4
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d3f7      	bcc.n	8007d36 <quorem+0x102>
 8007d46:	6135      	str	r5, [r6, #16]
 8007d48:	e7e8      	b.n	8007d1c <quorem+0xe8>
	...

08007d4c <_dtoa_r>:
 8007d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4e:	b09d      	sub	sp, #116	; 0x74
 8007d50:	9202      	str	r2, [sp, #8]
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	9c03      	ldr	r4, [sp, #12]
 8007d58:	930a      	str	r3, [sp, #40]	; 0x28
 8007d5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d5e:	0007      	movs	r7, r0
 8007d60:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	d10e      	bne.n	8007d84 <_dtoa_r+0x38>
 8007d66:	2010      	movs	r0, #16
 8007d68:	f000 fe12 	bl	8008990 <malloc>
 8007d6c:	1e02      	subs	r2, r0, #0
 8007d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d70:	d104      	bne.n	8007d7c <_dtoa_r+0x30>
 8007d72:	21ea      	movs	r1, #234	; 0xea
 8007d74:	4bc0      	ldr	r3, [pc, #768]	; (8008078 <_dtoa_r+0x32c>)
 8007d76:	48c1      	ldr	r0, [pc, #772]	; (800807c <_dtoa_r+0x330>)
 8007d78:	f001 fbf0 	bl	800955c <__assert_func>
 8007d7c:	6044      	str	r4, [r0, #4]
 8007d7e:	6084      	str	r4, [r0, #8]
 8007d80:	6004      	str	r4, [r0, #0]
 8007d82:	60c4      	str	r4, [r0, #12]
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	6819      	ldr	r1, [r3, #0]
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d00a      	beq.n	8007da2 <_dtoa_r+0x56>
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4093      	lsls	r3, r2
 8007d92:	604a      	str	r2, [r1, #4]
 8007d94:	608b      	str	r3, [r1, #8]
 8007d96:	0038      	movs	r0, r7
 8007d98:	f000 fe5c 	bl	8008a54 <_Bfree>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	da21      	bge.n	8007dec <_dtoa_r+0xa0>
 8007da8:	2301      	movs	r3, #1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007db6:	4bb2      	ldr	r3, [pc, #712]	; (8008080 <_dtoa_r+0x334>)
 8007db8:	002a      	movs	r2, r5
 8007dba:	9318      	str	r3, [sp, #96]	; 0x60
 8007dbc:	401a      	ands	r2, r3
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d117      	bne.n	8007df2 <_dtoa_r+0xa6>
 8007dc2:	4bb0      	ldr	r3, [pc, #704]	; (8008084 <_dtoa_r+0x338>)
 8007dc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007dc6:	0328      	lsls	r0, r5, #12
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	0b00      	lsrs	r0, r0, #12
 8007dce:	4318      	orrs	r0, r3
 8007dd0:	d101      	bne.n	8007dd6 <_dtoa_r+0x8a>
 8007dd2:	f000 fdc3 	bl	800895c <_dtoa_r+0xc10>
 8007dd6:	48ac      	ldr	r0, [pc, #688]	; (8008088 <_dtoa_r+0x33c>)
 8007dd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dda:	9005      	str	r0, [sp, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <_dtoa_r+0x9a>
 8007de0:	4baa      	ldr	r3, [pc, #680]	; (800808c <_dtoa_r+0x340>)
 8007de2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	9805      	ldr	r0, [sp, #20]
 8007de8:	b01d      	add	sp, #116	; 0x74
 8007dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dec:	2300      	movs	r3, #0
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	e7e0      	b.n	8007db4 <_dtoa_r+0x68>
 8007df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007df6:	9312      	str	r3, [sp, #72]	; 0x48
 8007df8:	9413      	str	r4, [sp, #76]	; 0x4c
 8007dfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2300      	movs	r3, #0
 8007e02:	f7f8 fb21 	bl	8000448 <__aeabi_dcmpeq>
 8007e06:	1e04      	subs	r4, r0, #0
 8007e08:	d00b      	beq.n	8007e22 <_dtoa_r+0xd6>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	4b9f      	ldr	r3, [pc, #636]	; (8008090 <_dtoa_r+0x344>)
 8007e12:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e14:	9305      	str	r3, [sp, #20]
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	d0e5      	beq.n	8007de6 <_dtoa_r+0x9a>
 8007e1a:	4a9e      	ldr	r2, [pc, #632]	; (8008094 <_dtoa_r+0x348>)
 8007e1c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007e1e:	600a      	str	r2, [r1, #0]
 8007e20:	e7e1      	b.n	8007de6 <_dtoa_r+0x9a>
 8007e22:	ab1a      	add	r3, sp, #104	; 0x68
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	ab1b      	add	r3, sp, #108	; 0x6c
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	0038      	movs	r0, r7
 8007e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e30:	f001 f906 	bl	8009040 <__d2b>
 8007e34:	006e      	lsls	r6, r5, #1
 8007e36:	9004      	str	r0, [sp, #16]
 8007e38:	0d76      	lsrs	r6, r6, #21
 8007e3a:	d100      	bne.n	8007e3e <_dtoa_r+0xf2>
 8007e3c:	e07c      	b.n	8007f38 <_dtoa_r+0x1ec>
 8007e3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e40:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e44:	4a94      	ldr	r2, [pc, #592]	; (8008098 <_dtoa_r+0x34c>)
 8007e46:	031b      	lsls	r3, r3, #12
 8007e48:	0b1b      	lsrs	r3, r3, #12
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	0011      	movs	r1, r2
 8007e4e:	4b93      	ldr	r3, [pc, #588]	; (800809c <_dtoa_r+0x350>)
 8007e50:	9416      	str	r4, [sp, #88]	; 0x58
 8007e52:	18f6      	adds	r6, r6, r3
 8007e54:	2200      	movs	r2, #0
 8007e56:	4b92      	ldr	r3, [pc, #584]	; (80080a0 <_dtoa_r+0x354>)
 8007e58:	f7fa fa1e 	bl	8002298 <__aeabi_dsub>
 8007e5c:	4a91      	ldr	r2, [pc, #580]	; (80080a4 <_dtoa_r+0x358>)
 8007e5e:	4b92      	ldr	r3, [pc, #584]	; (80080a8 <_dtoa_r+0x35c>)
 8007e60:	f7f9 ffae 	bl	8001dc0 <__aeabi_dmul>
 8007e64:	4a91      	ldr	r2, [pc, #580]	; (80080ac <_dtoa_r+0x360>)
 8007e66:	4b92      	ldr	r3, [pc, #584]	; (80080b0 <_dtoa_r+0x364>)
 8007e68:	f7f9 f83a 	bl	8000ee0 <__aeabi_dadd>
 8007e6c:	0004      	movs	r4, r0
 8007e6e:	0030      	movs	r0, r6
 8007e70:	000d      	movs	r5, r1
 8007e72:	f7fa fdf7 	bl	8002a64 <__aeabi_i2d>
 8007e76:	4a8f      	ldr	r2, [pc, #572]	; (80080b4 <_dtoa_r+0x368>)
 8007e78:	4b8f      	ldr	r3, [pc, #572]	; (80080b8 <_dtoa_r+0x36c>)
 8007e7a:	f7f9 ffa1 	bl	8001dc0 <__aeabi_dmul>
 8007e7e:	0002      	movs	r2, r0
 8007e80:	000b      	movs	r3, r1
 8007e82:	0020      	movs	r0, r4
 8007e84:	0029      	movs	r1, r5
 8007e86:	f7f9 f82b 	bl	8000ee0 <__aeabi_dadd>
 8007e8a:	0004      	movs	r4, r0
 8007e8c:	000d      	movs	r5, r1
 8007e8e:	f7fa fdb3 	bl	80029f8 <__aeabi_d2iz>
 8007e92:	2200      	movs	r2, #0
 8007e94:	9002      	str	r0, [sp, #8]
 8007e96:	2300      	movs	r3, #0
 8007e98:	0020      	movs	r0, r4
 8007e9a:	0029      	movs	r1, r5
 8007e9c:	f7f8 fada 	bl	8000454 <__aeabi_dcmplt>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d00b      	beq.n	8007ebc <_dtoa_r+0x170>
 8007ea4:	9802      	ldr	r0, [sp, #8]
 8007ea6:	f7fa fddd 	bl	8002a64 <__aeabi_i2d>
 8007eaa:	002b      	movs	r3, r5
 8007eac:	0022      	movs	r2, r4
 8007eae:	f7f8 facb 	bl	8000448 <__aeabi_dcmpeq>
 8007eb2:	4243      	negs	r3, r0
 8007eb4:	4158      	adcs	r0, r3
 8007eb6:	9b02      	ldr	r3, [sp, #8]
 8007eb8:	1a1b      	subs	r3, r3, r0
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	9315      	str	r3, [sp, #84]	; 0x54
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	2b16      	cmp	r3, #22
 8007ec4:	d80f      	bhi.n	8007ee6 <_dtoa_r+0x19a>
 8007ec6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ec8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007eca:	00da      	lsls	r2, r3, #3
 8007ecc:	4b7b      	ldr	r3, [pc, #492]	; (80080bc <_dtoa_r+0x370>)
 8007ece:	189b      	adds	r3, r3, r2
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f7f8 fabe 	bl	8000454 <__aeabi_dcmplt>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d049      	beq.n	8007f70 <_dtoa_r+0x224>
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	9302      	str	r3, [sp, #8]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9315      	str	r3, [sp, #84]	; 0x54
 8007ee6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ee8:	1b9e      	subs	r6, r3, r6
 8007eea:	2300      	movs	r3, #0
 8007eec:	9308      	str	r3, [sp, #32]
 8007eee:	0033      	movs	r3, r6
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ef4:	d504      	bpl.n	8007f00 <_dtoa_r+0x1b4>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	1b9b      	subs	r3, r3, r6
 8007efa:	9308      	str	r3, [sp, #32]
 8007efc:	2300      	movs	r3, #0
 8007efe:	930d      	str	r3, [sp, #52]	; 0x34
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	db36      	blt.n	8007f74 <_dtoa_r+0x228>
 8007f06:	9a02      	ldr	r2, [sp, #8]
 8007f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0a:	4694      	mov	ip, r2
 8007f0c:	4463      	add	r3, ip
 8007f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f10:	2300      	movs	r3, #0
 8007f12:	9214      	str	r2, [sp, #80]	; 0x50
 8007f14:	930e      	str	r3, [sp, #56]	; 0x38
 8007f16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f18:	2401      	movs	r4, #1
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d862      	bhi.n	8007fe4 <_dtoa_r+0x298>
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	dd02      	ble.n	8007f28 <_dtoa_r+0x1dc>
 8007f22:	2400      	movs	r4, #0
 8007f24:	3b04      	subs	r3, #4
 8007f26:	9322      	str	r3, [sp, #136]	; 0x88
 8007f28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f2a:	1e98      	subs	r0, r3, #2
 8007f2c:	2803      	cmp	r0, #3
 8007f2e:	d862      	bhi.n	8007ff6 <_dtoa_r+0x2aa>
 8007f30:	f7f8 f8f0 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007f34:	56343629 	.word	0x56343629
 8007f38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007f3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007f3c:	189e      	adds	r6, r3, r2
 8007f3e:	4b60      	ldr	r3, [pc, #384]	; (80080c0 <_dtoa_r+0x374>)
 8007f40:	18f2      	adds	r2, r6, r3
 8007f42:	2a20      	cmp	r2, #32
 8007f44:	dd0f      	ble.n	8007f66 <_dtoa_r+0x21a>
 8007f46:	2340      	movs	r3, #64	; 0x40
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	409d      	lsls	r5, r3
 8007f4c:	4b5d      	ldr	r3, [pc, #372]	; (80080c4 <_dtoa_r+0x378>)
 8007f4e:	9802      	ldr	r0, [sp, #8]
 8007f50:	18f3      	adds	r3, r6, r3
 8007f52:	40d8      	lsrs	r0, r3
 8007f54:	4328      	orrs	r0, r5
 8007f56:	f7fa fdb5 	bl	8002ac4 <__aeabi_ui2d>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4c5a      	ldr	r4, [pc, #360]	; (80080c8 <_dtoa_r+0x37c>)
 8007f5e:	3e01      	subs	r6, #1
 8007f60:	1909      	adds	r1, r1, r4
 8007f62:	9316      	str	r3, [sp, #88]	; 0x58
 8007f64:	e776      	b.n	8007e54 <_dtoa_r+0x108>
 8007f66:	2320      	movs	r3, #32
 8007f68:	9802      	ldr	r0, [sp, #8]
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	4098      	lsls	r0, r3
 8007f6e:	e7f2      	b.n	8007f56 <_dtoa_r+0x20a>
 8007f70:	9015      	str	r0, [sp, #84]	; 0x54
 8007f72:	e7b8      	b.n	8007ee6 <_dtoa_r+0x19a>
 8007f74:	9b08      	ldr	r3, [sp, #32]
 8007f76:	9a02      	ldr	r2, [sp, #8]
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	9308      	str	r3, [sp, #32]
 8007f7c:	4253      	negs	r3, r2
 8007f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8007f80:	2300      	movs	r3, #0
 8007f82:	9314      	str	r3, [sp, #80]	; 0x50
 8007f84:	e7c7      	b.n	8007f16 <_dtoa_r+0x1ca>
 8007f86:	2300      	movs	r3, #0
 8007f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dc36      	bgt.n	8007ffe <_dtoa_r+0x2b2>
 8007f90:	2301      	movs	r3, #1
 8007f92:	001a      	movs	r2, r3
 8007f94:	930c      	str	r3, [sp, #48]	; 0x30
 8007f96:	9306      	str	r3, [sp, #24]
 8007f98:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f9a:	e00d      	b.n	8007fb8 <_dtoa_r+0x26c>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e7f3      	b.n	8007f88 <_dtoa_r+0x23c>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa6:	4694      	mov	ip, r2
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	4463      	add	r3, ip
 8007fac:	930c      	str	r3, [sp, #48]	; 0x30
 8007fae:	3301      	adds	r3, #1
 8007fb0:	9306      	str	r3, [sp, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc00      	bgt.n	8007fb8 <_dtoa_r+0x26c>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	2200      	movs	r2, #0
 8007fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fbc:	6042      	str	r2, [r0, #4]
 8007fbe:	3204      	adds	r2, #4
 8007fc0:	0015      	movs	r5, r2
 8007fc2:	3514      	adds	r5, #20
 8007fc4:	6841      	ldr	r1, [r0, #4]
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	d91d      	bls.n	8008006 <_dtoa_r+0x2ba>
 8007fca:	0038      	movs	r0, r7
 8007fcc:	f000 fcfe 	bl	80089cc <_Balloc>
 8007fd0:	9005      	str	r0, [sp, #20]
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d11b      	bne.n	800800e <_dtoa_r+0x2c2>
 8007fd6:	21d5      	movs	r1, #213	; 0xd5
 8007fd8:	0002      	movs	r2, r0
 8007fda:	4b3c      	ldr	r3, [pc, #240]	; (80080cc <_dtoa_r+0x380>)
 8007fdc:	0049      	lsls	r1, r1, #1
 8007fde:	e6ca      	b.n	8007d76 <_dtoa_r+0x2a>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7de      	b.n	8007fa2 <_dtoa_r+0x256>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	940f      	str	r4, [sp, #60]	; 0x3c
 8007fe8:	9322      	str	r3, [sp, #136]	; 0x88
 8007fea:	3b01      	subs	r3, #1
 8007fec:	930c      	str	r3, [sp, #48]	; 0x30
 8007fee:	9306      	str	r3, [sp, #24]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	3313      	adds	r3, #19
 8007ff4:	e7d0      	b.n	8007f98 <_dtoa_r+0x24c>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ffa:	3b02      	subs	r3, #2
 8007ffc:	e7f6      	b.n	8007fec <_dtoa_r+0x2a0>
 8007ffe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008000:	930c      	str	r3, [sp, #48]	; 0x30
 8008002:	9306      	str	r3, [sp, #24]
 8008004:	e7d8      	b.n	8007fb8 <_dtoa_r+0x26c>
 8008006:	3101      	adds	r1, #1
 8008008:	6041      	str	r1, [r0, #4]
 800800a:	0052      	lsls	r2, r2, #1
 800800c:	e7d8      	b.n	8007fc0 <_dtoa_r+0x274>
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	9a05      	ldr	r2, [sp, #20]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	9b06      	ldr	r3, [sp, #24]
 8008016:	2b0e      	cmp	r3, #14
 8008018:	d900      	bls.n	800801c <_dtoa_r+0x2d0>
 800801a:	e0eb      	b.n	80081f4 <_dtoa_r+0x4a8>
 800801c:	2c00      	cmp	r4, #0
 800801e:	d100      	bne.n	8008022 <_dtoa_r+0x2d6>
 8008020:	e0e8      	b.n	80081f4 <_dtoa_r+0x4a8>
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd68      	ble.n	80080fa <_dtoa_r+0x3ae>
 8008028:	001a      	movs	r2, r3
 800802a:	210f      	movs	r1, #15
 800802c:	4b23      	ldr	r3, [pc, #140]	; (80080bc <_dtoa_r+0x370>)
 800802e:	400a      	ands	r2, r1
 8008030:	00d2      	lsls	r2, r2, #3
 8008032:	189b      	adds	r3, r3, r2
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	685e      	ldr	r6, [r3, #4]
 8008038:	9b02      	ldr	r3, [sp, #8]
 800803a:	111c      	asrs	r4, r3, #4
 800803c:	2302      	movs	r3, #2
 800803e:	9310      	str	r3, [sp, #64]	; 0x40
 8008040:	9b02      	ldr	r3, [sp, #8]
 8008042:	05db      	lsls	r3, r3, #23
 8008044:	d50b      	bpl.n	800805e <_dtoa_r+0x312>
 8008046:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <_dtoa_r+0x384>)
 8008048:	400c      	ands	r4, r1
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008050:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008052:	f7f9 faaf 	bl	80015b4 <__aeabi_ddiv>
 8008056:	2303      	movs	r3, #3
 8008058:	900a      	str	r0, [sp, #40]	; 0x28
 800805a:	910b      	str	r1, [sp, #44]	; 0x2c
 800805c:	9310      	str	r3, [sp, #64]	; 0x40
 800805e:	4b1c      	ldr	r3, [pc, #112]	; (80080d0 <_dtoa_r+0x384>)
 8008060:	9307      	str	r3, [sp, #28]
 8008062:	2c00      	cmp	r4, #0
 8008064:	d136      	bne.n	80080d4 <_dtoa_r+0x388>
 8008066:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800806a:	002a      	movs	r2, r5
 800806c:	0033      	movs	r3, r6
 800806e:	f7f9 faa1 	bl	80015b4 <__aeabi_ddiv>
 8008072:	900a      	str	r0, [sp, #40]	; 0x28
 8008074:	910b      	str	r1, [sp, #44]	; 0x2c
 8008076:	e05c      	b.n	8008132 <_dtoa_r+0x3e6>
 8008078:	0800a42d 	.word	0x0800a42d
 800807c:	0800a444 	.word	0x0800a444
 8008080:	7ff00000 	.word	0x7ff00000
 8008084:	0000270f 	.word	0x0000270f
 8008088:	0800a429 	.word	0x0800a429
 800808c:	0800a42c 	.word	0x0800a42c
 8008090:	0800a3fc 	.word	0x0800a3fc
 8008094:	0800a3fd 	.word	0x0800a3fd
 8008098:	3ff00000 	.word	0x3ff00000
 800809c:	fffffc01 	.word	0xfffffc01
 80080a0:	3ff80000 	.word	0x3ff80000
 80080a4:	636f4361 	.word	0x636f4361
 80080a8:	3fd287a7 	.word	0x3fd287a7
 80080ac:	8b60c8b3 	.word	0x8b60c8b3
 80080b0:	3fc68a28 	.word	0x3fc68a28
 80080b4:	509f79fb 	.word	0x509f79fb
 80080b8:	3fd34413 	.word	0x3fd34413
 80080bc:	0800a540 	.word	0x0800a540
 80080c0:	00000432 	.word	0x00000432
 80080c4:	00000412 	.word	0x00000412
 80080c8:	fe100000 	.word	0xfe100000
 80080cc:	0800a4a3 	.word	0x0800a4a3
 80080d0:	0800a518 	.word	0x0800a518
 80080d4:	2301      	movs	r3, #1
 80080d6:	421c      	tst	r4, r3
 80080d8:	d00b      	beq.n	80080f2 <_dtoa_r+0x3a6>
 80080da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080dc:	0028      	movs	r0, r5
 80080de:	3301      	adds	r3, #1
 80080e0:	9310      	str	r3, [sp, #64]	; 0x40
 80080e2:	9b07      	ldr	r3, [sp, #28]
 80080e4:	0031      	movs	r1, r6
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f7f9 fe69 	bl	8001dc0 <__aeabi_dmul>
 80080ee:	0005      	movs	r5, r0
 80080f0:	000e      	movs	r6, r1
 80080f2:	9b07      	ldr	r3, [sp, #28]
 80080f4:	1064      	asrs	r4, r4, #1
 80080f6:	3308      	adds	r3, #8
 80080f8:	e7b2      	b.n	8008060 <_dtoa_r+0x314>
 80080fa:	2302      	movs	r3, #2
 80080fc:	9310      	str	r3, [sp, #64]	; 0x40
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d016      	beq.n	8008132 <_dtoa_r+0x3e6>
 8008104:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008106:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008108:	425c      	negs	r4, r3
 800810a:	230f      	movs	r3, #15
 800810c:	4ab5      	ldr	r2, [pc, #724]	; (80083e4 <_dtoa_r+0x698>)
 800810e:	4023      	ands	r3, r4
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	18d3      	adds	r3, r2, r3
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f7f9 fe52 	bl	8001dc0 <__aeabi_dmul>
 800811c:	2601      	movs	r6, #1
 800811e:	2300      	movs	r3, #0
 8008120:	900a      	str	r0, [sp, #40]	; 0x28
 8008122:	910b      	str	r1, [sp, #44]	; 0x2c
 8008124:	4db0      	ldr	r5, [pc, #704]	; (80083e8 <_dtoa_r+0x69c>)
 8008126:	1124      	asrs	r4, r4, #4
 8008128:	2c00      	cmp	r4, #0
 800812a:	d000      	beq.n	800812e <_dtoa_r+0x3e2>
 800812c:	e094      	b.n	8008258 <_dtoa_r+0x50c>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d19f      	bne.n	8008072 <_dtoa_r+0x326>
 8008132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008134:	2b00      	cmp	r3, #0
 8008136:	d100      	bne.n	800813a <_dtoa_r+0x3ee>
 8008138:	e09b      	b.n	8008272 <_dtoa_r+0x526>
 800813a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800813c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800813e:	2200      	movs	r2, #0
 8008140:	0020      	movs	r0, r4
 8008142:	0029      	movs	r1, r5
 8008144:	4ba9      	ldr	r3, [pc, #676]	; (80083ec <_dtoa_r+0x6a0>)
 8008146:	f7f8 f985 	bl	8000454 <__aeabi_dcmplt>
 800814a:	2800      	cmp	r0, #0
 800814c:	d100      	bne.n	8008150 <_dtoa_r+0x404>
 800814e:	e090      	b.n	8008272 <_dtoa_r+0x526>
 8008150:	9b06      	ldr	r3, [sp, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d100      	bne.n	8008158 <_dtoa_r+0x40c>
 8008156:	e08c      	b.n	8008272 <_dtoa_r+0x526>
 8008158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd46      	ble.n	80081ec <_dtoa_r+0x4a0>
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	0020      	movs	r0, r4
 8008164:	0029      	movs	r1, r5
 8008166:	1e5e      	subs	r6, r3, #1
 8008168:	4ba1      	ldr	r3, [pc, #644]	; (80083f0 <_dtoa_r+0x6a4>)
 800816a:	f7f9 fe29 	bl	8001dc0 <__aeabi_dmul>
 800816e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008170:	900a      	str	r0, [sp, #40]	; 0x28
 8008172:	910b      	str	r1, [sp, #44]	; 0x2c
 8008174:	3301      	adds	r3, #1
 8008176:	9310      	str	r3, [sp, #64]	; 0x40
 8008178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800817a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800817c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800817e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	f7fa fc6f 	bl	8002a64 <__aeabi_i2d>
 8008186:	0022      	movs	r2, r4
 8008188:	002b      	movs	r3, r5
 800818a:	f7f9 fe19 	bl	8001dc0 <__aeabi_dmul>
 800818e:	2200      	movs	r2, #0
 8008190:	4b98      	ldr	r3, [pc, #608]	; (80083f4 <_dtoa_r+0x6a8>)
 8008192:	f7f8 fea5 	bl	8000ee0 <__aeabi_dadd>
 8008196:	9010      	str	r0, [sp, #64]	; 0x40
 8008198:	9111      	str	r1, [sp, #68]	; 0x44
 800819a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800819c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800819e:	920a      	str	r2, [sp, #40]	; 0x28
 80081a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a2:	4a95      	ldr	r2, [pc, #596]	; (80083f8 <_dtoa_r+0x6ac>)
 80081a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081a6:	4694      	mov	ip, r2
 80081a8:	4463      	add	r3, ip
 80081aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80081ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d161      	bne.n	8008278 <_dtoa_r+0x52c>
 80081b4:	2200      	movs	r2, #0
 80081b6:	0020      	movs	r0, r4
 80081b8:	0029      	movs	r1, r5
 80081ba:	4b90      	ldr	r3, [pc, #576]	; (80083fc <_dtoa_r+0x6b0>)
 80081bc:	f7fa f86c 	bl	8002298 <__aeabi_dsub>
 80081c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081c4:	0004      	movs	r4, r0
 80081c6:	000d      	movs	r5, r1
 80081c8:	f7f8 f958 	bl	800047c <__aeabi_dcmpgt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d000      	beq.n	80081d2 <_dtoa_r+0x486>
 80081d0:	e2b5      	b.n	800873e <_dtoa_r+0x9f2>
 80081d2:	488b      	ldr	r0, [pc, #556]	; (8008400 <_dtoa_r+0x6b4>)
 80081d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081d6:	4684      	mov	ip, r0
 80081d8:	4461      	add	r1, ip
 80081da:	000b      	movs	r3, r1
 80081dc:	0020      	movs	r0, r4
 80081de:	0029      	movs	r1, r5
 80081e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e2:	f7f8 f937 	bl	8000454 <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d000      	beq.n	80081ec <_dtoa_r+0x4a0>
 80081ea:	e2a5      	b.n	8008738 <_dtoa_r+0x9ec>
 80081ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80081f0:	930a      	str	r3, [sp, #40]	; 0x28
 80081f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80081f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da00      	bge.n	80081fc <_dtoa_r+0x4b0>
 80081fa:	e171      	b.n	80084e0 <_dtoa_r+0x794>
 80081fc:	9a02      	ldr	r2, [sp, #8]
 80081fe:	2a0e      	cmp	r2, #14
 8008200:	dd00      	ble.n	8008204 <_dtoa_r+0x4b8>
 8008202:	e16d      	b.n	80084e0 <_dtoa_r+0x794>
 8008204:	4b77      	ldr	r3, [pc, #476]	; (80083e4 <_dtoa_r+0x698>)
 8008206:	00d2      	lsls	r2, r2, #3
 8008208:	189b      	adds	r3, r3, r2
 800820a:	685c      	ldr	r4, [r3, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	9308      	str	r3, [sp, #32]
 8008210:	9409      	str	r4, [sp, #36]	; 0x24
 8008212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008214:	2b00      	cmp	r3, #0
 8008216:	db00      	blt.n	800821a <_dtoa_r+0x4ce>
 8008218:	e0f6      	b.n	8008408 <_dtoa_r+0x6bc>
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd00      	ble.n	8008222 <_dtoa_r+0x4d6>
 8008220:	e0f2      	b.n	8008408 <_dtoa_r+0x6bc>
 8008222:	d000      	beq.n	8008226 <_dtoa_r+0x4da>
 8008224:	e288      	b.n	8008738 <_dtoa_r+0x9ec>
 8008226:	9808      	ldr	r0, [sp, #32]
 8008228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800822a:	2200      	movs	r2, #0
 800822c:	4b73      	ldr	r3, [pc, #460]	; (80083fc <_dtoa_r+0x6b0>)
 800822e:	f7f9 fdc7 	bl	8001dc0 <__aeabi_dmul>
 8008232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008236:	f7f8 f92b 	bl	8000490 <__aeabi_dcmpge>
 800823a:	9e06      	ldr	r6, [sp, #24]
 800823c:	0035      	movs	r5, r6
 800823e:	2800      	cmp	r0, #0
 8008240:	d000      	beq.n	8008244 <_dtoa_r+0x4f8>
 8008242:	e25f      	b.n	8008704 <_dtoa_r+0x9b8>
 8008244:	9b05      	ldr	r3, [sp, #20]
 8008246:	9a05      	ldr	r2, [sp, #20]
 8008248:	3301      	adds	r3, #1
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	2331      	movs	r3, #49	; 0x31
 800824e:	7013      	strb	r3, [r2, #0]
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	3301      	adds	r3, #1
 8008254:	9302      	str	r3, [sp, #8]
 8008256:	e25a      	b.n	800870e <_dtoa_r+0x9c2>
 8008258:	4234      	tst	r4, r6
 800825a:	d007      	beq.n	800826c <_dtoa_r+0x520>
 800825c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800825e:	3301      	adds	r3, #1
 8008260:	9310      	str	r3, [sp, #64]	; 0x40
 8008262:	682a      	ldr	r2, [r5, #0]
 8008264:	686b      	ldr	r3, [r5, #4]
 8008266:	f7f9 fdab 	bl	8001dc0 <__aeabi_dmul>
 800826a:	0033      	movs	r3, r6
 800826c:	1064      	asrs	r4, r4, #1
 800826e:	3508      	adds	r5, #8
 8008270:	e75a      	b.n	8008128 <_dtoa_r+0x3dc>
 8008272:	9e02      	ldr	r6, [sp, #8]
 8008274:	9b06      	ldr	r3, [sp, #24]
 8008276:	e780      	b.n	800817a <_dtoa_r+0x42e>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	4b59      	ldr	r3, [pc, #356]	; (80083e4 <_dtoa_r+0x698>)
 8008280:	00d2      	lsls	r2, r2, #3
 8008282:	189b      	adds	r3, r3, r2
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2900      	cmp	r1, #0
 800828a:	d051      	beq.n	8008330 <_dtoa_r+0x5e4>
 800828c:	2000      	movs	r0, #0
 800828e:	495d      	ldr	r1, [pc, #372]	; (8008404 <_dtoa_r+0x6b8>)
 8008290:	f7f9 f990 	bl	80015b4 <__aeabi_ddiv>
 8008294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	f7f9 fffe 	bl	8002298 <__aeabi_dsub>
 800829c:	9a05      	ldr	r2, [sp, #20]
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	4694      	mov	ip, r2
 80082a2:	9310      	str	r3, [sp, #64]	; 0x40
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	900a      	str	r0, [sp, #40]	; 0x28
 80082a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80082aa:	4463      	add	r3, ip
 80082ac:	9319      	str	r3, [sp, #100]	; 0x64
 80082ae:	0029      	movs	r1, r5
 80082b0:	0020      	movs	r0, r4
 80082b2:	f7fa fba1 	bl	80029f8 <__aeabi_d2iz>
 80082b6:	9017      	str	r0, [sp, #92]	; 0x5c
 80082b8:	f7fa fbd4 	bl	8002a64 <__aeabi_i2d>
 80082bc:	0002      	movs	r2, r0
 80082be:	000b      	movs	r3, r1
 80082c0:	0020      	movs	r0, r4
 80082c2:	0029      	movs	r1, r5
 80082c4:	f7f9 ffe8 	bl	8002298 <__aeabi_dsub>
 80082c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082cc:	3301      	adds	r3, #1
 80082ce:	9307      	str	r3, [sp, #28]
 80082d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082d2:	0004      	movs	r4, r0
 80082d4:	3330      	adds	r3, #48	; 0x30
 80082d6:	7013      	strb	r3, [r2, #0]
 80082d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082dc:	000d      	movs	r5, r1
 80082de:	f7f8 f8b9 	bl	8000454 <__aeabi_dcmplt>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d175      	bne.n	80083d2 <_dtoa_r+0x686>
 80082e6:	0022      	movs	r2, r4
 80082e8:	002b      	movs	r3, r5
 80082ea:	2000      	movs	r0, #0
 80082ec:	493f      	ldr	r1, [pc, #252]	; (80083ec <_dtoa_r+0x6a0>)
 80082ee:	f7f9 ffd3 	bl	8002298 <__aeabi_dsub>
 80082f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f6:	f7f8 f8ad 	bl	8000454 <__aeabi_dcmplt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d000      	beq.n	8008300 <_dtoa_r+0x5b4>
 80082fe:	e0d1      	b.n	80084a4 <_dtoa_r+0x758>
 8008300:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008302:	9a07      	ldr	r2, [sp, #28]
 8008304:	4293      	cmp	r3, r2
 8008306:	d100      	bne.n	800830a <_dtoa_r+0x5be>
 8008308:	e770      	b.n	80081ec <_dtoa_r+0x4a0>
 800830a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800830c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800830e:	2200      	movs	r2, #0
 8008310:	4b37      	ldr	r3, [pc, #220]	; (80083f0 <_dtoa_r+0x6a4>)
 8008312:	f7f9 fd55 	bl	8001dc0 <__aeabi_dmul>
 8008316:	4b36      	ldr	r3, [pc, #216]	; (80083f0 <_dtoa_r+0x6a4>)
 8008318:	900a      	str	r0, [sp, #40]	; 0x28
 800831a:	910b      	str	r1, [sp, #44]	; 0x2c
 800831c:	2200      	movs	r2, #0
 800831e:	0020      	movs	r0, r4
 8008320:	0029      	movs	r1, r5
 8008322:	f7f9 fd4d 	bl	8001dc0 <__aeabi_dmul>
 8008326:	9b07      	ldr	r3, [sp, #28]
 8008328:	0004      	movs	r4, r0
 800832a:	000d      	movs	r5, r1
 800832c:	9310      	str	r3, [sp, #64]	; 0x40
 800832e:	e7be      	b.n	80082ae <_dtoa_r+0x562>
 8008330:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008332:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008334:	f7f9 fd44 	bl	8001dc0 <__aeabi_dmul>
 8008338:	9a05      	ldr	r2, [sp, #20]
 800833a:	9b05      	ldr	r3, [sp, #20]
 800833c:	4694      	mov	ip, r2
 800833e:	930a      	str	r3, [sp, #40]	; 0x28
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	9010      	str	r0, [sp, #64]	; 0x40
 8008344:	9111      	str	r1, [sp, #68]	; 0x44
 8008346:	4463      	add	r3, ip
 8008348:	9319      	str	r3, [sp, #100]	; 0x64
 800834a:	0029      	movs	r1, r5
 800834c:	0020      	movs	r0, r4
 800834e:	f7fa fb53 	bl	80029f8 <__aeabi_d2iz>
 8008352:	9017      	str	r0, [sp, #92]	; 0x5c
 8008354:	f7fa fb86 	bl	8002a64 <__aeabi_i2d>
 8008358:	0002      	movs	r2, r0
 800835a:	000b      	movs	r3, r1
 800835c:	0020      	movs	r0, r4
 800835e:	0029      	movs	r1, r5
 8008360:	f7f9 ff9a 	bl	8002298 <__aeabi_dsub>
 8008364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008368:	3330      	adds	r3, #48	; 0x30
 800836a:	7013      	strb	r3, [r2, #0]
 800836c:	0013      	movs	r3, r2
 800836e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008370:	3301      	adds	r3, #1
 8008372:	0004      	movs	r4, r0
 8008374:	000d      	movs	r5, r1
 8008376:	930a      	str	r3, [sp, #40]	; 0x28
 8008378:	4293      	cmp	r3, r2
 800837a:	d12c      	bne.n	80083d6 <_dtoa_r+0x68a>
 800837c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800837e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008380:	9a05      	ldr	r2, [sp, #20]
 8008382:	9b07      	ldr	r3, [sp, #28]
 8008384:	4694      	mov	ip, r2
 8008386:	4463      	add	r3, ip
 8008388:	2200      	movs	r2, #0
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <_dtoa_r+0x6b8>)
 800838e:	f7f8 fda7 	bl	8000ee0 <__aeabi_dadd>
 8008392:	0002      	movs	r2, r0
 8008394:	000b      	movs	r3, r1
 8008396:	0020      	movs	r0, r4
 8008398:	0029      	movs	r1, r5
 800839a:	f7f8 f86f 	bl	800047c <__aeabi_dcmpgt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d000      	beq.n	80083a4 <_dtoa_r+0x658>
 80083a2:	e07f      	b.n	80084a4 <_dtoa_r+0x758>
 80083a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083a8:	2000      	movs	r0, #0
 80083aa:	4916      	ldr	r1, [pc, #88]	; (8008404 <_dtoa_r+0x6b8>)
 80083ac:	f7f9 ff74 	bl	8002298 <__aeabi_dsub>
 80083b0:	0002      	movs	r2, r0
 80083b2:	000b      	movs	r3, r1
 80083b4:	0020      	movs	r0, r4
 80083b6:	0029      	movs	r1, r5
 80083b8:	f7f8 f84c 	bl	8000454 <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d100      	bne.n	80083c2 <_dtoa_r+0x676>
 80083c0:	e714      	b.n	80081ec <_dtoa_r+0x4a0>
 80083c2:	9b07      	ldr	r3, [sp, #28]
 80083c4:	001a      	movs	r2, r3
 80083c6:	3a01      	subs	r2, #1
 80083c8:	9207      	str	r2, [sp, #28]
 80083ca:	7812      	ldrb	r2, [r2, #0]
 80083cc:	2a30      	cmp	r2, #48	; 0x30
 80083ce:	d0f8      	beq.n	80083c2 <_dtoa_r+0x676>
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	9602      	str	r6, [sp, #8]
 80083d4:	e054      	b.n	8008480 <_dtoa_r+0x734>
 80083d6:	2200      	movs	r2, #0
 80083d8:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <_dtoa_r+0x6a4>)
 80083da:	f7f9 fcf1 	bl	8001dc0 <__aeabi_dmul>
 80083de:	0004      	movs	r4, r0
 80083e0:	000d      	movs	r5, r1
 80083e2:	e7b2      	b.n	800834a <_dtoa_r+0x5fe>
 80083e4:	0800a540 	.word	0x0800a540
 80083e8:	0800a518 	.word	0x0800a518
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	40240000 	.word	0x40240000
 80083f4:	401c0000 	.word	0x401c0000
 80083f8:	fcc00000 	.word	0xfcc00000
 80083fc:	40140000 	.word	0x40140000
 8008400:	7cc00000 	.word	0x7cc00000
 8008404:	3fe00000 	.word	0x3fe00000
 8008408:	9b06      	ldr	r3, [sp, #24]
 800840a:	9e05      	ldr	r6, [sp, #20]
 800840c:	3b01      	subs	r3, #1
 800840e:	199b      	adds	r3, r3, r6
 8008410:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008412:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008414:	930a      	str	r3, [sp, #40]	; 0x28
 8008416:	9a08      	ldr	r2, [sp, #32]
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	0020      	movs	r0, r4
 800841c:	0029      	movs	r1, r5
 800841e:	f7f9 f8c9 	bl	80015b4 <__aeabi_ddiv>
 8008422:	f7fa fae9 	bl	80029f8 <__aeabi_d2iz>
 8008426:	9006      	str	r0, [sp, #24]
 8008428:	f7fa fb1c 	bl	8002a64 <__aeabi_i2d>
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008430:	f7f9 fcc6 	bl	8001dc0 <__aeabi_dmul>
 8008434:	0002      	movs	r2, r0
 8008436:	000b      	movs	r3, r1
 8008438:	0020      	movs	r0, r4
 800843a:	0029      	movs	r1, r5
 800843c:	f7f9 ff2c 	bl	8002298 <__aeabi_dsub>
 8008440:	0033      	movs	r3, r6
 8008442:	9a06      	ldr	r2, [sp, #24]
 8008444:	3601      	adds	r6, #1
 8008446:	3230      	adds	r2, #48	; 0x30
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844c:	9607      	str	r6, [sp, #28]
 800844e:	429a      	cmp	r2, r3
 8008450:	d139      	bne.n	80084c6 <_dtoa_r+0x77a>
 8008452:	0002      	movs	r2, r0
 8008454:	000b      	movs	r3, r1
 8008456:	f7f8 fd43 	bl	8000ee0 <__aeabi_dadd>
 800845a:	9a08      	ldr	r2, [sp, #32]
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	0004      	movs	r4, r0
 8008460:	000d      	movs	r5, r1
 8008462:	f7f8 f80b 	bl	800047c <__aeabi_dcmpgt>
 8008466:	2800      	cmp	r0, #0
 8008468:	d11b      	bne.n	80084a2 <_dtoa_r+0x756>
 800846a:	9a08      	ldr	r2, [sp, #32]
 800846c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846e:	0020      	movs	r0, r4
 8008470:	0029      	movs	r1, r5
 8008472:	f7f7 ffe9 	bl	8000448 <__aeabi_dcmpeq>
 8008476:	2800      	cmp	r0, #0
 8008478:	d002      	beq.n	8008480 <_dtoa_r+0x734>
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	07db      	lsls	r3, r3, #31
 800847e:	d410      	bmi.n	80084a2 <_dtoa_r+0x756>
 8008480:	0038      	movs	r0, r7
 8008482:	9904      	ldr	r1, [sp, #16]
 8008484:	f000 fae6 	bl	8008a54 <_Bfree>
 8008488:	2300      	movs	r3, #0
 800848a:	9a07      	ldr	r2, [sp, #28]
 800848c:	9802      	ldr	r0, [sp, #8]
 800848e:	7013      	strb	r3, [r2, #0]
 8008490:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008492:	3001      	adds	r0, #1
 8008494:	6018      	str	r0, [r3, #0]
 8008496:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008498:	2b00      	cmp	r3, #0
 800849a:	d100      	bne.n	800849e <_dtoa_r+0x752>
 800849c:	e4a3      	b.n	8007de6 <_dtoa_r+0x9a>
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e4a1      	b.n	8007de6 <_dtoa_r+0x9a>
 80084a2:	9e02      	ldr	r6, [sp, #8]
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	9307      	str	r3, [sp, #28]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	781a      	ldrb	r2, [r3, #0]
 80084ac:	2a39      	cmp	r2, #57	; 0x39
 80084ae:	d106      	bne.n	80084be <_dtoa_r+0x772>
 80084b0:	9a05      	ldr	r2, [sp, #20]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d1f7      	bne.n	80084a6 <_dtoa_r+0x75a>
 80084b6:	2230      	movs	r2, #48	; 0x30
 80084b8:	9905      	ldr	r1, [sp, #20]
 80084ba:	3601      	adds	r6, #1
 80084bc:	700a      	strb	r2, [r1, #0]
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	3201      	adds	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e785      	b.n	80083d2 <_dtoa_r+0x686>
 80084c6:	2200      	movs	r2, #0
 80084c8:	4bad      	ldr	r3, [pc, #692]	; (8008780 <_dtoa_r+0xa34>)
 80084ca:	f7f9 fc79 	bl	8001dc0 <__aeabi_dmul>
 80084ce:	2200      	movs	r2, #0
 80084d0:	2300      	movs	r3, #0
 80084d2:	0004      	movs	r4, r0
 80084d4:	000d      	movs	r5, r1
 80084d6:	f7f7 ffb7 	bl	8000448 <__aeabi_dcmpeq>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d09b      	beq.n	8008416 <_dtoa_r+0x6ca>
 80084de:	e7cf      	b.n	8008480 <_dtoa_r+0x734>
 80084e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	d100      	bne.n	80084e8 <_dtoa_r+0x79c>
 80084e6:	e082      	b.n	80085ee <_dtoa_r+0x8a2>
 80084e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084ea:	2a01      	cmp	r2, #1
 80084ec:	dc66      	bgt.n	80085bc <_dtoa_r+0x870>
 80084ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	d05f      	beq.n	80085b4 <_dtoa_r+0x868>
 80084f4:	4aa3      	ldr	r2, [pc, #652]	; (8008784 <_dtoa_r+0xa38>)
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80084fa:	9c08      	ldr	r4, [sp, #32]
 80084fc:	9a08      	ldr	r2, [sp, #32]
 80084fe:	2101      	movs	r1, #1
 8008500:	18d2      	adds	r2, r2, r3
 8008502:	9208      	str	r2, [sp, #32]
 8008504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008506:	0038      	movs	r0, r7
 8008508:	18d3      	adds	r3, r2, r3
 800850a:	930d      	str	r3, [sp, #52]	; 0x34
 800850c:	f000 fb52 	bl	8008bb4 <__i2b>
 8008510:	0005      	movs	r5, r0
 8008512:	2c00      	cmp	r4, #0
 8008514:	dd0e      	ble.n	8008534 <_dtoa_r+0x7e8>
 8008516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	dd0b      	ble.n	8008534 <_dtoa_r+0x7e8>
 800851c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800851e:	0023      	movs	r3, r4
 8008520:	4294      	cmp	r4, r2
 8008522:	dd00      	ble.n	8008526 <_dtoa_r+0x7da>
 8008524:	0013      	movs	r3, r2
 8008526:	9a08      	ldr	r2, [sp, #32]
 8008528:	1ae4      	subs	r4, r4, r3
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	9208      	str	r2, [sp, #32]
 800852e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	930d      	str	r3, [sp, #52]	; 0x34
 8008534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01f      	beq.n	800857a <_dtoa_r+0x82e>
 800853a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d05a      	beq.n	80085f6 <_dtoa_r+0x8aa>
 8008540:	2e00      	cmp	r6, #0
 8008542:	dd11      	ble.n	8008568 <_dtoa_r+0x81c>
 8008544:	0029      	movs	r1, r5
 8008546:	0032      	movs	r2, r6
 8008548:	0038      	movs	r0, r7
 800854a:	f000 fbf9 	bl	8008d40 <__pow5mult>
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	0001      	movs	r1, r0
 8008552:	0005      	movs	r5, r0
 8008554:	0038      	movs	r0, r7
 8008556:	f000 fb43 	bl	8008be0 <__multiply>
 800855a:	9904      	ldr	r1, [sp, #16]
 800855c:	9007      	str	r0, [sp, #28]
 800855e:	0038      	movs	r0, r7
 8008560:	f000 fa78 	bl	8008a54 <_Bfree>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800856a:	1b9a      	subs	r2, r3, r6
 800856c:	42b3      	cmp	r3, r6
 800856e:	d004      	beq.n	800857a <_dtoa_r+0x82e>
 8008570:	0038      	movs	r0, r7
 8008572:	9904      	ldr	r1, [sp, #16]
 8008574:	f000 fbe4 	bl	8008d40 <__pow5mult>
 8008578:	9004      	str	r0, [sp, #16]
 800857a:	2101      	movs	r1, #1
 800857c:	0038      	movs	r0, r7
 800857e:	f000 fb19 	bl	8008bb4 <__i2b>
 8008582:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008584:	0006      	movs	r6, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd37      	ble.n	80085fa <_dtoa_r+0x8ae>
 800858a:	001a      	movs	r2, r3
 800858c:	0001      	movs	r1, r0
 800858e:	0038      	movs	r0, r7
 8008590:	f000 fbd6 	bl	8008d40 <__pow5mult>
 8008594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008596:	0006      	movs	r6, r0
 8008598:	2b01      	cmp	r3, #1
 800859a:	dd33      	ble.n	8008604 <_dtoa_r+0x8b8>
 800859c:	2300      	movs	r3, #0
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	6933      	ldr	r3, [r6, #16]
 80085a2:	3303      	adds	r3, #3
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	18f3      	adds	r3, r6, r3
 80085a8:	6858      	ldr	r0, [r3, #4]
 80085aa:	f000 fabb 	bl	8008b24 <__hi0bits>
 80085ae:	2320      	movs	r3, #32
 80085b0:	1a18      	subs	r0, r3, r0
 80085b2:	e03f      	b.n	8008634 <_dtoa_r+0x8e8>
 80085b4:	2336      	movs	r3, #54	; 0x36
 80085b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	e79d      	b.n	80084f8 <_dtoa_r+0x7ac>
 80085bc:	9b06      	ldr	r3, [sp, #24]
 80085be:	1e5e      	subs	r6, r3, #1
 80085c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c2:	42b3      	cmp	r3, r6
 80085c4:	db08      	blt.n	80085d8 <_dtoa_r+0x88c>
 80085c6:	1b9e      	subs	r6, r3, r6
 80085c8:	9b06      	ldr	r3, [sp, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da0c      	bge.n	80085e8 <_dtoa_r+0x89c>
 80085ce:	9b08      	ldr	r3, [sp, #32]
 80085d0:	9a06      	ldr	r2, [sp, #24]
 80085d2:	1a9c      	subs	r4, r3, r2
 80085d4:	2300      	movs	r3, #0
 80085d6:	e791      	b.n	80084fc <_dtoa_r+0x7b0>
 80085d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085dc:	1af3      	subs	r3, r6, r3
 80085de:	18d3      	adds	r3, r2, r3
 80085e0:	960e      	str	r6, [sp, #56]	; 0x38
 80085e2:	9314      	str	r3, [sp, #80]	; 0x50
 80085e4:	2600      	movs	r6, #0
 80085e6:	e7ef      	b.n	80085c8 <_dtoa_r+0x87c>
 80085e8:	9c08      	ldr	r4, [sp, #32]
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	e786      	b.n	80084fc <_dtoa_r+0x7b0>
 80085ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80085f0:	9c08      	ldr	r4, [sp, #32]
 80085f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085f4:	e78d      	b.n	8008512 <_dtoa_r+0x7c6>
 80085f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085f8:	e7ba      	b.n	8008570 <_dtoa_r+0x824>
 80085fa:	2300      	movs	r3, #0
 80085fc:	9307      	str	r3, [sp, #28]
 80085fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008600:	2b01      	cmp	r3, #1
 8008602:	dc13      	bgt.n	800862c <_dtoa_r+0x8e0>
 8008604:	2300      	movs	r3, #0
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10e      	bne.n	800862c <_dtoa_r+0x8e0>
 800860e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008610:	031b      	lsls	r3, r3, #12
 8008612:	d10b      	bne.n	800862c <_dtoa_r+0x8e0>
 8008614:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008618:	4213      	tst	r3, r2
 800861a:	d007      	beq.n	800862c <_dtoa_r+0x8e0>
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	3301      	adds	r3, #1
 8008620:	9308      	str	r3, [sp, #32]
 8008622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008624:	3301      	adds	r3, #1
 8008626:	930d      	str	r3, [sp, #52]	; 0x34
 8008628:	2301      	movs	r3, #1
 800862a:	9307      	str	r3, [sp, #28]
 800862c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800862e:	2001      	movs	r0, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1b5      	bne.n	80085a0 <_dtoa_r+0x854>
 8008634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008636:	221f      	movs	r2, #31
 8008638:	1818      	adds	r0, r3, r0
 800863a:	0003      	movs	r3, r0
 800863c:	4013      	ands	r3, r2
 800863e:	4210      	tst	r0, r2
 8008640:	d046      	beq.n	80086d0 <_dtoa_r+0x984>
 8008642:	3201      	adds	r2, #1
 8008644:	1ad2      	subs	r2, r2, r3
 8008646:	2a04      	cmp	r2, #4
 8008648:	dd3f      	ble.n	80086ca <_dtoa_r+0x97e>
 800864a:	221c      	movs	r2, #28
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	9a08      	ldr	r2, [sp, #32]
 8008650:	18e4      	adds	r4, r4, r3
 8008652:	18d2      	adds	r2, r2, r3
 8008654:	9208      	str	r2, [sp, #32]
 8008656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008658:	18d3      	adds	r3, r2, r3
 800865a:	930d      	str	r3, [sp, #52]	; 0x34
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	2b00      	cmp	r3, #0
 8008660:	dd05      	ble.n	800866e <_dtoa_r+0x922>
 8008662:	001a      	movs	r2, r3
 8008664:	0038      	movs	r0, r7
 8008666:	9904      	ldr	r1, [sp, #16]
 8008668:	f000 fbc6 	bl	8008df8 <__lshift>
 800866c:	9004      	str	r0, [sp, #16]
 800866e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd05      	ble.n	8008680 <_dtoa_r+0x934>
 8008674:	0031      	movs	r1, r6
 8008676:	001a      	movs	r2, r3
 8008678:	0038      	movs	r0, r7
 800867a:	f000 fbbd 	bl	8008df8 <__lshift>
 800867e:	0006      	movs	r6, r0
 8008680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008682:	2b00      	cmp	r3, #0
 8008684:	d026      	beq.n	80086d4 <_dtoa_r+0x988>
 8008686:	0031      	movs	r1, r6
 8008688:	9804      	ldr	r0, [sp, #16]
 800868a:	f000 fc25 	bl	8008ed8 <__mcmp>
 800868e:	2800      	cmp	r0, #0
 8008690:	da20      	bge.n	80086d4 <_dtoa_r+0x988>
 8008692:	9b02      	ldr	r3, [sp, #8]
 8008694:	220a      	movs	r2, #10
 8008696:	3b01      	subs	r3, #1
 8008698:	9302      	str	r3, [sp, #8]
 800869a:	0038      	movs	r0, r7
 800869c:	2300      	movs	r3, #0
 800869e:	9904      	ldr	r1, [sp, #16]
 80086a0:	f000 f9fc 	bl	8008a9c <__multadd>
 80086a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086a6:	9004      	str	r0, [sp, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d100      	bne.n	80086ae <_dtoa_r+0x962>
 80086ac:	e160      	b.n	8008970 <_dtoa_r+0xc24>
 80086ae:	2300      	movs	r3, #0
 80086b0:	0029      	movs	r1, r5
 80086b2:	220a      	movs	r2, #10
 80086b4:	0038      	movs	r0, r7
 80086b6:	f000 f9f1 	bl	8008a9c <__multadd>
 80086ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086bc:	0005      	movs	r5, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc47      	bgt.n	8008752 <_dtoa_r+0xa06>
 80086c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	dc0d      	bgt.n	80086e4 <_dtoa_r+0x998>
 80086c8:	e043      	b.n	8008752 <_dtoa_r+0xa06>
 80086ca:	2a04      	cmp	r2, #4
 80086cc:	d0c6      	beq.n	800865c <_dtoa_r+0x910>
 80086ce:	0013      	movs	r3, r2
 80086d0:	331c      	adds	r3, #28
 80086d2:	e7bc      	b.n	800864e <_dtoa_r+0x902>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	dc35      	bgt.n	8008746 <_dtoa_r+0x9fa>
 80086da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086dc:	2b02      	cmp	r3, #2
 80086de:	dd32      	ble.n	8008746 <_dtoa_r+0x9fa>
 80086e0:	9b06      	ldr	r3, [sp, #24]
 80086e2:	930c      	str	r3, [sp, #48]	; 0x30
 80086e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10c      	bne.n	8008704 <_dtoa_r+0x9b8>
 80086ea:	0031      	movs	r1, r6
 80086ec:	2205      	movs	r2, #5
 80086ee:	0038      	movs	r0, r7
 80086f0:	f000 f9d4 	bl	8008a9c <__multadd>
 80086f4:	0006      	movs	r6, r0
 80086f6:	0001      	movs	r1, r0
 80086f8:	9804      	ldr	r0, [sp, #16]
 80086fa:	f000 fbed 	bl	8008ed8 <__mcmp>
 80086fe:	2800      	cmp	r0, #0
 8008700:	dd00      	ble.n	8008704 <_dtoa_r+0x9b8>
 8008702:	e59f      	b.n	8008244 <_dtoa_r+0x4f8>
 8008704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008706:	43db      	mvns	r3, r3
 8008708:	9302      	str	r3, [sp, #8]
 800870a:	9b05      	ldr	r3, [sp, #20]
 800870c:	9307      	str	r3, [sp, #28]
 800870e:	2400      	movs	r4, #0
 8008710:	0031      	movs	r1, r6
 8008712:	0038      	movs	r0, r7
 8008714:	f000 f99e 	bl	8008a54 <_Bfree>
 8008718:	2d00      	cmp	r5, #0
 800871a:	d100      	bne.n	800871e <_dtoa_r+0x9d2>
 800871c:	e6b0      	b.n	8008480 <_dtoa_r+0x734>
 800871e:	2c00      	cmp	r4, #0
 8008720:	d005      	beq.n	800872e <_dtoa_r+0x9e2>
 8008722:	42ac      	cmp	r4, r5
 8008724:	d003      	beq.n	800872e <_dtoa_r+0x9e2>
 8008726:	0021      	movs	r1, r4
 8008728:	0038      	movs	r0, r7
 800872a:	f000 f993 	bl	8008a54 <_Bfree>
 800872e:	0029      	movs	r1, r5
 8008730:	0038      	movs	r0, r7
 8008732:	f000 f98f 	bl	8008a54 <_Bfree>
 8008736:	e6a3      	b.n	8008480 <_dtoa_r+0x734>
 8008738:	2600      	movs	r6, #0
 800873a:	0035      	movs	r5, r6
 800873c:	e7e2      	b.n	8008704 <_dtoa_r+0x9b8>
 800873e:	9602      	str	r6, [sp, #8]
 8008740:	9e07      	ldr	r6, [sp, #28]
 8008742:	0035      	movs	r5, r6
 8008744:	e57e      	b.n	8008244 <_dtoa_r+0x4f8>
 8008746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d100      	bne.n	800874e <_dtoa_r+0xa02>
 800874c:	e0c8      	b.n	80088e0 <_dtoa_r+0xb94>
 800874e:	9b06      	ldr	r3, [sp, #24]
 8008750:	930c      	str	r3, [sp, #48]	; 0x30
 8008752:	2c00      	cmp	r4, #0
 8008754:	dd05      	ble.n	8008762 <_dtoa_r+0xa16>
 8008756:	0029      	movs	r1, r5
 8008758:	0022      	movs	r2, r4
 800875a:	0038      	movs	r0, r7
 800875c:	f000 fb4c 	bl	8008df8 <__lshift>
 8008760:	0005      	movs	r5, r0
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	0028      	movs	r0, r5
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01f      	beq.n	80087aa <_dtoa_r+0xa5e>
 800876a:	0038      	movs	r0, r7
 800876c:	6869      	ldr	r1, [r5, #4]
 800876e:	f000 f92d 	bl	80089cc <_Balloc>
 8008772:	1e04      	subs	r4, r0, #0
 8008774:	d10c      	bne.n	8008790 <_dtoa_r+0xa44>
 8008776:	0002      	movs	r2, r0
 8008778:	4b03      	ldr	r3, [pc, #12]	; (8008788 <_dtoa_r+0xa3c>)
 800877a:	4904      	ldr	r1, [pc, #16]	; (800878c <_dtoa_r+0xa40>)
 800877c:	f7ff fafb 	bl	8007d76 <_dtoa_r+0x2a>
 8008780:	40240000 	.word	0x40240000
 8008784:	00000433 	.word	0x00000433
 8008788:	0800a4a3 	.word	0x0800a4a3
 800878c:	000002ea 	.word	0x000002ea
 8008790:	0029      	movs	r1, r5
 8008792:	692b      	ldr	r3, [r5, #16]
 8008794:	310c      	adds	r1, #12
 8008796:	1c9a      	adds	r2, r3, #2
 8008798:	0092      	lsls	r2, r2, #2
 800879a:	300c      	adds	r0, #12
 800879c:	f000 f90d 	bl	80089ba <memcpy>
 80087a0:	2201      	movs	r2, #1
 80087a2:	0021      	movs	r1, r4
 80087a4:	0038      	movs	r0, r7
 80087a6:	f000 fb27 	bl	8008df8 <__lshift>
 80087aa:	002c      	movs	r4, r5
 80087ac:	0005      	movs	r5, r0
 80087ae:	9b05      	ldr	r3, [sp, #20]
 80087b0:	9308      	str	r3, [sp, #32]
 80087b2:	0031      	movs	r1, r6
 80087b4:	9804      	ldr	r0, [sp, #16]
 80087b6:	f7ff fa3d 	bl	8007c34 <quorem>
 80087ba:	0003      	movs	r3, r0
 80087bc:	0021      	movs	r1, r4
 80087be:	3330      	adds	r3, #48	; 0x30
 80087c0:	900e      	str	r0, [sp, #56]	; 0x38
 80087c2:	9804      	ldr	r0, [sp, #16]
 80087c4:	9306      	str	r3, [sp, #24]
 80087c6:	f000 fb87 	bl	8008ed8 <__mcmp>
 80087ca:	002a      	movs	r2, r5
 80087cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80087ce:	0031      	movs	r1, r6
 80087d0:	0038      	movs	r0, r7
 80087d2:	f000 fb9d 	bl	8008f10 <__mdiff>
 80087d6:	68c3      	ldr	r3, [r0, #12]
 80087d8:	9007      	str	r0, [sp, #28]
 80087da:	9310      	str	r3, [sp, #64]	; 0x40
 80087dc:	2301      	movs	r3, #1
 80087de:	930d      	str	r3, [sp, #52]	; 0x34
 80087e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d104      	bne.n	80087f0 <_dtoa_r+0xaa4>
 80087e6:	0001      	movs	r1, r0
 80087e8:	9804      	ldr	r0, [sp, #16]
 80087ea:	f000 fb75 	bl	8008ed8 <__mcmp>
 80087ee:	900d      	str	r0, [sp, #52]	; 0x34
 80087f0:	0038      	movs	r0, r7
 80087f2:	9907      	ldr	r1, [sp, #28]
 80087f4:	f000 f92e 	bl	8008a54 <_Bfree>
 80087f8:	2301      	movs	r3, #1
 80087fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087fe:	4018      	ands	r0, r3
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	3301      	adds	r3, #1
 8008804:	9307      	str	r3, [sp, #28]
 8008806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008808:	4313      	orrs	r3, r2
 800880a:	4303      	orrs	r3, r0
 800880c:	d10c      	bne.n	8008828 <_dtoa_r+0xadc>
 800880e:	9b06      	ldr	r3, [sp, #24]
 8008810:	2b39      	cmp	r3, #57	; 0x39
 8008812:	d025      	beq.n	8008860 <_dtoa_r+0xb14>
 8008814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008816:	2b00      	cmp	r3, #0
 8008818:	dd02      	ble.n	8008820 <_dtoa_r+0xad4>
 800881a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800881c:	3331      	adds	r3, #49	; 0x31
 800881e:	9306      	str	r3, [sp, #24]
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	9a06      	ldr	r2, [sp, #24]
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e773      	b.n	8008710 <_dtoa_r+0x9c4>
 8008828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800882a:	2b00      	cmp	r3, #0
 800882c:	db03      	blt.n	8008836 <_dtoa_r+0xaea>
 800882e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008830:	4313      	orrs	r3, r2
 8008832:	4303      	orrs	r3, r0
 8008834:	d11f      	bne.n	8008876 <_dtoa_r+0xb2a>
 8008836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	ddf1      	ble.n	8008820 <_dtoa_r+0xad4>
 800883c:	9904      	ldr	r1, [sp, #16]
 800883e:	2201      	movs	r2, #1
 8008840:	0038      	movs	r0, r7
 8008842:	f000 fad9 	bl	8008df8 <__lshift>
 8008846:	0031      	movs	r1, r6
 8008848:	9004      	str	r0, [sp, #16]
 800884a:	f000 fb45 	bl	8008ed8 <__mcmp>
 800884e:	2800      	cmp	r0, #0
 8008850:	dc03      	bgt.n	800885a <_dtoa_r+0xb0e>
 8008852:	d1e5      	bne.n	8008820 <_dtoa_r+0xad4>
 8008854:	9b06      	ldr	r3, [sp, #24]
 8008856:	07db      	lsls	r3, r3, #31
 8008858:	d5e2      	bpl.n	8008820 <_dtoa_r+0xad4>
 800885a:	9b06      	ldr	r3, [sp, #24]
 800885c:	2b39      	cmp	r3, #57	; 0x39
 800885e:	d1dc      	bne.n	800881a <_dtoa_r+0xace>
 8008860:	2339      	movs	r3, #57	; 0x39
 8008862:	9a08      	ldr	r2, [sp, #32]
 8008864:	7013      	strb	r3, [r2, #0]
 8008866:	9b07      	ldr	r3, [sp, #28]
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	3b01      	subs	r3, #1
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	2a39      	cmp	r2, #57	; 0x39
 8008870:	d06c      	beq.n	800894c <_dtoa_r+0xc00>
 8008872:	3201      	adds	r2, #1
 8008874:	e7d6      	b.n	8008824 <_dtoa_r+0xad8>
 8008876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	dd07      	ble.n	800888c <_dtoa_r+0xb40>
 800887c:	9b06      	ldr	r3, [sp, #24]
 800887e:	2b39      	cmp	r3, #57	; 0x39
 8008880:	d0ee      	beq.n	8008860 <_dtoa_r+0xb14>
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	3301      	adds	r3, #1
 8008888:	7013      	strb	r3, [r2, #0]
 800888a:	e741      	b.n	8008710 <_dtoa_r+0x9c4>
 800888c:	9b08      	ldr	r3, [sp, #32]
 800888e:	9a06      	ldr	r2, [sp, #24]
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	2301      	movs	r3, #1
 8008894:	9a05      	ldr	r2, [sp, #20]
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	9a08      	ldr	r2, [sp, #32]
 800889a:	189b      	adds	r3, r3, r2
 800889c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800889e:	429a      	cmp	r2, r3
 80088a0:	d03e      	beq.n	8008920 <_dtoa_r+0xbd4>
 80088a2:	2300      	movs	r3, #0
 80088a4:	220a      	movs	r2, #10
 80088a6:	9904      	ldr	r1, [sp, #16]
 80088a8:	0038      	movs	r0, r7
 80088aa:	f000 f8f7 	bl	8008a9c <__multadd>
 80088ae:	2300      	movs	r3, #0
 80088b0:	9004      	str	r0, [sp, #16]
 80088b2:	220a      	movs	r2, #10
 80088b4:	0021      	movs	r1, r4
 80088b6:	0038      	movs	r0, r7
 80088b8:	42ac      	cmp	r4, r5
 80088ba:	d106      	bne.n	80088ca <_dtoa_r+0xb7e>
 80088bc:	f000 f8ee 	bl	8008a9c <__multadd>
 80088c0:	0004      	movs	r4, r0
 80088c2:	0005      	movs	r5, r0
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	9308      	str	r3, [sp, #32]
 80088c8:	e773      	b.n	80087b2 <_dtoa_r+0xa66>
 80088ca:	f000 f8e7 	bl	8008a9c <__multadd>
 80088ce:	0029      	movs	r1, r5
 80088d0:	0004      	movs	r4, r0
 80088d2:	2300      	movs	r3, #0
 80088d4:	220a      	movs	r2, #10
 80088d6:	0038      	movs	r0, r7
 80088d8:	f000 f8e0 	bl	8008a9c <__multadd>
 80088dc:	0005      	movs	r5, r0
 80088de:	e7f1      	b.n	80088c4 <_dtoa_r+0xb78>
 80088e0:	9b06      	ldr	r3, [sp, #24]
 80088e2:	930c      	str	r3, [sp, #48]	; 0x30
 80088e4:	2400      	movs	r4, #0
 80088e6:	0031      	movs	r1, r6
 80088e8:	9804      	ldr	r0, [sp, #16]
 80088ea:	f7ff f9a3 	bl	8007c34 <quorem>
 80088ee:	9b05      	ldr	r3, [sp, #20]
 80088f0:	3030      	adds	r0, #48	; 0x30
 80088f2:	5518      	strb	r0, [r3, r4]
 80088f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f6:	3401      	adds	r4, #1
 80088f8:	9006      	str	r0, [sp, #24]
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	dd07      	ble.n	800890e <_dtoa_r+0xbc2>
 80088fe:	2300      	movs	r3, #0
 8008900:	220a      	movs	r2, #10
 8008902:	0038      	movs	r0, r7
 8008904:	9904      	ldr	r1, [sp, #16]
 8008906:	f000 f8c9 	bl	8008a9c <__multadd>
 800890a:	9004      	str	r0, [sp, #16]
 800890c:	e7eb      	b.n	80088e6 <_dtoa_r+0xb9a>
 800890e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008910:	2001      	movs	r0, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd00      	ble.n	8008918 <_dtoa_r+0xbcc>
 8008916:	0018      	movs	r0, r3
 8008918:	2400      	movs	r4, #0
 800891a:	9b05      	ldr	r3, [sp, #20]
 800891c:	181b      	adds	r3, r3, r0
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	9904      	ldr	r1, [sp, #16]
 8008922:	2201      	movs	r2, #1
 8008924:	0038      	movs	r0, r7
 8008926:	f000 fa67 	bl	8008df8 <__lshift>
 800892a:	0031      	movs	r1, r6
 800892c:	9004      	str	r0, [sp, #16]
 800892e:	f000 fad3 	bl	8008ed8 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	dc97      	bgt.n	8008866 <_dtoa_r+0xb1a>
 8008936:	d102      	bne.n	800893e <_dtoa_r+0xbf2>
 8008938:	9b06      	ldr	r3, [sp, #24]
 800893a:	07db      	lsls	r3, r3, #31
 800893c:	d493      	bmi.n	8008866 <_dtoa_r+0xb1a>
 800893e:	9b07      	ldr	r3, [sp, #28]
 8008940:	9307      	str	r3, [sp, #28]
 8008942:	3b01      	subs	r3, #1
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	2a30      	cmp	r2, #48	; 0x30
 8008948:	d0fa      	beq.n	8008940 <_dtoa_r+0xbf4>
 800894a:	e6e1      	b.n	8008710 <_dtoa_r+0x9c4>
 800894c:	9a05      	ldr	r2, [sp, #20]
 800894e:	429a      	cmp	r2, r3
 8008950:	d18a      	bne.n	8008868 <_dtoa_r+0xb1c>
 8008952:	9b02      	ldr	r3, [sp, #8]
 8008954:	3301      	adds	r3, #1
 8008956:	9302      	str	r3, [sp, #8]
 8008958:	2331      	movs	r3, #49	; 0x31
 800895a:	e795      	b.n	8008888 <_dtoa_r+0xb3c>
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <_dtoa_r+0xc34>)
 800895e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <_dtoa_r+0xc38>)
 8008964:	2a00      	cmp	r2, #0
 8008966:	d001      	beq.n	800896c <_dtoa_r+0xc20>
 8008968:	f7ff fa3b 	bl	8007de2 <_dtoa_r+0x96>
 800896c:	f7ff fa3b 	bl	8007de6 <_dtoa_r+0x9a>
 8008970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008972:	2b00      	cmp	r3, #0
 8008974:	dcb6      	bgt.n	80088e4 <_dtoa_r+0xb98>
 8008976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008978:	2b02      	cmp	r3, #2
 800897a:	dd00      	ble.n	800897e <_dtoa_r+0xc32>
 800897c:	e6b2      	b.n	80086e4 <_dtoa_r+0x998>
 800897e:	e7b1      	b.n	80088e4 <_dtoa_r+0xb98>
 8008980:	0800a420 	.word	0x0800a420
 8008984:	0800a428 	.word	0x0800a428

08008988 <_localeconv_r>:
 8008988:	4800      	ldr	r0, [pc, #0]	; (800898c <_localeconv_r+0x4>)
 800898a:	4770      	bx	lr
 800898c:	20000190 	.word	0x20000190

08008990 <malloc>:
 8008990:	b510      	push	{r4, lr}
 8008992:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <malloc+0x10>)
 8008994:	0001      	movs	r1, r0
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	f000 fc0e 	bl	80091b8 <_malloc_r>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	2000003c 	.word	0x2000003c

080089a4 <memchr>:
 80089a4:	b2c9      	uxtb	r1, r1
 80089a6:	1882      	adds	r2, r0, r2
 80089a8:	4290      	cmp	r0, r2
 80089aa:	d101      	bne.n	80089b0 <memchr+0xc>
 80089ac:	2000      	movs	r0, #0
 80089ae:	4770      	bx	lr
 80089b0:	7803      	ldrb	r3, [r0, #0]
 80089b2:	428b      	cmp	r3, r1
 80089b4:	d0fb      	beq.n	80089ae <memchr+0xa>
 80089b6:	3001      	adds	r0, #1
 80089b8:	e7f6      	b.n	80089a8 <memchr+0x4>

080089ba <memcpy>:
 80089ba:	2300      	movs	r3, #0
 80089bc:	b510      	push	{r4, lr}
 80089be:	429a      	cmp	r2, r3
 80089c0:	d100      	bne.n	80089c4 <memcpy+0xa>
 80089c2:	bd10      	pop	{r4, pc}
 80089c4:	5ccc      	ldrb	r4, [r1, r3]
 80089c6:	54c4      	strb	r4, [r0, r3]
 80089c8:	3301      	adds	r3, #1
 80089ca:	e7f8      	b.n	80089be <memcpy+0x4>

080089cc <_Balloc>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089d0:	0006      	movs	r6, r0
 80089d2:	000c      	movs	r4, r1
 80089d4:	2d00      	cmp	r5, #0
 80089d6:	d10e      	bne.n	80089f6 <_Balloc+0x2a>
 80089d8:	2010      	movs	r0, #16
 80089da:	f7ff ffd9 	bl	8008990 <malloc>
 80089de:	1e02      	subs	r2, r0, #0
 80089e0:	6270      	str	r0, [r6, #36]	; 0x24
 80089e2:	d104      	bne.n	80089ee <_Balloc+0x22>
 80089e4:	2166      	movs	r1, #102	; 0x66
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <_Balloc+0x80>)
 80089e8:	4819      	ldr	r0, [pc, #100]	; (8008a50 <_Balloc+0x84>)
 80089ea:	f000 fdb7 	bl	800955c <__assert_func>
 80089ee:	6045      	str	r5, [r0, #4]
 80089f0:	6085      	str	r5, [r0, #8]
 80089f2:	6005      	str	r5, [r0, #0]
 80089f4:	60c5      	str	r5, [r0, #12]
 80089f6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80089f8:	68eb      	ldr	r3, [r5, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d013      	beq.n	8008a26 <_Balloc+0x5a>
 80089fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a00:	00a2      	lsls	r2, r4, #2
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	189b      	adds	r3, r3, r2
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d118      	bne.n	8008a3e <_Balloc+0x72>
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	000d      	movs	r5, r1
 8008a10:	40a5      	lsls	r5, r4
 8008a12:	1d6a      	adds	r2, r5, #5
 8008a14:	0030      	movs	r0, r6
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	f000 fb76 	bl	8009108 <_calloc_r>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d00c      	beq.n	8008a3a <_Balloc+0x6e>
 8008a20:	6044      	str	r4, [r0, #4]
 8008a22:	6085      	str	r5, [r0, #8]
 8008a24:	e00d      	b.n	8008a42 <_Balloc+0x76>
 8008a26:	2221      	movs	r2, #33	; 0x21
 8008a28:	2104      	movs	r1, #4
 8008a2a:	0030      	movs	r0, r6
 8008a2c:	f000 fb6c 	bl	8009108 <_calloc_r>
 8008a30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a32:	60e8      	str	r0, [r5, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e1      	bne.n	80089fe <_Balloc+0x32>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	bd70      	pop	{r4, r5, r6, pc}
 8008a3e:	6802      	ldr	r2, [r0, #0]
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	6103      	str	r3, [r0, #16]
 8008a46:	60c3      	str	r3, [r0, #12]
 8008a48:	e7f8      	b.n	8008a3c <_Balloc+0x70>
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	0800a42d 	.word	0x0800a42d
 8008a50:	0800a4b4 	.word	0x0800a4b4

08008a54 <_Bfree>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a58:	0005      	movs	r5, r0
 8008a5a:	000c      	movs	r4, r1
 8008a5c:	2e00      	cmp	r6, #0
 8008a5e:	d10e      	bne.n	8008a7e <_Bfree+0x2a>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7ff ff95 	bl	8008990 <malloc>
 8008a66:	1e02      	subs	r2, r0, #0
 8008a68:	6268      	str	r0, [r5, #36]	; 0x24
 8008a6a:	d104      	bne.n	8008a76 <_Bfree+0x22>
 8008a6c:	218a      	movs	r1, #138	; 0x8a
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <_Bfree+0x40>)
 8008a70:	4809      	ldr	r0, [pc, #36]	; (8008a98 <_Bfree+0x44>)
 8008a72:	f000 fd73 	bl	800955c <__assert_func>
 8008a76:	6046      	str	r6, [r0, #4]
 8008a78:	6086      	str	r6, [r0, #8]
 8008a7a:	6006      	str	r6, [r0, #0]
 8008a7c:	60c6      	str	r6, [r0, #12]
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	d007      	beq.n	8008a92 <_Bfree+0x3e>
 8008a82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a84:	6862      	ldr	r2, [r4, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	0092      	lsls	r2, r2, #2
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	6022      	str	r2, [r4, #0]
 8008a90:	601c      	str	r4, [r3, #0]
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	0800a42d 	.word	0x0800a42d
 8008a98:	0800a4b4 	.word	0x0800a4b4

08008a9c <__multadd>:
 8008a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a9e:	000e      	movs	r6, r1
 8008aa0:	9001      	str	r0, [sp, #4]
 8008aa2:	000c      	movs	r4, r1
 8008aa4:	001d      	movs	r5, r3
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	690f      	ldr	r7, [r1, #16]
 8008aaa:	3614      	adds	r6, #20
 8008aac:	6833      	ldr	r3, [r6, #0]
 8008aae:	3001      	adds	r0, #1
 8008ab0:	b299      	uxth	r1, r3
 8008ab2:	4351      	muls	r1, r2
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	4353      	muls	r3, r2
 8008ab8:	1949      	adds	r1, r1, r5
 8008aba:	0c0d      	lsrs	r5, r1, #16
 8008abc:	195b      	adds	r3, r3, r5
 8008abe:	0c1d      	lsrs	r5, r3, #16
 8008ac0:	b289      	uxth	r1, r1
 8008ac2:	041b      	lsls	r3, r3, #16
 8008ac4:	185b      	adds	r3, r3, r1
 8008ac6:	c608      	stmia	r6!, {r3}
 8008ac8:	4287      	cmp	r7, r0
 8008aca:	dcef      	bgt.n	8008aac <__multadd+0x10>
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	d022      	beq.n	8008b16 <__multadd+0x7a>
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	42bb      	cmp	r3, r7
 8008ad4:	dc19      	bgt.n	8008b0a <__multadd+0x6e>
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	9801      	ldr	r0, [sp, #4]
 8008ada:	1c59      	adds	r1, r3, #1
 8008adc:	f7ff ff76 	bl	80089cc <_Balloc>
 8008ae0:	1e06      	subs	r6, r0, #0
 8008ae2:	d105      	bne.n	8008af0 <__multadd+0x54>
 8008ae4:	0002      	movs	r2, r0
 8008ae6:	21b5      	movs	r1, #181	; 0xb5
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <__multadd+0x80>)
 8008aea:	480d      	ldr	r0, [pc, #52]	; (8008b20 <__multadd+0x84>)
 8008aec:	f000 fd36 	bl	800955c <__assert_func>
 8008af0:	0021      	movs	r1, r4
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	310c      	adds	r1, #12
 8008af6:	1c9a      	adds	r2, r3, #2
 8008af8:	0092      	lsls	r2, r2, #2
 8008afa:	300c      	adds	r0, #12
 8008afc:	f7ff ff5d 	bl	80089ba <memcpy>
 8008b00:	0021      	movs	r1, r4
 8008b02:	9801      	ldr	r0, [sp, #4]
 8008b04:	f7ff ffa6 	bl	8008a54 <_Bfree>
 8008b08:	0034      	movs	r4, r6
 8008b0a:	1d3b      	adds	r3, r7, #4
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	18e3      	adds	r3, r4, r3
 8008b10:	605d      	str	r5, [r3, #4]
 8008b12:	1c7b      	adds	r3, r7, #1
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	0020      	movs	r0, r4
 8008b18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	0800a4a3 	.word	0x0800a4a3
 8008b20:	0800a4b4 	.word	0x0800a4b4

08008b24 <__hi0bits>:
 8008b24:	0003      	movs	r3, r0
 8008b26:	0c02      	lsrs	r2, r0, #16
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4282      	cmp	r2, r0
 8008b2c:	d101      	bne.n	8008b32 <__hi0bits+0xe>
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	3010      	adds	r0, #16
 8008b32:	0e1a      	lsrs	r2, r3, #24
 8008b34:	d101      	bne.n	8008b3a <__hi0bits+0x16>
 8008b36:	3008      	adds	r0, #8
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	0f1a      	lsrs	r2, r3, #28
 8008b3c:	d101      	bne.n	8008b42 <__hi0bits+0x1e>
 8008b3e:	3004      	adds	r0, #4
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	0f9a      	lsrs	r2, r3, #30
 8008b44:	d101      	bne.n	8008b4a <__hi0bits+0x26>
 8008b46:	3002      	adds	r0, #2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	db03      	blt.n	8008b56 <__hi0bits+0x32>
 8008b4e:	3001      	adds	r0, #1
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	d400      	bmi.n	8008b56 <__hi0bits+0x32>
 8008b54:	2020      	movs	r0, #32
 8008b56:	4770      	bx	lr

08008b58 <__lo0bits>:
 8008b58:	6803      	ldr	r3, [r0, #0]
 8008b5a:	0002      	movs	r2, r0
 8008b5c:	2107      	movs	r1, #7
 8008b5e:	0018      	movs	r0, r3
 8008b60:	4008      	ands	r0, r1
 8008b62:	420b      	tst	r3, r1
 8008b64:	d00d      	beq.n	8008b82 <__lo0bits+0x2a>
 8008b66:	3906      	subs	r1, #6
 8008b68:	2000      	movs	r0, #0
 8008b6a:	420b      	tst	r3, r1
 8008b6c:	d105      	bne.n	8008b7a <__lo0bits+0x22>
 8008b6e:	3002      	adds	r0, #2
 8008b70:	4203      	tst	r3, r0
 8008b72:	d003      	beq.n	8008b7c <__lo0bits+0x24>
 8008b74:	40cb      	lsrs	r3, r1
 8008b76:	0008      	movs	r0, r1
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	4770      	bx	lr
 8008b7c:	089b      	lsrs	r3, r3, #2
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e7fb      	b.n	8008b7a <__lo0bits+0x22>
 8008b82:	b299      	uxth	r1, r3
 8008b84:	2900      	cmp	r1, #0
 8008b86:	d101      	bne.n	8008b8c <__lo0bits+0x34>
 8008b88:	2010      	movs	r0, #16
 8008b8a:	0c1b      	lsrs	r3, r3, #16
 8008b8c:	b2d9      	uxtb	r1, r3
 8008b8e:	2900      	cmp	r1, #0
 8008b90:	d101      	bne.n	8008b96 <__lo0bits+0x3e>
 8008b92:	3008      	adds	r0, #8
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	0719      	lsls	r1, r3, #28
 8008b98:	d101      	bne.n	8008b9e <__lo0bits+0x46>
 8008b9a:	3004      	adds	r0, #4
 8008b9c:	091b      	lsrs	r3, r3, #4
 8008b9e:	0799      	lsls	r1, r3, #30
 8008ba0:	d101      	bne.n	8008ba6 <__lo0bits+0x4e>
 8008ba2:	3002      	adds	r0, #2
 8008ba4:	089b      	lsrs	r3, r3, #2
 8008ba6:	07d9      	lsls	r1, r3, #31
 8008ba8:	d4e9      	bmi.n	8008b7e <__lo0bits+0x26>
 8008baa:	3001      	adds	r0, #1
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	d1e6      	bne.n	8008b7e <__lo0bits+0x26>
 8008bb0:	2020      	movs	r0, #32
 8008bb2:	e7e2      	b.n	8008b7a <__lo0bits+0x22>

08008bb4 <__i2b>:
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	000c      	movs	r4, r1
 8008bb8:	2101      	movs	r1, #1
 8008bba:	f7ff ff07 	bl	80089cc <_Balloc>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d106      	bne.n	8008bd0 <__i2b+0x1c>
 8008bc2:	21a0      	movs	r1, #160	; 0xa0
 8008bc4:	0002      	movs	r2, r0
 8008bc6:	4b04      	ldr	r3, [pc, #16]	; (8008bd8 <__i2b+0x24>)
 8008bc8:	4804      	ldr	r0, [pc, #16]	; (8008bdc <__i2b+0x28>)
 8008bca:	0049      	lsls	r1, r1, #1
 8008bcc:	f000 fcc6 	bl	800955c <__assert_func>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	6144      	str	r4, [r0, #20]
 8008bd4:	6103      	str	r3, [r0, #16]
 8008bd6:	bd10      	pop	{r4, pc}
 8008bd8:	0800a4a3 	.word	0x0800a4a3
 8008bdc:	0800a4b4 	.word	0x0800a4b4

08008be0 <__multiply>:
 8008be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	0014      	movs	r4, r2
 8008be6:	6912      	ldr	r2, [r2, #16]
 8008be8:	000d      	movs	r5, r1
 8008bea:	b089      	sub	sp, #36	; 0x24
 8008bec:	4293      	cmp	r3, r2
 8008bee:	da01      	bge.n	8008bf4 <__multiply+0x14>
 8008bf0:	0025      	movs	r5, r4
 8008bf2:	000c      	movs	r4, r1
 8008bf4:	692f      	ldr	r7, [r5, #16]
 8008bf6:	6926      	ldr	r6, [r4, #16]
 8008bf8:	6869      	ldr	r1, [r5, #4]
 8008bfa:	19bb      	adds	r3, r7, r6
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	68ab      	ldr	r3, [r5, #8]
 8008c00:	19ba      	adds	r2, r7, r6
 8008c02:	4293      	cmp	r3, r2
 8008c04:	da00      	bge.n	8008c08 <__multiply+0x28>
 8008c06:	3101      	adds	r1, #1
 8008c08:	f7ff fee0 	bl	80089cc <_Balloc>
 8008c0c:	9001      	str	r0, [sp, #4]
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d106      	bne.n	8008c20 <__multiply+0x40>
 8008c12:	215e      	movs	r1, #94	; 0x5e
 8008c14:	0002      	movs	r2, r0
 8008c16:	4b48      	ldr	r3, [pc, #288]	; (8008d38 <__multiply+0x158>)
 8008c18:	4848      	ldr	r0, [pc, #288]	; (8008d3c <__multiply+0x15c>)
 8008c1a:	31ff      	adds	r1, #255	; 0xff
 8008c1c:	f000 fc9e 	bl	800955c <__assert_func>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	3314      	adds	r3, #20
 8008c26:	469c      	mov	ip, r3
 8008c28:	19bb      	adds	r3, r7, r6
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4463      	add	r3, ip
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	4663      	mov	r3, ip
 8008c32:	9903      	ldr	r1, [sp, #12]
 8008c34:	428b      	cmp	r3, r1
 8008c36:	d32c      	bcc.n	8008c92 <__multiply+0xb2>
 8008c38:	002b      	movs	r3, r5
 8008c3a:	0022      	movs	r2, r4
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	00bf      	lsls	r7, r7, #2
 8008c40:	3214      	adds	r2, #20
 8008c42:	9306      	str	r3, [sp, #24]
 8008c44:	00b6      	lsls	r6, r6, #2
 8008c46:	19db      	adds	r3, r3, r7
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	1993      	adds	r3, r2, r6
 8008c4c:	9307      	str	r3, [sp, #28]
 8008c4e:	2304      	movs	r3, #4
 8008c50:	9305      	str	r3, [sp, #20]
 8008c52:	002b      	movs	r3, r5
 8008c54:	9904      	ldr	r1, [sp, #16]
 8008c56:	3315      	adds	r3, #21
 8008c58:	9200      	str	r2, [sp, #0]
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	d305      	bcc.n	8008c6a <__multiply+0x8a>
 8008c5e:	1b4b      	subs	r3, r1, r5
 8008c60:	3b15      	subs	r3, #21
 8008c62:	089b      	lsrs	r3, r3, #2
 8008c64:	3301      	adds	r3, #1
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	9b07      	ldr	r3, [sp, #28]
 8008c6c:	9a00      	ldr	r2, [sp, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d311      	bcc.n	8008c96 <__multiply+0xb6>
 8008c72:	9b02      	ldr	r3, [sp, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd06      	ble.n	8008c86 <__multiply+0xa6>
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	3b04      	subs	r3, #4
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d054      	beq.n	8008d30 <__multiply+0x150>
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	9a02      	ldr	r2, [sp, #8]
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	611a      	str	r2, [r3, #16]
 8008c8e:	b009      	add	sp, #36	; 0x24
 8008c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c92:	c304      	stmia	r3!, {r2}
 8008c94:	e7cd      	b.n	8008c32 <__multiply+0x52>
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	b298      	uxth	r0, r3
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d01c      	beq.n	8008cda <__multiply+0xfa>
 8008ca0:	4667      	mov	r7, ip
 8008ca2:	2400      	movs	r4, #0
 8008ca4:	9e06      	ldr	r6, [sp, #24]
 8008ca6:	ce02      	ldmia	r6!, {r1}
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	b28b      	uxth	r3, r1
 8008cac:	4343      	muls	r3, r0
 8008cae:	0c09      	lsrs	r1, r1, #16
 8008cb0:	4341      	muls	r1, r0
 8008cb2:	b292      	uxth	r2, r2
 8008cb4:	189b      	adds	r3, r3, r2
 8008cb6:	191b      	adds	r3, r3, r4
 8008cb8:	000c      	movs	r4, r1
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	0c11      	lsrs	r1, r2, #16
 8008cbe:	1861      	adds	r1, r4, r1
 8008cc0:	0c1c      	lsrs	r4, r3, #16
 8008cc2:	1909      	adds	r1, r1, r4
 8008cc4:	0c0c      	lsrs	r4, r1, #16
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	0409      	lsls	r1, r1, #16
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	c708      	stmia	r7!, {r3}
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	42b3      	cmp	r3, r6
 8008cd2:	d8e8      	bhi.n	8008ca6 <__multiply+0xc6>
 8008cd4:	4663      	mov	r3, ip
 8008cd6:	9a05      	ldr	r2, [sp, #20]
 8008cd8:	509c      	str	r4, [r3, r2]
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	0c1e      	lsrs	r6, r3, #16
 8008ce0:	d020      	beq.n	8008d24 <__multiply+0x144>
 8008ce2:	4663      	mov	r3, ip
 8008ce4:	002c      	movs	r4, r5
 8008ce6:	4660      	mov	r0, ip
 8008ce8:	2700      	movs	r7, #0
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3414      	adds	r4, #20
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	b291      	uxth	r1, r2
 8008cf4:	4371      	muls	r1, r6
 8008cf6:	6802      	ldr	r2, [r0, #0]
 8008cf8:	0c12      	lsrs	r2, r2, #16
 8008cfa:	1889      	adds	r1, r1, r2
 8008cfc:	19cf      	adds	r7, r1, r7
 8008cfe:	0439      	lsls	r1, r7, #16
 8008d00:	430b      	orrs	r3, r1
 8008d02:	6003      	str	r3, [r0, #0]
 8008d04:	cc02      	ldmia	r4!, {r1}
 8008d06:	6843      	ldr	r3, [r0, #4]
 8008d08:	0c09      	lsrs	r1, r1, #16
 8008d0a:	4371      	muls	r1, r6
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	0c3f      	lsrs	r7, r7, #16
 8008d10:	18cb      	adds	r3, r1, r3
 8008d12:	9a04      	ldr	r2, [sp, #16]
 8008d14:	19db      	adds	r3, r3, r7
 8008d16:	0c1f      	lsrs	r7, r3, #16
 8008d18:	3004      	adds	r0, #4
 8008d1a:	42a2      	cmp	r2, r4
 8008d1c:	d8e7      	bhi.n	8008cee <__multiply+0x10e>
 8008d1e:	4662      	mov	r2, ip
 8008d20:	9905      	ldr	r1, [sp, #20]
 8008d22:	5053      	str	r3, [r2, r1]
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	3304      	adds	r3, #4
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	449c      	add	ip, r3
 8008d2e:	e79c      	b.n	8008c6a <__multiply+0x8a>
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	9302      	str	r3, [sp, #8]
 8008d36:	e79c      	b.n	8008c72 <__multiply+0x92>
 8008d38:	0800a4a3 	.word	0x0800a4a3
 8008d3c:	0800a4b4 	.word	0x0800a4b4

08008d40 <__pow5mult>:
 8008d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d42:	2303      	movs	r3, #3
 8008d44:	0015      	movs	r5, r2
 8008d46:	0007      	movs	r7, r0
 8008d48:	000e      	movs	r6, r1
 8008d4a:	401a      	ands	r2, r3
 8008d4c:	421d      	tst	r5, r3
 8008d4e:	d008      	beq.n	8008d62 <__pow5mult+0x22>
 8008d50:	4925      	ldr	r1, [pc, #148]	; (8008de8 <__pow5mult+0xa8>)
 8008d52:	3a01      	subs	r2, #1
 8008d54:	0092      	lsls	r2, r2, #2
 8008d56:	5852      	ldr	r2, [r2, r1]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	0031      	movs	r1, r6
 8008d5c:	f7ff fe9e 	bl	8008a9c <__multadd>
 8008d60:	0006      	movs	r6, r0
 8008d62:	10ad      	asrs	r5, r5, #2
 8008d64:	d03d      	beq.n	8008de2 <__pow5mult+0xa2>
 8008d66:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008d68:	2c00      	cmp	r4, #0
 8008d6a:	d10f      	bne.n	8008d8c <__pow5mult+0x4c>
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	f7ff fe0f 	bl	8008990 <malloc>
 8008d72:	1e02      	subs	r2, r0, #0
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24
 8008d76:	d105      	bne.n	8008d84 <__pow5mult+0x44>
 8008d78:	21d7      	movs	r1, #215	; 0xd7
 8008d7a:	4b1c      	ldr	r3, [pc, #112]	; (8008dec <__pow5mult+0xac>)
 8008d7c:	481c      	ldr	r0, [pc, #112]	; (8008df0 <__pow5mult+0xb0>)
 8008d7e:	0049      	lsls	r1, r1, #1
 8008d80:	f000 fbec 	bl	800955c <__assert_func>
 8008d84:	6044      	str	r4, [r0, #4]
 8008d86:	6084      	str	r4, [r0, #8]
 8008d88:	6004      	str	r4, [r0, #0]
 8008d8a:	60c4      	str	r4, [r0, #12]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	689c      	ldr	r4, [r3, #8]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	d108      	bne.n	8008da8 <__pow5mult+0x68>
 8008d96:	0038      	movs	r0, r7
 8008d98:	4916      	ldr	r1, [pc, #88]	; (8008df4 <__pow5mult+0xb4>)
 8008d9a:	f7ff ff0b 	bl	8008bb4 <__i2b>
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	0004      	movs	r4, r0
 8008da2:	6098      	str	r0, [r3, #8]
 8008da4:	2300      	movs	r3, #0
 8008da6:	6003      	str	r3, [r0, #0]
 8008da8:	2301      	movs	r3, #1
 8008daa:	421d      	tst	r5, r3
 8008dac:	d00a      	beq.n	8008dc4 <__pow5mult+0x84>
 8008dae:	0031      	movs	r1, r6
 8008db0:	0022      	movs	r2, r4
 8008db2:	0038      	movs	r0, r7
 8008db4:	f7ff ff14 	bl	8008be0 <__multiply>
 8008db8:	0031      	movs	r1, r6
 8008dba:	9001      	str	r0, [sp, #4]
 8008dbc:	0038      	movs	r0, r7
 8008dbe:	f7ff fe49 	bl	8008a54 <_Bfree>
 8008dc2:	9e01      	ldr	r6, [sp, #4]
 8008dc4:	106d      	asrs	r5, r5, #1
 8008dc6:	d00c      	beq.n	8008de2 <__pow5mult+0xa2>
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d107      	bne.n	8008dde <__pow5mult+0x9e>
 8008dce:	0022      	movs	r2, r4
 8008dd0:	0021      	movs	r1, r4
 8008dd2:	0038      	movs	r0, r7
 8008dd4:	f7ff ff04 	bl	8008be0 <__multiply>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	6003      	str	r3, [r0, #0]
 8008dde:	0004      	movs	r4, r0
 8008de0:	e7e2      	b.n	8008da8 <__pow5mult+0x68>
 8008de2:	0030      	movs	r0, r6
 8008de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	0800a608 	.word	0x0800a608
 8008dec:	0800a42d 	.word	0x0800a42d
 8008df0:	0800a4b4 	.word	0x0800a4b4
 8008df4:	00000271 	.word	0x00000271

08008df8 <__lshift>:
 8008df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfa:	000c      	movs	r4, r1
 8008dfc:	0017      	movs	r7, r2
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	1155      	asrs	r5, r2, #5
 8008e02:	b087      	sub	sp, #28
 8008e04:	18eb      	adds	r3, r5, r3
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	6849      	ldr	r1, [r1, #4]
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	9004      	str	r0, [sp, #16]
 8008e12:	9a01      	ldr	r2, [sp, #4]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	db11      	blt.n	8008e3c <__lshift+0x44>
 8008e18:	9804      	ldr	r0, [sp, #16]
 8008e1a:	f7ff fdd7 	bl	80089cc <_Balloc>
 8008e1e:	0002      	movs	r2, r0
 8008e20:	2300      	movs	r3, #0
 8008e22:	3214      	adds	r2, #20
 8008e24:	0006      	movs	r6, r0
 8008e26:	0011      	movs	r1, r2
 8008e28:	9203      	str	r2, [sp, #12]
 8008e2a:	4298      	cmp	r0, r3
 8008e2c:	d10d      	bne.n	8008e4a <__lshift+0x52>
 8008e2e:	21da      	movs	r1, #218	; 0xda
 8008e30:	0002      	movs	r2, r0
 8008e32:	4b27      	ldr	r3, [pc, #156]	; (8008ed0 <__lshift+0xd8>)
 8008e34:	4827      	ldr	r0, [pc, #156]	; (8008ed4 <__lshift+0xdc>)
 8008e36:	31ff      	adds	r1, #255	; 0xff
 8008e38:	f000 fb90 	bl	800955c <__assert_func>
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	e7e7      	b.n	8008e12 <__lshift+0x1a>
 8008e42:	2200      	movs	r2, #0
 8008e44:	0098      	lsls	r0, r3, #2
 8008e46:	500a      	str	r2, [r1, r0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	42ab      	cmp	r3, r5
 8008e4c:	dbf9      	blt.n	8008e42 <__lshift+0x4a>
 8008e4e:	43eb      	mvns	r3, r5
 8008e50:	17db      	asrs	r3, r3, #31
 8008e52:	401d      	ands	r5, r3
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	00ad      	lsls	r5, r5, #2
 8008e58:	211f      	movs	r1, #31
 8008e5a:	0038      	movs	r0, r7
 8008e5c:	195d      	adds	r5, r3, r5
 8008e5e:	0023      	movs	r3, r4
 8008e60:	6922      	ldr	r2, [r4, #16]
 8008e62:	3314      	adds	r3, #20
 8008e64:	0092      	lsls	r2, r2, #2
 8008e66:	4008      	ands	r0, r1
 8008e68:	4684      	mov	ip, r0
 8008e6a:	189a      	adds	r2, r3, r2
 8008e6c:	420f      	tst	r7, r1
 8008e6e:	d02a      	beq.n	8008ec6 <__lshift+0xce>
 8008e70:	3101      	adds	r1, #1
 8008e72:	1a09      	subs	r1, r1, r0
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	2100      	movs	r1, #0
 8008e78:	9503      	str	r5, [sp, #12]
 8008e7a:	4667      	mov	r7, ip
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	40b8      	lsls	r0, r7
 8008e80:	4301      	orrs	r1, r0
 8008e82:	9803      	ldr	r0, [sp, #12]
 8008e84:	c002      	stmia	r0!, {r1}
 8008e86:	cb02      	ldmia	r3!, {r1}
 8008e88:	9003      	str	r0, [sp, #12]
 8008e8a:	9805      	ldr	r0, [sp, #20]
 8008e8c:	40c1      	lsrs	r1, r0
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d8f3      	bhi.n	8008e7a <__lshift+0x82>
 8008e92:	0020      	movs	r0, r4
 8008e94:	3015      	adds	r0, #21
 8008e96:	2304      	movs	r3, #4
 8008e98:	4282      	cmp	r2, r0
 8008e9a:	d304      	bcc.n	8008ea6 <__lshift+0xae>
 8008e9c:	1b13      	subs	r3, r2, r4
 8008e9e:	3b15      	subs	r3, #21
 8008ea0:	089b      	lsrs	r3, r3, #2
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	50e9      	str	r1, [r5, r3]
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	d002      	beq.n	8008eb2 <__lshift+0xba>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	3302      	adds	r3, #2
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	9804      	ldr	r0, [sp, #16]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	0021      	movs	r1, r4
 8008eba:	6133      	str	r3, [r6, #16]
 8008ebc:	f7ff fdca 	bl	8008a54 <_Bfree>
 8008ec0:	0030      	movs	r0, r6
 8008ec2:	b007      	add	sp, #28
 8008ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec6:	cb02      	ldmia	r3!, {r1}
 8008ec8:	c502      	stmia	r5!, {r1}
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d8fb      	bhi.n	8008ec6 <__lshift+0xce>
 8008ece:	e7f0      	b.n	8008eb2 <__lshift+0xba>
 8008ed0:	0800a4a3 	.word	0x0800a4a3
 8008ed4:	0800a4b4 	.word	0x0800a4b4

08008ed8 <__mcmp>:
 8008ed8:	6902      	ldr	r2, [r0, #16]
 8008eda:	690b      	ldr	r3, [r1, #16]
 8008edc:	b530      	push	{r4, r5, lr}
 8008ede:	0004      	movs	r4, r0
 8008ee0:	1ad0      	subs	r0, r2, r3
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d10d      	bne.n	8008f02 <__mcmp+0x2a>
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	3414      	adds	r4, #20
 8008eea:	3114      	adds	r1, #20
 8008eec:	18e2      	adds	r2, r4, r3
 8008eee:	18c9      	adds	r1, r1, r3
 8008ef0:	3a04      	subs	r2, #4
 8008ef2:	3904      	subs	r1, #4
 8008ef4:	6815      	ldr	r5, [r2, #0]
 8008ef6:	680b      	ldr	r3, [r1, #0]
 8008ef8:	429d      	cmp	r5, r3
 8008efa:	d003      	beq.n	8008f04 <__mcmp+0x2c>
 8008efc:	2001      	movs	r0, #1
 8008efe:	429d      	cmp	r5, r3
 8008f00:	d303      	bcc.n	8008f0a <__mcmp+0x32>
 8008f02:	bd30      	pop	{r4, r5, pc}
 8008f04:	4294      	cmp	r4, r2
 8008f06:	d3f3      	bcc.n	8008ef0 <__mcmp+0x18>
 8008f08:	e7fb      	b.n	8008f02 <__mcmp+0x2a>
 8008f0a:	4240      	negs	r0, r0
 8008f0c:	e7f9      	b.n	8008f02 <__mcmp+0x2a>
	...

08008f10 <__mdiff>:
 8008f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f12:	000e      	movs	r6, r1
 8008f14:	0007      	movs	r7, r0
 8008f16:	0011      	movs	r1, r2
 8008f18:	0030      	movs	r0, r6
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	0014      	movs	r4, r2
 8008f1e:	f7ff ffdb 	bl	8008ed8 <__mcmp>
 8008f22:	1e05      	subs	r5, r0, #0
 8008f24:	d110      	bne.n	8008f48 <__mdiff+0x38>
 8008f26:	0001      	movs	r1, r0
 8008f28:	0038      	movs	r0, r7
 8008f2a:	f7ff fd4f 	bl	80089cc <_Balloc>
 8008f2e:	1e02      	subs	r2, r0, #0
 8008f30:	d104      	bne.n	8008f3c <__mdiff+0x2c>
 8008f32:	4b40      	ldr	r3, [pc, #256]	; (8009034 <__mdiff+0x124>)
 8008f34:	4940      	ldr	r1, [pc, #256]	; (8009038 <__mdiff+0x128>)
 8008f36:	4841      	ldr	r0, [pc, #260]	; (800903c <__mdiff+0x12c>)
 8008f38:	f000 fb10 	bl	800955c <__assert_func>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	6145      	str	r5, [r0, #20]
 8008f40:	6103      	str	r3, [r0, #16]
 8008f42:	0010      	movs	r0, r2
 8008f44:	b007      	add	sp, #28
 8008f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f48:	2301      	movs	r3, #1
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	db04      	blt.n	8008f5a <__mdiff+0x4a>
 8008f50:	0023      	movs	r3, r4
 8008f52:	0034      	movs	r4, r6
 8008f54:	001e      	movs	r6, r3
 8008f56:	2300      	movs	r3, #0
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	0038      	movs	r0, r7
 8008f5c:	6861      	ldr	r1, [r4, #4]
 8008f5e:	f7ff fd35 	bl	80089cc <_Balloc>
 8008f62:	1e02      	subs	r2, r0, #0
 8008f64:	d103      	bne.n	8008f6e <__mdiff+0x5e>
 8008f66:	2190      	movs	r1, #144	; 0x90
 8008f68:	4b32      	ldr	r3, [pc, #200]	; (8009034 <__mdiff+0x124>)
 8008f6a:	0089      	lsls	r1, r1, #2
 8008f6c:	e7e3      	b.n	8008f36 <__mdiff+0x26>
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	2700      	movs	r7, #0
 8008f72:	60c3      	str	r3, [r0, #12]
 8008f74:	6920      	ldr	r0, [r4, #16]
 8008f76:	3414      	adds	r4, #20
 8008f78:	9401      	str	r4, [sp, #4]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	0084      	lsls	r4, r0, #2
 8008f7e:	191b      	adds	r3, r3, r4
 8008f80:	0034      	movs	r4, r6
 8008f82:	9302      	str	r3, [sp, #8]
 8008f84:	6933      	ldr	r3, [r6, #16]
 8008f86:	3414      	adds	r4, #20
 8008f88:	0099      	lsls	r1, r3, #2
 8008f8a:	1863      	adds	r3, r4, r1
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	0013      	movs	r3, r2
 8008f90:	3314      	adds	r3, #20
 8008f92:	469c      	mov	ip, r3
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	cc02      	ldmia	r4!, {r1}
 8008f9e:	cb20      	ldmia	r3!, {r5}
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	b2ab      	uxth	r3, r5
 8008fa4:	19df      	adds	r7, r3, r7
 8008fa6:	b28b      	uxth	r3, r1
 8008fa8:	1afb      	subs	r3, r7, r3
 8008faa:	0c2d      	lsrs	r5, r5, #16
 8008fac:	0c09      	lsrs	r1, r1, #16
 8008fae:	1a69      	subs	r1, r5, r1
 8008fb0:	141d      	asrs	r5, r3, #16
 8008fb2:	1949      	adds	r1, r1, r5
 8008fb4:	140f      	asrs	r7, r1, #16
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	0409      	lsls	r1, r1, #16
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	4661      	mov	r1, ip
 8008fbe:	c108      	stmia	r1!, {r3}
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	468c      	mov	ip, r1
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	d8e8      	bhi.n	8008f9a <__mdiff+0x8a>
 8008fc8:	0031      	movs	r1, r6
 8008fca:	9c03      	ldr	r4, [sp, #12]
 8008fcc:	3115      	adds	r1, #21
 8008fce:	2304      	movs	r3, #4
 8008fd0:	428c      	cmp	r4, r1
 8008fd2:	d304      	bcc.n	8008fde <__mdiff+0xce>
 8008fd4:	1ba3      	subs	r3, r4, r6
 8008fd6:	3b15      	subs	r3, #21
 8008fd8:	089b      	lsrs	r3, r3, #2
 8008fda:	3301      	adds	r3, #1
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	9901      	ldr	r1, [sp, #4]
 8008fe0:	18cc      	adds	r4, r1, r3
 8008fe2:	9905      	ldr	r1, [sp, #20]
 8008fe4:	0026      	movs	r6, r4
 8008fe6:	18cb      	adds	r3, r1, r3
 8008fe8:	469c      	mov	ip, r3
 8008fea:	9902      	ldr	r1, [sp, #8]
 8008fec:	428e      	cmp	r6, r1
 8008fee:	d310      	bcc.n	8009012 <__mdiff+0x102>
 8008ff0:	9e02      	ldr	r6, [sp, #8]
 8008ff2:	1ee5      	subs	r5, r4, #3
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	42ae      	cmp	r6, r5
 8008ff8:	d304      	bcc.n	8009004 <__mdiff+0xf4>
 8008ffa:	0031      	movs	r1, r6
 8008ffc:	3103      	adds	r1, #3
 8008ffe:	1b09      	subs	r1, r1, r4
 8009000:	0889      	lsrs	r1, r1, #2
 8009002:	0089      	lsls	r1, r1, #2
 8009004:	185b      	adds	r3, r3, r1
 8009006:	3b04      	subs	r3, #4
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	2900      	cmp	r1, #0
 800900c:	d00f      	beq.n	800902e <__mdiff+0x11e>
 800900e:	6110      	str	r0, [r2, #16]
 8009010:	e797      	b.n	8008f42 <__mdiff+0x32>
 8009012:	ce02      	ldmia	r6!, {r1}
 8009014:	b28d      	uxth	r5, r1
 8009016:	19ed      	adds	r5, r5, r7
 8009018:	0c0f      	lsrs	r7, r1, #16
 800901a:	1429      	asrs	r1, r5, #16
 800901c:	1879      	adds	r1, r7, r1
 800901e:	140f      	asrs	r7, r1, #16
 8009020:	b2ad      	uxth	r5, r5
 8009022:	0409      	lsls	r1, r1, #16
 8009024:	430d      	orrs	r5, r1
 8009026:	4661      	mov	r1, ip
 8009028:	c120      	stmia	r1!, {r5}
 800902a:	468c      	mov	ip, r1
 800902c:	e7dd      	b.n	8008fea <__mdiff+0xda>
 800902e:	3801      	subs	r0, #1
 8009030:	e7e9      	b.n	8009006 <__mdiff+0xf6>
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	0800a4a3 	.word	0x0800a4a3
 8009038:	00000232 	.word	0x00000232
 800903c:	0800a4b4 	.word	0x0800a4b4

08009040 <__d2b>:
 8009040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009042:	2101      	movs	r1, #1
 8009044:	0014      	movs	r4, r2
 8009046:	001e      	movs	r6, r3
 8009048:	9f08      	ldr	r7, [sp, #32]
 800904a:	f7ff fcbf 	bl	80089cc <_Balloc>
 800904e:	1e05      	subs	r5, r0, #0
 8009050:	d105      	bne.n	800905e <__d2b+0x1e>
 8009052:	0002      	movs	r2, r0
 8009054:	4b26      	ldr	r3, [pc, #152]	; (80090f0 <__d2b+0xb0>)
 8009056:	4927      	ldr	r1, [pc, #156]	; (80090f4 <__d2b+0xb4>)
 8009058:	4827      	ldr	r0, [pc, #156]	; (80090f8 <__d2b+0xb8>)
 800905a:	f000 fa7f 	bl	800955c <__assert_func>
 800905e:	0333      	lsls	r3, r6, #12
 8009060:	0076      	lsls	r6, r6, #1
 8009062:	0b1b      	lsrs	r3, r3, #12
 8009064:	0d76      	lsrs	r6, r6, #21
 8009066:	d124      	bne.n	80090b2 <__d2b+0x72>
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	2c00      	cmp	r4, #0
 800906c:	d027      	beq.n	80090be <__d2b+0x7e>
 800906e:	4668      	mov	r0, sp
 8009070:	9400      	str	r4, [sp, #0]
 8009072:	f7ff fd71 	bl	8008b58 <__lo0bits>
 8009076:	9c00      	ldr	r4, [sp, #0]
 8009078:	2800      	cmp	r0, #0
 800907a:	d01e      	beq.n	80090ba <__d2b+0x7a>
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	2120      	movs	r1, #32
 8009080:	001a      	movs	r2, r3
 8009082:	1a09      	subs	r1, r1, r0
 8009084:	408a      	lsls	r2, r1
 8009086:	40c3      	lsrs	r3, r0
 8009088:	4322      	orrs	r2, r4
 800908a:	616a      	str	r2, [r5, #20]
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	9c01      	ldr	r4, [sp, #4]
 8009090:	61ac      	str	r4, [r5, #24]
 8009092:	1e63      	subs	r3, r4, #1
 8009094:	419c      	sbcs	r4, r3
 8009096:	3401      	adds	r4, #1
 8009098:	612c      	str	r4, [r5, #16]
 800909a:	2e00      	cmp	r6, #0
 800909c:	d018      	beq.n	80090d0 <__d2b+0x90>
 800909e:	4b17      	ldr	r3, [pc, #92]	; (80090fc <__d2b+0xbc>)
 80090a0:	18f6      	adds	r6, r6, r3
 80090a2:	2335      	movs	r3, #53	; 0x35
 80090a4:	1836      	adds	r6, r6, r0
 80090a6:	1a18      	subs	r0, r3, r0
 80090a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090aa:	603e      	str	r6, [r7, #0]
 80090ac:	6018      	str	r0, [r3, #0]
 80090ae:	0028      	movs	r0, r5
 80090b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090b2:	2280      	movs	r2, #128	; 0x80
 80090b4:	0352      	lsls	r2, r2, #13
 80090b6:	4313      	orrs	r3, r2
 80090b8:	e7d6      	b.n	8009068 <__d2b+0x28>
 80090ba:	616c      	str	r4, [r5, #20]
 80090bc:	e7e7      	b.n	800908e <__d2b+0x4e>
 80090be:	a801      	add	r0, sp, #4
 80090c0:	f7ff fd4a 	bl	8008b58 <__lo0bits>
 80090c4:	2401      	movs	r4, #1
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	612c      	str	r4, [r5, #16]
 80090ca:	616b      	str	r3, [r5, #20]
 80090cc:	3020      	adds	r0, #32
 80090ce:	e7e4      	b.n	800909a <__d2b+0x5a>
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <__d2b+0xc0>)
 80090d2:	18c0      	adds	r0, r0, r3
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <__d2b+0xc4>)
 80090d6:	6038      	str	r0, [r7, #0]
 80090d8:	18e3      	adds	r3, r4, r3
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	18eb      	adds	r3, r5, r3
 80090de:	6958      	ldr	r0, [r3, #20]
 80090e0:	f7ff fd20 	bl	8008b24 <__hi0bits>
 80090e4:	0164      	lsls	r4, r4, #5
 80090e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e8:	1a24      	subs	r4, r4, r0
 80090ea:	601c      	str	r4, [r3, #0]
 80090ec:	e7df      	b.n	80090ae <__d2b+0x6e>
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	0800a4a3 	.word	0x0800a4a3
 80090f4:	0000030a 	.word	0x0000030a
 80090f8:	0800a4b4 	.word	0x0800a4b4
 80090fc:	fffffbcd 	.word	0xfffffbcd
 8009100:	fffffbce 	.word	0xfffffbce
 8009104:	3fffffff 	.word	0x3fffffff

08009108 <_calloc_r>:
 8009108:	434a      	muls	r2, r1
 800910a:	b570      	push	{r4, r5, r6, lr}
 800910c:	0011      	movs	r1, r2
 800910e:	0015      	movs	r5, r2
 8009110:	f000 f852 	bl	80091b8 <_malloc_r>
 8009114:	1e04      	subs	r4, r0, #0
 8009116:	d003      	beq.n	8009120 <_calloc_r+0x18>
 8009118:	002a      	movs	r2, r5
 800911a:	2100      	movs	r1, #0
 800911c:	f7fe f8e8 	bl	80072f0 <memset>
 8009120:	0020      	movs	r0, r4
 8009122:	bd70      	pop	{r4, r5, r6, pc}

08009124 <_free_r>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	0005      	movs	r5, r0
 8009128:	2900      	cmp	r1, #0
 800912a:	d010      	beq.n	800914e <_free_r+0x2a>
 800912c:	1f0c      	subs	r4, r1, #4
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	da00      	bge.n	8009136 <_free_r+0x12>
 8009134:	18e4      	adds	r4, r4, r3
 8009136:	0028      	movs	r0, r5
 8009138:	f000 fa64 	bl	8009604 <__malloc_lock>
 800913c:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <_free_r+0x90>)
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <_free_r+0x2c>
 8009144:	6063      	str	r3, [r4, #4]
 8009146:	6014      	str	r4, [r2, #0]
 8009148:	0028      	movs	r0, r5
 800914a:	f000 fa63 	bl	8009614 <__malloc_unlock>
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	42a3      	cmp	r3, r4
 8009152:	d908      	bls.n	8009166 <_free_r+0x42>
 8009154:	6821      	ldr	r1, [r4, #0]
 8009156:	1860      	adds	r0, r4, r1
 8009158:	4283      	cmp	r3, r0
 800915a:	d1f3      	bne.n	8009144 <_free_r+0x20>
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	1841      	adds	r1, r0, r1
 8009162:	6021      	str	r1, [r4, #0]
 8009164:	e7ee      	b.n	8009144 <_free_r+0x20>
 8009166:	001a      	movs	r2, r3
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <_free_r+0x4e>
 800916e:	42a3      	cmp	r3, r4
 8009170:	d9f9      	bls.n	8009166 <_free_r+0x42>
 8009172:	6811      	ldr	r1, [r2, #0]
 8009174:	1850      	adds	r0, r2, r1
 8009176:	42a0      	cmp	r0, r4
 8009178:	d10b      	bne.n	8009192 <_free_r+0x6e>
 800917a:	6820      	ldr	r0, [r4, #0]
 800917c:	1809      	adds	r1, r1, r0
 800917e:	1850      	adds	r0, r2, r1
 8009180:	6011      	str	r1, [r2, #0]
 8009182:	4283      	cmp	r3, r0
 8009184:	d1e0      	bne.n	8009148 <_free_r+0x24>
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	1841      	adds	r1, r0, r1
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	6053      	str	r3, [r2, #4]
 8009190:	e7da      	b.n	8009148 <_free_r+0x24>
 8009192:	42a0      	cmp	r0, r4
 8009194:	d902      	bls.n	800919c <_free_r+0x78>
 8009196:	230c      	movs	r3, #12
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	e7d5      	b.n	8009148 <_free_r+0x24>
 800919c:	6821      	ldr	r1, [r4, #0]
 800919e:	1860      	adds	r0, r4, r1
 80091a0:	4283      	cmp	r3, r0
 80091a2:	d103      	bne.n	80091ac <_free_r+0x88>
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	1841      	adds	r1, r0, r1
 80091aa:	6021      	str	r1, [r4, #0]
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	6054      	str	r4, [r2, #4]
 80091b0:	e7ca      	b.n	8009148 <_free_r+0x24>
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	200002b8 	.word	0x200002b8

080091b8 <_malloc_r>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	2303      	movs	r3, #3
 80091bc:	1ccd      	adds	r5, r1, #3
 80091be:	439d      	bics	r5, r3
 80091c0:	3508      	adds	r5, #8
 80091c2:	0006      	movs	r6, r0
 80091c4:	2d0c      	cmp	r5, #12
 80091c6:	d21f      	bcs.n	8009208 <_malloc_r+0x50>
 80091c8:	250c      	movs	r5, #12
 80091ca:	42a9      	cmp	r1, r5
 80091cc:	d81e      	bhi.n	800920c <_malloc_r+0x54>
 80091ce:	0030      	movs	r0, r6
 80091d0:	f000 fa18 	bl	8009604 <__malloc_lock>
 80091d4:	4925      	ldr	r1, [pc, #148]	; (800926c <_malloc_r+0xb4>)
 80091d6:	680a      	ldr	r2, [r1, #0]
 80091d8:	0014      	movs	r4, r2
 80091da:	2c00      	cmp	r4, #0
 80091dc:	d11a      	bne.n	8009214 <_malloc_r+0x5c>
 80091de:	4f24      	ldr	r7, [pc, #144]	; (8009270 <_malloc_r+0xb8>)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <_malloc_r+0x38>
 80091e6:	0021      	movs	r1, r4
 80091e8:	0030      	movs	r0, r6
 80091ea:	f000 f9a5 	bl	8009538 <_sbrk_r>
 80091ee:	6038      	str	r0, [r7, #0]
 80091f0:	0029      	movs	r1, r5
 80091f2:	0030      	movs	r0, r6
 80091f4:	f000 f9a0 	bl	8009538 <_sbrk_r>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d12b      	bne.n	8009254 <_malloc_r+0x9c>
 80091fc:	230c      	movs	r3, #12
 80091fe:	0030      	movs	r0, r6
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	f000 fa07 	bl	8009614 <__malloc_unlock>
 8009206:	e003      	b.n	8009210 <_malloc_r+0x58>
 8009208:	2d00      	cmp	r5, #0
 800920a:	dade      	bge.n	80091ca <_malloc_r+0x12>
 800920c:	230c      	movs	r3, #12
 800920e:	6033      	str	r3, [r6, #0]
 8009210:	2000      	movs	r0, #0
 8009212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	1b5b      	subs	r3, r3, r5
 8009218:	d419      	bmi.n	800924e <_malloc_r+0x96>
 800921a:	2b0b      	cmp	r3, #11
 800921c:	d903      	bls.n	8009226 <_malloc_r+0x6e>
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	18e4      	adds	r4, r4, r3
 8009222:	6025      	str	r5, [r4, #0]
 8009224:	e003      	b.n	800922e <_malloc_r+0x76>
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	42a2      	cmp	r2, r4
 800922a:	d10e      	bne.n	800924a <_malloc_r+0x92>
 800922c:	600b      	str	r3, [r1, #0]
 800922e:	0030      	movs	r0, r6
 8009230:	f000 f9f0 	bl	8009614 <__malloc_unlock>
 8009234:	0020      	movs	r0, r4
 8009236:	2207      	movs	r2, #7
 8009238:	300b      	adds	r0, #11
 800923a:	1d23      	adds	r3, r4, #4
 800923c:	4390      	bics	r0, r2
 800923e:	1ac2      	subs	r2, r0, r3
 8009240:	4298      	cmp	r0, r3
 8009242:	d0e6      	beq.n	8009212 <_malloc_r+0x5a>
 8009244:	1a1b      	subs	r3, r3, r0
 8009246:	50a3      	str	r3, [r4, r2]
 8009248:	e7e3      	b.n	8009212 <_malloc_r+0x5a>
 800924a:	6053      	str	r3, [r2, #4]
 800924c:	e7ef      	b.n	800922e <_malloc_r+0x76>
 800924e:	0022      	movs	r2, r4
 8009250:	6864      	ldr	r4, [r4, #4]
 8009252:	e7c2      	b.n	80091da <_malloc_r+0x22>
 8009254:	2303      	movs	r3, #3
 8009256:	1cc4      	adds	r4, r0, #3
 8009258:	439c      	bics	r4, r3
 800925a:	42a0      	cmp	r0, r4
 800925c:	d0e1      	beq.n	8009222 <_malloc_r+0x6a>
 800925e:	1a21      	subs	r1, r4, r0
 8009260:	0030      	movs	r0, r6
 8009262:	f000 f969 	bl	8009538 <_sbrk_r>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d1db      	bne.n	8009222 <_malloc_r+0x6a>
 800926a:	e7c7      	b.n	80091fc <_malloc_r+0x44>
 800926c:	200002b8 	.word	0x200002b8
 8009270:	200002bc 	.word	0x200002bc

08009274 <__ssputs_r>:
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	688e      	ldr	r6, [r1, #8]
 8009278:	b085      	sub	sp, #20
 800927a:	0007      	movs	r7, r0
 800927c:	000c      	movs	r4, r1
 800927e:	9203      	str	r2, [sp, #12]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	429e      	cmp	r6, r3
 8009284:	d83c      	bhi.n	8009300 <__ssputs_r+0x8c>
 8009286:	2390      	movs	r3, #144	; 0x90
 8009288:	898a      	ldrh	r2, [r1, #12]
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	421a      	tst	r2, r3
 800928e:	d034      	beq.n	80092fa <__ssputs_r+0x86>
 8009290:	2503      	movs	r5, #3
 8009292:	6909      	ldr	r1, [r1, #16]
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	1a5b      	subs	r3, r3, r1
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	9802      	ldr	r0, [sp, #8]
 800929e:	435d      	muls	r5, r3
 80092a0:	0feb      	lsrs	r3, r5, #31
 80092a2:	195d      	adds	r5, r3, r5
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	106d      	asrs	r5, r5, #1
 80092a8:	3301      	adds	r3, #1
 80092aa:	181b      	adds	r3, r3, r0
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	d900      	bls.n	80092b2 <__ssputs_r+0x3e>
 80092b0:	001d      	movs	r5, r3
 80092b2:	0553      	lsls	r3, r2, #21
 80092b4:	d532      	bpl.n	800931c <__ssputs_r+0xa8>
 80092b6:	0029      	movs	r1, r5
 80092b8:	0038      	movs	r0, r7
 80092ba:	f7ff ff7d 	bl	80091b8 <_malloc_r>
 80092be:	1e06      	subs	r6, r0, #0
 80092c0:	d109      	bne.n	80092d6 <__ssputs_r+0x62>
 80092c2:	230c      	movs	r3, #12
 80092c4:	603b      	str	r3, [r7, #0]
 80092c6:	2340      	movs	r3, #64	; 0x40
 80092c8:	2001      	movs	r0, #1
 80092ca:	89a2      	ldrh	r2, [r4, #12]
 80092cc:	4240      	negs	r0, r0
 80092ce:	4313      	orrs	r3, r2
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	b005      	add	sp, #20
 80092d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d6:	9a02      	ldr	r2, [sp, #8]
 80092d8:	6921      	ldr	r1, [r4, #16]
 80092da:	f7ff fb6e 	bl	80089ba <memcpy>
 80092de:	89a3      	ldrh	r3, [r4, #12]
 80092e0:	4a14      	ldr	r2, [pc, #80]	; (8009334 <__ssputs_r+0xc0>)
 80092e2:	401a      	ands	r2, r3
 80092e4:	2380      	movs	r3, #128	; 0x80
 80092e6:	4313      	orrs	r3, r2
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	9b02      	ldr	r3, [sp, #8]
 80092ec:	6126      	str	r6, [r4, #16]
 80092ee:	18f6      	adds	r6, r6, r3
 80092f0:	6026      	str	r6, [r4, #0]
 80092f2:	6165      	str	r5, [r4, #20]
 80092f4:	9e01      	ldr	r6, [sp, #4]
 80092f6:	1aed      	subs	r5, r5, r3
 80092f8:	60a5      	str	r5, [r4, #8]
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	429e      	cmp	r6, r3
 80092fe:	d900      	bls.n	8009302 <__ssputs_r+0x8e>
 8009300:	9e01      	ldr	r6, [sp, #4]
 8009302:	0032      	movs	r2, r6
 8009304:	9903      	ldr	r1, [sp, #12]
 8009306:	6820      	ldr	r0, [r4, #0]
 8009308:	f000 f968 	bl	80095dc <memmove>
 800930c:	68a3      	ldr	r3, [r4, #8]
 800930e:	2000      	movs	r0, #0
 8009310:	1b9b      	subs	r3, r3, r6
 8009312:	60a3      	str	r3, [r4, #8]
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	199e      	adds	r6, r3, r6
 8009318:	6026      	str	r6, [r4, #0]
 800931a:	e7da      	b.n	80092d2 <__ssputs_r+0x5e>
 800931c:	002a      	movs	r2, r5
 800931e:	0038      	movs	r0, r7
 8009320:	f000 f980 	bl	8009624 <_realloc_r>
 8009324:	1e06      	subs	r6, r0, #0
 8009326:	d1e0      	bne.n	80092ea <__ssputs_r+0x76>
 8009328:	0038      	movs	r0, r7
 800932a:	6921      	ldr	r1, [r4, #16]
 800932c:	f7ff fefa 	bl	8009124 <_free_r>
 8009330:	e7c7      	b.n	80092c2 <__ssputs_r+0x4e>
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	fffffb7f 	.word	0xfffffb7f

08009338 <_svfiprintf_r>:
 8009338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800933a:	b0a1      	sub	sp, #132	; 0x84
 800933c:	9003      	str	r0, [sp, #12]
 800933e:	001d      	movs	r5, r3
 8009340:	898b      	ldrh	r3, [r1, #12]
 8009342:	000f      	movs	r7, r1
 8009344:	0016      	movs	r6, r2
 8009346:	061b      	lsls	r3, r3, #24
 8009348:	d511      	bpl.n	800936e <_svfiprintf_r+0x36>
 800934a:	690b      	ldr	r3, [r1, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10e      	bne.n	800936e <_svfiprintf_r+0x36>
 8009350:	2140      	movs	r1, #64	; 0x40
 8009352:	f7ff ff31 	bl	80091b8 <_malloc_r>
 8009356:	6038      	str	r0, [r7, #0]
 8009358:	6138      	str	r0, [r7, #16]
 800935a:	2800      	cmp	r0, #0
 800935c:	d105      	bne.n	800936a <_svfiprintf_r+0x32>
 800935e:	230c      	movs	r3, #12
 8009360:	9a03      	ldr	r2, [sp, #12]
 8009362:	3801      	subs	r0, #1
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	b021      	add	sp, #132	; 0x84
 8009368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	2300      	movs	r3, #0
 8009370:	ac08      	add	r4, sp, #32
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	3320      	adds	r3, #32
 8009376:	7663      	strb	r3, [r4, #25]
 8009378:	3310      	adds	r3, #16
 800937a:	76a3      	strb	r3, [r4, #26]
 800937c:	9507      	str	r5, [sp, #28]
 800937e:	0035      	movs	r5, r6
 8009380:	782b      	ldrb	r3, [r5, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <_svfiprintf_r+0x52>
 8009386:	2b25      	cmp	r3, #37	; 0x25
 8009388:	d147      	bne.n	800941a <_svfiprintf_r+0xe2>
 800938a:	1bab      	subs	r3, r5, r6
 800938c:	9305      	str	r3, [sp, #20]
 800938e:	42b5      	cmp	r5, r6
 8009390:	d00c      	beq.n	80093ac <_svfiprintf_r+0x74>
 8009392:	0032      	movs	r2, r6
 8009394:	0039      	movs	r1, r7
 8009396:	9803      	ldr	r0, [sp, #12]
 8009398:	f7ff ff6c 	bl	8009274 <__ssputs_r>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d100      	bne.n	80093a2 <_svfiprintf_r+0x6a>
 80093a0:	e0ae      	b.n	8009500 <_svfiprintf_r+0x1c8>
 80093a2:	6962      	ldr	r2, [r4, #20]
 80093a4:	9b05      	ldr	r3, [sp, #20]
 80093a6:	4694      	mov	ip, r2
 80093a8:	4463      	add	r3, ip
 80093aa:	6163      	str	r3, [r4, #20]
 80093ac:	782b      	ldrb	r3, [r5, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d100      	bne.n	80093b4 <_svfiprintf_r+0x7c>
 80093b2:	e0a5      	b.n	8009500 <_svfiprintf_r+0x1c8>
 80093b4:	2201      	movs	r2, #1
 80093b6:	2300      	movs	r3, #0
 80093b8:	4252      	negs	r2, r2
 80093ba:	6062      	str	r2, [r4, #4]
 80093bc:	a904      	add	r1, sp, #16
 80093be:	3254      	adds	r2, #84	; 0x54
 80093c0:	1852      	adds	r2, r2, r1
 80093c2:	1c6e      	adds	r6, r5, #1
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	60e3      	str	r3, [r4, #12]
 80093c8:	60a3      	str	r3, [r4, #8]
 80093ca:	7013      	strb	r3, [r2, #0]
 80093cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80093ce:	2205      	movs	r2, #5
 80093d0:	7831      	ldrb	r1, [r6, #0]
 80093d2:	4854      	ldr	r0, [pc, #336]	; (8009524 <_svfiprintf_r+0x1ec>)
 80093d4:	f7ff fae6 	bl	80089a4 <memchr>
 80093d8:	1c75      	adds	r5, r6, #1
 80093da:	2800      	cmp	r0, #0
 80093dc:	d11f      	bne.n	800941e <_svfiprintf_r+0xe6>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	06d3      	lsls	r3, r2, #27
 80093e2:	d504      	bpl.n	80093ee <_svfiprintf_r+0xb6>
 80093e4:	2353      	movs	r3, #83	; 0x53
 80093e6:	a904      	add	r1, sp, #16
 80093e8:	185b      	adds	r3, r3, r1
 80093ea:	2120      	movs	r1, #32
 80093ec:	7019      	strb	r1, [r3, #0]
 80093ee:	0713      	lsls	r3, r2, #28
 80093f0:	d504      	bpl.n	80093fc <_svfiprintf_r+0xc4>
 80093f2:	2353      	movs	r3, #83	; 0x53
 80093f4:	a904      	add	r1, sp, #16
 80093f6:	185b      	adds	r3, r3, r1
 80093f8:	212b      	movs	r1, #43	; 0x2b
 80093fa:	7019      	strb	r1, [r3, #0]
 80093fc:	7833      	ldrb	r3, [r6, #0]
 80093fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009400:	d016      	beq.n	8009430 <_svfiprintf_r+0xf8>
 8009402:	0035      	movs	r5, r6
 8009404:	2100      	movs	r1, #0
 8009406:	200a      	movs	r0, #10
 8009408:	68e3      	ldr	r3, [r4, #12]
 800940a:	782a      	ldrb	r2, [r5, #0]
 800940c:	1c6e      	adds	r6, r5, #1
 800940e:	3a30      	subs	r2, #48	; 0x30
 8009410:	2a09      	cmp	r2, #9
 8009412:	d94e      	bls.n	80094b2 <_svfiprintf_r+0x17a>
 8009414:	2900      	cmp	r1, #0
 8009416:	d111      	bne.n	800943c <_svfiprintf_r+0x104>
 8009418:	e017      	b.n	800944a <_svfiprintf_r+0x112>
 800941a:	3501      	adds	r5, #1
 800941c:	e7b0      	b.n	8009380 <_svfiprintf_r+0x48>
 800941e:	4b41      	ldr	r3, [pc, #260]	; (8009524 <_svfiprintf_r+0x1ec>)
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	1ac0      	subs	r0, r0, r3
 8009424:	2301      	movs	r3, #1
 8009426:	4083      	lsls	r3, r0
 8009428:	4313      	orrs	r3, r2
 800942a:	002e      	movs	r6, r5
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	e7ce      	b.n	80093ce <_svfiprintf_r+0x96>
 8009430:	9b07      	ldr	r3, [sp, #28]
 8009432:	1d19      	adds	r1, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	9107      	str	r1, [sp, #28]
 8009438:	2b00      	cmp	r3, #0
 800943a:	db01      	blt.n	8009440 <_svfiprintf_r+0x108>
 800943c:	930b      	str	r3, [sp, #44]	; 0x2c
 800943e:	e004      	b.n	800944a <_svfiprintf_r+0x112>
 8009440:	425b      	negs	r3, r3
 8009442:	60e3      	str	r3, [r4, #12]
 8009444:	2302      	movs	r3, #2
 8009446:	4313      	orrs	r3, r2
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	782b      	ldrb	r3, [r5, #0]
 800944c:	2b2e      	cmp	r3, #46	; 0x2e
 800944e:	d10a      	bne.n	8009466 <_svfiprintf_r+0x12e>
 8009450:	786b      	ldrb	r3, [r5, #1]
 8009452:	2b2a      	cmp	r3, #42	; 0x2a
 8009454:	d135      	bne.n	80094c2 <_svfiprintf_r+0x18a>
 8009456:	9b07      	ldr	r3, [sp, #28]
 8009458:	3502      	adds	r5, #2
 800945a:	1d1a      	adds	r2, r3, #4
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	9207      	str	r2, [sp, #28]
 8009460:	2b00      	cmp	r3, #0
 8009462:	db2b      	blt.n	80094bc <_svfiprintf_r+0x184>
 8009464:	9309      	str	r3, [sp, #36]	; 0x24
 8009466:	4e30      	ldr	r6, [pc, #192]	; (8009528 <_svfiprintf_r+0x1f0>)
 8009468:	2203      	movs	r2, #3
 800946a:	0030      	movs	r0, r6
 800946c:	7829      	ldrb	r1, [r5, #0]
 800946e:	f7ff fa99 	bl	80089a4 <memchr>
 8009472:	2800      	cmp	r0, #0
 8009474:	d006      	beq.n	8009484 <_svfiprintf_r+0x14c>
 8009476:	2340      	movs	r3, #64	; 0x40
 8009478:	1b80      	subs	r0, r0, r6
 800947a:	4083      	lsls	r3, r0
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	3501      	adds	r5, #1
 8009480:	4313      	orrs	r3, r2
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	7829      	ldrb	r1, [r5, #0]
 8009486:	2206      	movs	r2, #6
 8009488:	4828      	ldr	r0, [pc, #160]	; (800952c <_svfiprintf_r+0x1f4>)
 800948a:	1c6e      	adds	r6, r5, #1
 800948c:	7621      	strb	r1, [r4, #24]
 800948e:	f7ff fa89 	bl	80089a4 <memchr>
 8009492:	2800      	cmp	r0, #0
 8009494:	d03c      	beq.n	8009510 <_svfiprintf_r+0x1d8>
 8009496:	4b26      	ldr	r3, [pc, #152]	; (8009530 <_svfiprintf_r+0x1f8>)
 8009498:	2b00      	cmp	r3, #0
 800949a:	d125      	bne.n	80094e8 <_svfiprintf_r+0x1b0>
 800949c:	2207      	movs	r2, #7
 800949e:	9b07      	ldr	r3, [sp, #28]
 80094a0:	3307      	adds	r3, #7
 80094a2:	4393      	bics	r3, r2
 80094a4:	3308      	adds	r3, #8
 80094a6:	9307      	str	r3, [sp, #28]
 80094a8:	6963      	ldr	r3, [r4, #20]
 80094aa:	9a04      	ldr	r2, [sp, #16]
 80094ac:	189b      	adds	r3, r3, r2
 80094ae:	6163      	str	r3, [r4, #20]
 80094b0:	e765      	b.n	800937e <_svfiprintf_r+0x46>
 80094b2:	4343      	muls	r3, r0
 80094b4:	0035      	movs	r5, r6
 80094b6:	2101      	movs	r1, #1
 80094b8:	189b      	adds	r3, r3, r2
 80094ba:	e7a6      	b.n	800940a <_svfiprintf_r+0xd2>
 80094bc:	2301      	movs	r3, #1
 80094be:	425b      	negs	r3, r3
 80094c0:	e7d0      	b.n	8009464 <_svfiprintf_r+0x12c>
 80094c2:	2300      	movs	r3, #0
 80094c4:	200a      	movs	r0, #10
 80094c6:	001a      	movs	r2, r3
 80094c8:	3501      	adds	r5, #1
 80094ca:	6063      	str	r3, [r4, #4]
 80094cc:	7829      	ldrb	r1, [r5, #0]
 80094ce:	1c6e      	adds	r6, r5, #1
 80094d0:	3930      	subs	r1, #48	; 0x30
 80094d2:	2909      	cmp	r1, #9
 80094d4:	d903      	bls.n	80094de <_svfiprintf_r+0x1a6>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0c5      	beq.n	8009466 <_svfiprintf_r+0x12e>
 80094da:	9209      	str	r2, [sp, #36]	; 0x24
 80094dc:	e7c3      	b.n	8009466 <_svfiprintf_r+0x12e>
 80094de:	4342      	muls	r2, r0
 80094e0:	0035      	movs	r5, r6
 80094e2:	2301      	movs	r3, #1
 80094e4:	1852      	adds	r2, r2, r1
 80094e6:	e7f1      	b.n	80094cc <_svfiprintf_r+0x194>
 80094e8:	ab07      	add	r3, sp, #28
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	003a      	movs	r2, r7
 80094ee:	0021      	movs	r1, r4
 80094f0:	4b10      	ldr	r3, [pc, #64]	; (8009534 <_svfiprintf_r+0x1fc>)
 80094f2:	9803      	ldr	r0, [sp, #12]
 80094f4:	f7fd ffae 	bl	8007454 <_printf_float>
 80094f8:	9004      	str	r0, [sp, #16]
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	3301      	adds	r3, #1
 80094fe:	d1d3      	bne.n	80094a8 <_svfiprintf_r+0x170>
 8009500:	89bb      	ldrh	r3, [r7, #12]
 8009502:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009504:	065b      	lsls	r3, r3, #25
 8009506:	d400      	bmi.n	800950a <_svfiprintf_r+0x1d2>
 8009508:	e72d      	b.n	8009366 <_svfiprintf_r+0x2e>
 800950a:	2001      	movs	r0, #1
 800950c:	4240      	negs	r0, r0
 800950e:	e72a      	b.n	8009366 <_svfiprintf_r+0x2e>
 8009510:	ab07      	add	r3, sp, #28
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	003a      	movs	r2, r7
 8009516:	0021      	movs	r1, r4
 8009518:	4b06      	ldr	r3, [pc, #24]	; (8009534 <_svfiprintf_r+0x1fc>)
 800951a:	9803      	ldr	r0, [sp, #12]
 800951c:	f7fe fa58 	bl	80079d0 <_printf_i>
 8009520:	e7ea      	b.n	80094f8 <_svfiprintf_r+0x1c0>
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	0800a614 	.word	0x0800a614
 8009528:	0800a61a 	.word	0x0800a61a
 800952c:	0800a61e 	.word	0x0800a61e
 8009530:	08007455 	.word	0x08007455
 8009534:	08009275 	.word	0x08009275

08009538 <_sbrk_r>:
 8009538:	2300      	movs	r3, #0
 800953a:	b570      	push	{r4, r5, r6, lr}
 800953c:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_sbrk_r+0x20>)
 800953e:	0004      	movs	r4, r0
 8009540:	0008      	movs	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7fa f9b6 	bl	80038b4 <_sbrk>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d103      	bne.n	8009554 <_sbrk_r+0x1c>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d000      	beq.n	8009554 <_sbrk_r+0x1c>
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	bd70      	pop	{r4, r5, r6, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	2000041c 	.word	0x2000041c

0800955c <__assert_func>:
 800955c:	b530      	push	{r4, r5, lr}
 800955e:	0014      	movs	r4, r2
 8009560:	001a      	movs	r2, r3
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <__assert_func+0x2c>)
 8009564:	0005      	movs	r5, r0
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	b085      	sub	sp, #20
 800956a:	68d8      	ldr	r0, [r3, #12]
 800956c:	4b07      	ldr	r3, [pc, #28]	; (800958c <__assert_func+0x30>)
 800956e:	2c00      	cmp	r4, #0
 8009570:	d101      	bne.n	8009576 <__assert_func+0x1a>
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <__assert_func+0x34>)
 8009574:	001c      	movs	r4, r3
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	9100      	str	r1, [sp, #0]
 800957a:	002b      	movs	r3, r5
 800957c:	4905      	ldr	r1, [pc, #20]	; (8009594 <__assert_func+0x38>)
 800957e:	9402      	str	r4, [sp, #8]
 8009580:	f000 f80a 	bl	8009598 <fiprintf>
 8009584:	f000 fab2 	bl	8009aec <abort>
 8009588:	2000003c 	.word	0x2000003c
 800958c:	0800a625 	.word	0x0800a625
 8009590:	0800a660 	.word	0x0800a660
 8009594:	0800a632 	.word	0x0800a632

08009598 <fiprintf>:
 8009598:	b40e      	push	{r1, r2, r3}
 800959a:	b503      	push	{r0, r1, lr}
 800959c:	0001      	movs	r1, r0
 800959e:	ab03      	add	r3, sp, #12
 80095a0:	4804      	ldr	r0, [pc, #16]	; (80095b4 <fiprintf+0x1c>)
 80095a2:	cb04      	ldmia	r3!, {r2}
 80095a4:	6800      	ldr	r0, [r0, #0]
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	f000 f88a 	bl	80096c0 <_vfiprintf_r>
 80095ac:	b002      	add	sp, #8
 80095ae:	bc08      	pop	{r3}
 80095b0:	b003      	add	sp, #12
 80095b2:	4718      	bx	r3
 80095b4:	2000003c 	.word	0x2000003c

080095b8 <__ascii_mbtowc>:
 80095b8:	b082      	sub	sp, #8
 80095ba:	2900      	cmp	r1, #0
 80095bc:	d100      	bne.n	80095c0 <__ascii_mbtowc+0x8>
 80095be:	a901      	add	r1, sp, #4
 80095c0:	1e10      	subs	r0, r2, #0
 80095c2:	d006      	beq.n	80095d2 <__ascii_mbtowc+0x1a>
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d006      	beq.n	80095d6 <__ascii_mbtowc+0x1e>
 80095c8:	7813      	ldrb	r3, [r2, #0]
 80095ca:	600b      	str	r3, [r1, #0]
 80095cc:	7810      	ldrb	r0, [r2, #0]
 80095ce:	1e43      	subs	r3, r0, #1
 80095d0:	4198      	sbcs	r0, r3
 80095d2:	b002      	add	sp, #8
 80095d4:	4770      	bx	lr
 80095d6:	2002      	movs	r0, #2
 80095d8:	4240      	negs	r0, r0
 80095da:	e7fa      	b.n	80095d2 <__ascii_mbtowc+0x1a>

080095dc <memmove>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	4288      	cmp	r0, r1
 80095e0:	d902      	bls.n	80095e8 <memmove+0xc>
 80095e2:	188b      	adds	r3, r1, r2
 80095e4:	4298      	cmp	r0, r3
 80095e6:	d303      	bcc.n	80095f0 <memmove+0x14>
 80095e8:	2300      	movs	r3, #0
 80095ea:	e007      	b.n	80095fc <memmove+0x20>
 80095ec:	5c8b      	ldrb	r3, [r1, r2]
 80095ee:	5483      	strb	r3, [r0, r2]
 80095f0:	3a01      	subs	r2, #1
 80095f2:	d2fb      	bcs.n	80095ec <memmove+0x10>
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	5ccc      	ldrb	r4, [r1, r3]
 80095f8:	54c4      	strb	r4, [r0, r3]
 80095fa:	3301      	adds	r3, #1
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d1fa      	bne.n	80095f6 <memmove+0x1a>
 8009600:	e7f8      	b.n	80095f4 <memmove+0x18>
	...

08009604 <__malloc_lock>:
 8009604:	b510      	push	{r4, lr}
 8009606:	4802      	ldr	r0, [pc, #8]	; (8009610 <__malloc_lock+0xc>)
 8009608:	f000 fc47 	bl	8009e9a <__retarget_lock_acquire_recursive>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	20000424 	.word	0x20000424

08009614 <__malloc_unlock>:
 8009614:	b510      	push	{r4, lr}
 8009616:	4802      	ldr	r0, [pc, #8]	; (8009620 <__malloc_unlock+0xc>)
 8009618:	f000 fc40 	bl	8009e9c <__retarget_lock_release_recursive>
 800961c:	bd10      	pop	{r4, pc}
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	20000424 	.word	0x20000424

08009624 <_realloc_r>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	0007      	movs	r7, r0
 8009628:	000d      	movs	r5, r1
 800962a:	0016      	movs	r6, r2
 800962c:	2900      	cmp	r1, #0
 800962e:	d105      	bne.n	800963c <_realloc_r+0x18>
 8009630:	0011      	movs	r1, r2
 8009632:	f7ff fdc1 	bl	80091b8 <_malloc_r>
 8009636:	0004      	movs	r4, r0
 8009638:	0020      	movs	r0, r4
 800963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800963c:	2a00      	cmp	r2, #0
 800963e:	d103      	bne.n	8009648 <_realloc_r+0x24>
 8009640:	f7ff fd70 	bl	8009124 <_free_r>
 8009644:	0034      	movs	r4, r6
 8009646:	e7f7      	b.n	8009638 <_realloc_r+0x14>
 8009648:	f000 fc96 	bl	8009f78 <_malloc_usable_size_r>
 800964c:	002c      	movs	r4, r5
 800964e:	42b0      	cmp	r0, r6
 8009650:	d2f2      	bcs.n	8009638 <_realloc_r+0x14>
 8009652:	0031      	movs	r1, r6
 8009654:	0038      	movs	r0, r7
 8009656:	f7ff fdaf 	bl	80091b8 <_malloc_r>
 800965a:	1e04      	subs	r4, r0, #0
 800965c:	d0ec      	beq.n	8009638 <_realloc_r+0x14>
 800965e:	0029      	movs	r1, r5
 8009660:	0032      	movs	r2, r6
 8009662:	f7ff f9aa 	bl	80089ba <memcpy>
 8009666:	0029      	movs	r1, r5
 8009668:	0038      	movs	r0, r7
 800966a:	f7ff fd5b 	bl	8009124 <_free_r>
 800966e:	e7e3      	b.n	8009638 <_realloc_r+0x14>

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	b510      	push	{r4, lr}
 8009674:	3b01      	subs	r3, #1
 8009676:	6093      	str	r3, [r2, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	da04      	bge.n	8009686 <__sfputc_r+0x16>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db07      	blt.n	8009692 <__sfputc_r+0x22>
 8009682:	290a      	cmp	r1, #10
 8009684:	d005      	beq.n	8009692 <__sfputc_r+0x22>
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	1c58      	adds	r0, r3, #1
 800968a:	6010      	str	r0, [r2, #0]
 800968c:	7019      	strb	r1, [r3, #0]
 800968e:	0008      	movs	r0, r1
 8009690:	bd10      	pop	{r4, pc}
 8009692:	f000 f94f 	bl	8009934 <__swbuf_r>
 8009696:	0001      	movs	r1, r0
 8009698:	e7f9      	b.n	800968e <__sfputc_r+0x1e>

0800969a <__sfputs_r>:
 800969a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969c:	0006      	movs	r6, r0
 800969e:	000f      	movs	r7, r1
 80096a0:	0014      	movs	r4, r2
 80096a2:	18d5      	adds	r5, r2, r3
 80096a4:	42ac      	cmp	r4, r5
 80096a6:	d101      	bne.n	80096ac <__sfputs_r+0x12>
 80096a8:	2000      	movs	r0, #0
 80096aa:	e007      	b.n	80096bc <__sfputs_r+0x22>
 80096ac:	7821      	ldrb	r1, [r4, #0]
 80096ae:	003a      	movs	r2, r7
 80096b0:	0030      	movs	r0, r6
 80096b2:	f7ff ffdd 	bl	8009670 <__sfputc_r>
 80096b6:	3401      	adds	r4, #1
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d1f3      	bne.n	80096a4 <__sfputs_r+0xa>
 80096bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c0 <_vfiprintf_r>:
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c2:	b0a1      	sub	sp, #132	; 0x84
 80096c4:	0006      	movs	r6, r0
 80096c6:	000c      	movs	r4, r1
 80096c8:	001f      	movs	r7, r3
 80096ca:	9203      	str	r2, [sp, #12]
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d004      	beq.n	80096da <_vfiprintf_r+0x1a>
 80096d0:	6983      	ldr	r3, [r0, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <_vfiprintf_r+0x1a>
 80096d6:	f000 fb3f 	bl	8009d58 <__sinit>
 80096da:	4b8e      	ldr	r3, [pc, #568]	; (8009914 <_vfiprintf_r+0x254>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	d11c      	bne.n	800971a <_vfiprintf_r+0x5a>
 80096e0:	6874      	ldr	r4, [r6, #4]
 80096e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e4:	07db      	lsls	r3, r3, #31
 80096e6:	d405      	bmi.n	80096f4 <_vfiprintf_r+0x34>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	059b      	lsls	r3, r3, #22
 80096ec:	d402      	bmi.n	80096f4 <_vfiprintf_r+0x34>
 80096ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f0:	f000 fbd3 	bl	8009e9a <__retarget_lock_acquire_recursive>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	071b      	lsls	r3, r3, #28
 80096f8:	d502      	bpl.n	8009700 <_vfiprintf_r+0x40>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11d      	bne.n	800973c <_vfiprintf_r+0x7c>
 8009700:	0021      	movs	r1, r4
 8009702:	0030      	movs	r0, r6
 8009704:	f000 f97a 	bl	80099fc <__swsetup_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	d017      	beq.n	800973c <_vfiprintf_r+0x7c>
 800970c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800970e:	07db      	lsls	r3, r3, #31
 8009710:	d50d      	bpl.n	800972e <_vfiprintf_r+0x6e>
 8009712:	2001      	movs	r0, #1
 8009714:	4240      	negs	r0, r0
 8009716:	b021      	add	sp, #132	; 0x84
 8009718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971a:	4b7f      	ldr	r3, [pc, #508]	; (8009918 <_vfiprintf_r+0x258>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d101      	bne.n	8009724 <_vfiprintf_r+0x64>
 8009720:	68b4      	ldr	r4, [r6, #8]
 8009722:	e7de      	b.n	80096e2 <_vfiprintf_r+0x22>
 8009724:	4b7d      	ldr	r3, [pc, #500]	; (800991c <_vfiprintf_r+0x25c>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d1db      	bne.n	80096e2 <_vfiprintf_r+0x22>
 800972a:	68f4      	ldr	r4, [r6, #12]
 800972c:	e7d9      	b.n	80096e2 <_vfiprintf_r+0x22>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	d4ee      	bmi.n	8009712 <_vfiprintf_r+0x52>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f000 fbb1 	bl	8009e9c <__retarget_lock_release_recursive>
 800973a:	e7ea      	b.n	8009712 <_vfiprintf_r+0x52>
 800973c:	2300      	movs	r3, #0
 800973e:	ad08      	add	r5, sp, #32
 8009740:	616b      	str	r3, [r5, #20]
 8009742:	3320      	adds	r3, #32
 8009744:	766b      	strb	r3, [r5, #25]
 8009746:	3310      	adds	r3, #16
 8009748:	76ab      	strb	r3, [r5, #26]
 800974a:	9707      	str	r7, [sp, #28]
 800974c:	9f03      	ldr	r7, [sp, #12]
 800974e:	783b      	ldrb	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <_vfiprintf_r+0x98>
 8009754:	2b25      	cmp	r3, #37	; 0x25
 8009756:	d14e      	bne.n	80097f6 <_vfiprintf_r+0x136>
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	1afb      	subs	r3, r7, r3
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	429f      	cmp	r7, r3
 8009762:	d00d      	beq.n	8009780 <_vfiprintf_r+0xc0>
 8009764:	9b05      	ldr	r3, [sp, #20]
 8009766:	0021      	movs	r1, r4
 8009768:	0030      	movs	r0, r6
 800976a:	9a03      	ldr	r2, [sp, #12]
 800976c:	f7ff ff95 	bl	800969a <__sfputs_r>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d100      	bne.n	8009776 <_vfiprintf_r+0xb6>
 8009774:	e0b5      	b.n	80098e2 <_vfiprintf_r+0x222>
 8009776:	696a      	ldr	r2, [r5, #20]
 8009778:	9b05      	ldr	r3, [sp, #20]
 800977a:	4694      	mov	ip, r2
 800977c:	4463      	add	r3, ip
 800977e:	616b      	str	r3, [r5, #20]
 8009780:	783b      	ldrb	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d100      	bne.n	8009788 <_vfiprintf_r+0xc8>
 8009786:	e0ac      	b.n	80098e2 <_vfiprintf_r+0x222>
 8009788:	2201      	movs	r2, #1
 800978a:	1c7b      	adds	r3, r7, #1
 800978c:	9303      	str	r3, [sp, #12]
 800978e:	2300      	movs	r3, #0
 8009790:	4252      	negs	r2, r2
 8009792:	606a      	str	r2, [r5, #4]
 8009794:	a904      	add	r1, sp, #16
 8009796:	3254      	adds	r2, #84	; 0x54
 8009798:	1852      	adds	r2, r2, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	60eb      	str	r3, [r5, #12]
 800979e:	60ab      	str	r3, [r5, #8]
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	2205      	movs	r2, #5
 80097a8:	7819      	ldrb	r1, [r3, #0]
 80097aa:	485d      	ldr	r0, [pc, #372]	; (8009920 <_vfiprintf_r+0x260>)
 80097ac:	f7ff f8fa 	bl	80089a4 <memchr>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	1c5f      	adds	r7, r3, #1
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d120      	bne.n	80097fa <_vfiprintf_r+0x13a>
 80097b8:	682a      	ldr	r2, [r5, #0]
 80097ba:	06d3      	lsls	r3, r2, #27
 80097bc:	d504      	bpl.n	80097c8 <_vfiprintf_r+0x108>
 80097be:	2353      	movs	r3, #83	; 0x53
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	185b      	adds	r3, r3, r1
 80097c4:	2120      	movs	r1, #32
 80097c6:	7019      	strb	r1, [r3, #0]
 80097c8:	0713      	lsls	r3, r2, #28
 80097ca:	d504      	bpl.n	80097d6 <_vfiprintf_r+0x116>
 80097cc:	2353      	movs	r3, #83	; 0x53
 80097ce:	a904      	add	r1, sp, #16
 80097d0:	185b      	adds	r3, r3, r1
 80097d2:	212b      	movs	r1, #43	; 0x2b
 80097d4:	7019      	strb	r1, [r3, #0]
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b2a      	cmp	r3, #42	; 0x2a
 80097dc:	d016      	beq.n	800980c <_vfiprintf_r+0x14c>
 80097de:	2100      	movs	r1, #0
 80097e0:	68eb      	ldr	r3, [r5, #12]
 80097e2:	9f03      	ldr	r7, [sp, #12]
 80097e4:	783a      	ldrb	r2, [r7, #0]
 80097e6:	1c78      	adds	r0, r7, #1
 80097e8:	3a30      	subs	r2, #48	; 0x30
 80097ea:	4684      	mov	ip, r0
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d94f      	bls.n	8009890 <_vfiprintf_r+0x1d0>
 80097f0:	2900      	cmp	r1, #0
 80097f2:	d111      	bne.n	8009818 <_vfiprintf_r+0x158>
 80097f4:	e017      	b.n	8009826 <_vfiprintf_r+0x166>
 80097f6:	3701      	adds	r7, #1
 80097f8:	e7a9      	b.n	800974e <_vfiprintf_r+0x8e>
 80097fa:	4b49      	ldr	r3, [pc, #292]	; (8009920 <_vfiprintf_r+0x260>)
 80097fc:	682a      	ldr	r2, [r5, #0]
 80097fe:	1ac0      	subs	r0, r0, r3
 8009800:	2301      	movs	r3, #1
 8009802:	4083      	lsls	r3, r0
 8009804:	4313      	orrs	r3, r2
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	9703      	str	r7, [sp, #12]
 800980a:	e7cb      	b.n	80097a4 <_vfiprintf_r+0xe4>
 800980c:	9b07      	ldr	r3, [sp, #28]
 800980e:	1d19      	adds	r1, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9107      	str	r1, [sp, #28]
 8009814:	2b00      	cmp	r3, #0
 8009816:	db01      	blt.n	800981c <_vfiprintf_r+0x15c>
 8009818:	930b      	str	r3, [sp, #44]	; 0x2c
 800981a:	e004      	b.n	8009826 <_vfiprintf_r+0x166>
 800981c:	425b      	negs	r3, r3
 800981e:	60eb      	str	r3, [r5, #12]
 8009820:	2302      	movs	r3, #2
 8009822:	4313      	orrs	r3, r2
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	783b      	ldrb	r3, [r7, #0]
 8009828:	2b2e      	cmp	r3, #46	; 0x2e
 800982a:	d10a      	bne.n	8009842 <_vfiprintf_r+0x182>
 800982c:	787b      	ldrb	r3, [r7, #1]
 800982e:	2b2a      	cmp	r3, #42	; 0x2a
 8009830:	d137      	bne.n	80098a2 <_vfiprintf_r+0x1e2>
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	3702      	adds	r7, #2
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	9207      	str	r2, [sp, #28]
 800983c:	2b00      	cmp	r3, #0
 800983e:	db2d      	blt.n	800989c <_vfiprintf_r+0x1dc>
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
 8009842:	2203      	movs	r2, #3
 8009844:	7839      	ldrb	r1, [r7, #0]
 8009846:	4837      	ldr	r0, [pc, #220]	; (8009924 <_vfiprintf_r+0x264>)
 8009848:	f7ff f8ac 	bl	80089a4 <memchr>
 800984c:	2800      	cmp	r0, #0
 800984e:	d007      	beq.n	8009860 <_vfiprintf_r+0x1a0>
 8009850:	4b34      	ldr	r3, [pc, #208]	; (8009924 <_vfiprintf_r+0x264>)
 8009852:	682a      	ldr	r2, [r5, #0]
 8009854:	1ac0      	subs	r0, r0, r3
 8009856:	2340      	movs	r3, #64	; 0x40
 8009858:	4083      	lsls	r3, r0
 800985a:	4313      	orrs	r3, r2
 800985c:	3701      	adds	r7, #1
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	7839      	ldrb	r1, [r7, #0]
 8009862:	1c7b      	adds	r3, r7, #1
 8009864:	2206      	movs	r2, #6
 8009866:	4830      	ldr	r0, [pc, #192]	; (8009928 <_vfiprintf_r+0x268>)
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	7629      	strb	r1, [r5, #24]
 800986c:	f7ff f89a 	bl	80089a4 <memchr>
 8009870:	2800      	cmp	r0, #0
 8009872:	d045      	beq.n	8009900 <_vfiprintf_r+0x240>
 8009874:	4b2d      	ldr	r3, [pc, #180]	; (800992c <_vfiprintf_r+0x26c>)
 8009876:	2b00      	cmp	r3, #0
 8009878:	d127      	bne.n	80098ca <_vfiprintf_r+0x20a>
 800987a:	2207      	movs	r2, #7
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	3307      	adds	r3, #7
 8009880:	4393      	bics	r3, r2
 8009882:	3308      	adds	r3, #8
 8009884:	9307      	str	r3, [sp, #28]
 8009886:	696b      	ldr	r3, [r5, #20]
 8009888:	9a04      	ldr	r2, [sp, #16]
 800988a:	189b      	adds	r3, r3, r2
 800988c:	616b      	str	r3, [r5, #20]
 800988e:	e75d      	b.n	800974c <_vfiprintf_r+0x8c>
 8009890:	210a      	movs	r1, #10
 8009892:	434b      	muls	r3, r1
 8009894:	4667      	mov	r7, ip
 8009896:	189b      	adds	r3, r3, r2
 8009898:	3909      	subs	r1, #9
 800989a:	e7a3      	b.n	80097e4 <_vfiprintf_r+0x124>
 800989c:	2301      	movs	r3, #1
 800989e:	425b      	negs	r3, r3
 80098a0:	e7ce      	b.n	8009840 <_vfiprintf_r+0x180>
 80098a2:	2300      	movs	r3, #0
 80098a4:	001a      	movs	r2, r3
 80098a6:	3701      	adds	r7, #1
 80098a8:	606b      	str	r3, [r5, #4]
 80098aa:	7839      	ldrb	r1, [r7, #0]
 80098ac:	1c78      	adds	r0, r7, #1
 80098ae:	3930      	subs	r1, #48	; 0x30
 80098b0:	4684      	mov	ip, r0
 80098b2:	2909      	cmp	r1, #9
 80098b4:	d903      	bls.n	80098be <_vfiprintf_r+0x1fe>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0c3      	beq.n	8009842 <_vfiprintf_r+0x182>
 80098ba:	9209      	str	r2, [sp, #36]	; 0x24
 80098bc:	e7c1      	b.n	8009842 <_vfiprintf_r+0x182>
 80098be:	230a      	movs	r3, #10
 80098c0:	435a      	muls	r2, r3
 80098c2:	4667      	mov	r7, ip
 80098c4:	1852      	adds	r2, r2, r1
 80098c6:	3b09      	subs	r3, #9
 80098c8:	e7ef      	b.n	80098aa <_vfiprintf_r+0x1ea>
 80098ca:	ab07      	add	r3, sp, #28
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	0022      	movs	r2, r4
 80098d0:	0029      	movs	r1, r5
 80098d2:	0030      	movs	r0, r6
 80098d4:	4b16      	ldr	r3, [pc, #88]	; (8009930 <_vfiprintf_r+0x270>)
 80098d6:	f7fd fdbd 	bl	8007454 <_printf_float>
 80098da:	9004      	str	r0, [sp, #16]
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	3301      	adds	r3, #1
 80098e0:	d1d1      	bne.n	8009886 <_vfiprintf_r+0x1c6>
 80098e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e4:	07db      	lsls	r3, r3, #31
 80098e6:	d405      	bmi.n	80098f4 <_vfiprintf_r+0x234>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	059b      	lsls	r3, r3, #22
 80098ec:	d402      	bmi.n	80098f4 <_vfiprintf_r+0x234>
 80098ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f0:	f000 fad4 	bl	8009e9c <__retarget_lock_release_recursive>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	065b      	lsls	r3, r3, #25
 80098f8:	d500      	bpl.n	80098fc <_vfiprintf_r+0x23c>
 80098fa:	e70a      	b.n	8009712 <_vfiprintf_r+0x52>
 80098fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098fe:	e70a      	b.n	8009716 <_vfiprintf_r+0x56>
 8009900:	ab07      	add	r3, sp, #28
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	0022      	movs	r2, r4
 8009906:	0029      	movs	r1, r5
 8009908:	0030      	movs	r0, r6
 800990a:	4b09      	ldr	r3, [pc, #36]	; (8009930 <_vfiprintf_r+0x270>)
 800990c:	f7fe f860 	bl	80079d0 <_printf_i>
 8009910:	e7e3      	b.n	80098da <_vfiprintf_r+0x21a>
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	0800a78c 	.word	0x0800a78c
 8009918:	0800a7ac 	.word	0x0800a7ac
 800991c:	0800a76c 	.word	0x0800a76c
 8009920:	0800a614 	.word	0x0800a614
 8009924:	0800a61a 	.word	0x0800a61a
 8009928:	0800a61e 	.word	0x0800a61e
 800992c:	08007455 	.word	0x08007455
 8009930:	0800969b 	.word	0x0800969b

08009934 <__swbuf_r>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	0005      	movs	r5, r0
 8009938:	000e      	movs	r6, r1
 800993a:	0014      	movs	r4, r2
 800993c:	2800      	cmp	r0, #0
 800993e:	d004      	beq.n	800994a <__swbuf_r+0x16>
 8009940:	6983      	ldr	r3, [r0, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <__swbuf_r+0x16>
 8009946:	f000 fa07 	bl	8009d58 <__sinit>
 800994a:	4b22      	ldr	r3, [pc, #136]	; (80099d4 <__swbuf_r+0xa0>)
 800994c:	429c      	cmp	r4, r3
 800994e:	d12e      	bne.n	80099ae <__swbuf_r+0x7a>
 8009950:	686c      	ldr	r4, [r5, #4]
 8009952:	69a3      	ldr	r3, [r4, #24]
 8009954:	60a3      	str	r3, [r4, #8]
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	071b      	lsls	r3, r3, #28
 800995a:	d532      	bpl.n	80099c2 <__swbuf_r+0x8e>
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d02f      	beq.n	80099c2 <__swbuf_r+0x8e>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	b2f7      	uxtb	r7, r6
 8009968:	1a98      	subs	r0, r3, r2
 800996a:	6963      	ldr	r3, [r4, #20]
 800996c:	b2f6      	uxtb	r6, r6
 800996e:	4283      	cmp	r3, r0
 8009970:	dc05      	bgt.n	800997e <__swbuf_r+0x4a>
 8009972:	0021      	movs	r1, r4
 8009974:	0028      	movs	r0, r5
 8009976:	f000 f94d 	bl	8009c14 <_fflush_r>
 800997a:	2800      	cmp	r0, #0
 800997c:	d127      	bne.n	80099ce <__swbuf_r+0x9a>
 800997e:	68a3      	ldr	r3, [r4, #8]
 8009980:	3001      	adds	r0, #1
 8009982:	3b01      	subs	r3, #1
 8009984:	60a3      	str	r3, [r4, #8]
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	6022      	str	r2, [r4, #0]
 800998c:	701f      	strb	r7, [r3, #0]
 800998e:	6963      	ldr	r3, [r4, #20]
 8009990:	4283      	cmp	r3, r0
 8009992:	d004      	beq.n	800999e <__swbuf_r+0x6a>
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	07db      	lsls	r3, r3, #31
 8009998:	d507      	bpl.n	80099aa <__swbuf_r+0x76>
 800999a:	2e0a      	cmp	r6, #10
 800999c:	d105      	bne.n	80099aa <__swbuf_r+0x76>
 800999e:	0021      	movs	r1, r4
 80099a0:	0028      	movs	r0, r5
 80099a2:	f000 f937 	bl	8009c14 <_fflush_r>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d111      	bne.n	80099ce <__swbuf_r+0x9a>
 80099aa:	0030      	movs	r0, r6
 80099ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ae:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <__swbuf_r+0xa4>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d101      	bne.n	80099b8 <__swbuf_r+0x84>
 80099b4:	68ac      	ldr	r4, [r5, #8]
 80099b6:	e7cc      	b.n	8009952 <__swbuf_r+0x1e>
 80099b8:	4b08      	ldr	r3, [pc, #32]	; (80099dc <__swbuf_r+0xa8>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d1c9      	bne.n	8009952 <__swbuf_r+0x1e>
 80099be:	68ec      	ldr	r4, [r5, #12]
 80099c0:	e7c7      	b.n	8009952 <__swbuf_r+0x1e>
 80099c2:	0021      	movs	r1, r4
 80099c4:	0028      	movs	r0, r5
 80099c6:	f000 f819 	bl	80099fc <__swsetup_r>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d0c9      	beq.n	8009962 <__swbuf_r+0x2e>
 80099ce:	2601      	movs	r6, #1
 80099d0:	4276      	negs	r6, r6
 80099d2:	e7ea      	b.n	80099aa <__swbuf_r+0x76>
 80099d4:	0800a78c 	.word	0x0800a78c
 80099d8:	0800a7ac 	.word	0x0800a7ac
 80099dc:	0800a76c 	.word	0x0800a76c

080099e0 <__ascii_wctomb>:
 80099e0:	0003      	movs	r3, r0
 80099e2:	1e08      	subs	r0, r1, #0
 80099e4:	d005      	beq.n	80099f2 <__ascii_wctomb+0x12>
 80099e6:	2aff      	cmp	r2, #255	; 0xff
 80099e8:	d904      	bls.n	80099f4 <__ascii_wctomb+0x14>
 80099ea:	228a      	movs	r2, #138	; 0x8a
 80099ec:	2001      	movs	r0, #1
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	4240      	negs	r0, r0
 80099f2:	4770      	bx	lr
 80099f4:	2001      	movs	r0, #1
 80099f6:	700a      	strb	r2, [r1, #0]
 80099f8:	e7fb      	b.n	80099f2 <__ascii_wctomb+0x12>
	...

080099fc <__swsetup_r>:
 80099fc:	4b37      	ldr	r3, [pc, #220]	; (8009adc <__swsetup_r+0xe0>)
 80099fe:	b570      	push	{r4, r5, r6, lr}
 8009a00:	681d      	ldr	r5, [r3, #0]
 8009a02:	0006      	movs	r6, r0
 8009a04:	000c      	movs	r4, r1
 8009a06:	2d00      	cmp	r5, #0
 8009a08:	d005      	beq.n	8009a16 <__swsetup_r+0x1a>
 8009a0a:	69ab      	ldr	r3, [r5, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <__swsetup_r+0x1a>
 8009a10:	0028      	movs	r0, r5
 8009a12:	f000 f9a1 	bl	8009d58 <__sinit>
 8009a16:	4b32      	ldr	r3, [pc, #200]	; (8009ae0 <__swsetup_r+0xe4>)
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d10f      	bne.n	8009a3c <__swsetup_r+0x40>
 8009a1c:	686c      	ldr	r4, [r5, #4]
 8009a1e:	230c      	movs	r3, #12
 8009a20:	5ee2      	ldrsh	r2, [r4, r3]
 8009a22:	b293      	uxth	r3, r2
 8009a24:	0711      	lsls	r1, r2, #28
 8009a26:	d42d      	bmi.n	8009a84 <__swsetup_r+0x88>
 8009a28:	06d9      	lsls	r1, r3, #27
 8009a2a:	d411      	bmi.n	8009a50 <__swsetup_r+0x54>
 8009a2c:	2309      	movs	r3, #9
 8009a2e:	2001      	movs	r0, #1
 8009a30:	6033      	str	r3, [r6, #0]
 8009a32:	3337      	adds	r3, #55	; 0x37
 8009a34:	4313      	orrs	r3, r2
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	4240      	negs	r0, r0
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <__swsetup_r+0xe8>)
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	d101      	bne.n	8009a46 <__swsetup_r+0x4a>
 8009a42:	68ac      	ldr	r4, [r5, #8]
 8009a44:	e7eb      	b.n	8009a1e <__swsetup_r+0x22>
 8009a46:	4b28      	ldr	r3, [pc, #160]	; (8009ae8 <__swsetup_r+0xec>)
 8009a48:	429c      	cmp	r4, r3
 8009a4a:	d1e8      	bne.n	8009a1e <__swsetup_r+0x22>
 8009a4c:	68ec      	ldr	r4, [r5, #12]
 8009a4e:	e7e6      	b.n	8009a1e <__swsetup_r+0x22>
 8009a50:	075b      	lsls	r3, r3, #29
 8009a52:	d513      	bpl.n	8009a7c <__swsetup_r+0x80>
 8009a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d008      	beq.n	8009a6c <__swsetup_r+0x70>
 8009a5a:	0023      	movs	r3, r4
 8009a5c:	3344      	adds	r3, #68	; 0x44
 8009a5e:	4299      	cmp	r1, r3
 8009a60:	d002      	beq.n	8009a68 <__swsetup_r+0x6c>
 8009a62:	0030      	movs	r0, r6
 8009a64:	f7ff fb5e 	bl	8009124 <_free_r>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6363      	str	r3, [r4, #52]	; 0x34
 8009a6c:	2224      	movs	r2, #36	; 0x24
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	4393      	bics	r3, r2
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	2300      	movs	r3, #0
 8009a76:	6063      	str	r3, [r4, #4]
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	89a2      	ldrh	r2, [r4, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10b      	bne.n	8009aa2 <__swsetup_r+0xa6>
 8009a8a:	21a0      	movs	r1, #160	; 0xa0
 8009a8c:	2280      	movs	r2, #128	; 0x80
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	0089      	lsls	r1, r1, #2
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	400b      	ands	r3, r1
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d003      	beq.n	8009aa2 <__swsetup_r+0xa6>
 8009a9a:	0021      	movs	r1, r4
 8009a9c:	0030      	movs	r0, r6
 8009a9e:	f000 fa27 	bl	8009ef0 <__smakebuf_r>
 8009aa2:	220c      	movs	r2, #12
 8009aa4:	5ea3      	ldrsh	r3, [r4, r2]
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	001a      	movs	r2, r3
 8009aaa:	b299      	uxth	r1, r3
 8009aac:	4002      	ands	r2, r0
 8009aae:	4203      	tst	r3, r0
 8009ab0:	d00f      	beq.n	8009ad2 <__swsetup_r+0xd6>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	60a2      	str	r2, [r4, #8]
 8009ab6:	6962      	ldr	r2, [r4, #20]
 8009ab8:	4252      	negs	r2, r2
 8009aba:	61a2      	str	r2, [r4, #24]
 8009abc:	2000      	movs	r0, #0
 8009abe:	6922      	ldr	r2, [r4, #16]
 8009ac0:	4282      	cmp	r2, r0
 8009ac2:	d1ba      	bne.n	8009a3a <__swsetup_r+0x3e>
 8009ac4:	060a      	lsls	r2, r1, #24
 8009ac6:	d5b8      	bpl.n	8009a3a <__swsetup_r+0x3e>
 8009ac8:	2240      	movs	r2, #64	; 0x40
 8009aca:	4313      	orrs	r3, r2
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	3801      	subs	r0, #1
 8009ad0:	e7b3      	b.n	8009a3a <__swsetup_r+0x3e>
 8009ad2:	0788      	lsls	r0, r1, #30
 8009ad4:	d400      	bmi.n	8009ad8 <__swsetup_r+0xdc>
 8009ad6:	6962      	ldr	r2, [r4, #20]
 8009ad8:	60a2      	str	r2, [r4, #8]
 8009ada:	e7ef      	b.n	8009abc <__swsetup_r+0xc0>
 8009adc:	2000003c 	.word	0x2000003c
 8009ae0:	0800a78c 	.word	0x0800a78c
 8009ae4:	0800a7ac 	.word	0x0800a7ac
 8009ae8:	0800a76c 	.word	0x0800a76c

08009aec <abort>:
 8009aec:	2006      	movs	r0, #6
 8009aee:	b510      	push	{r4, lr}
 8009af0:	f000 fa74 	bl	8009fdc <raise>
 8009af4:	2001      	movs	r0, #1
 8009af6:	f7f9 fe6b 	bl	80037d0 <_exit>
	...

08009afc <__sflush_r>:
 8009afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009afe:	898b      	ldrh	r3, [r1, #12]
 8009b00:	0005      	movs	r5, r0
 8009b02:	000c      	movs	r4, r1
 8009b04:	071a      	lsls	r2, r3, #28
 8009b06:	d45f      	bmi.n	8009bc8 <__sflush_r+0xcc>
 8009b08:	684a      	ldr	r2, [r1, #4]
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	dc04      	bgt.n	8009b18 <__sflush_r+0x1c>
 8009b0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	dc01      	bgt.n	8009b18 <__sflush_r+0x1c>
 8009b14:	2000      	movs	r0, #0
 8009b16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009b1a:	2f00      	cmp	r7, #0
 8009b1c:	d0fa      	beq.n	8009b14 <__sflush_r+0x18>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2180      	movs	r1, #128	; 0x80
 8009b22:	682e      	ldr	r6, [r5, #0]
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	001a      	movs	r2, r3
 8009b28:	0149      	lsls	r1, r1, #5
 8009b2a:	400a      	ands	r2, r1
 8009b2c:	420b      	tst	r3, r1
 8009b2e:	d034      	beq.n	8009b9a <__sflush_r+0x9e>
 8009b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	075b      	lsls	r3, r3, #29
 8009b36:	d506      	bpl.n	8009b46 <__sflush_r+0x4a>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	1ac0      	subs	r0, r0, r3
 8009b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <__sflush_r+0x4a>
 8009b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b44:	1ac0      	subs	r0, r0, r3
 8009b46:	0002      	movs	r2, r0
 8009b48:	6a21      	ldr	r1, [r4, #32]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	0028      	movs	r0, r5
 8009b4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009b50:	47b8      	blx	r7
 8009b52:	89a1      	ldrh	r1, [r4, #12]
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d106      	bne.n	8009b66 <__sflush_r+0x6a>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	2b1d      	cmp	r3, #29
 8009b5c:	d831      	bhi.n	8009bc2 <__sflush_r+0xc6>
 8009b5e:	4a2c      	ldr	r2, [pc, #176]	; (8009c10 <__sflush_r+0x114>)
 8009b60:	40da      	lsrs	r2, r3
 8009b62:	07d3      	lsls	r3, r2, #31
 8009b64:	d52d      	bpl.n	8009bc2 <__sflush_r+0xc6>
 8009b66:	2300      	movs	r3, #0
 8009b68:	6063      	str	r3, [r4, #4]
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	04cb      	lsls	r3, r1, #19
 8009b70:	d505      	bpl.n	8009b7e <__sflush_r+0x82>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d102      	bne.n	8009b7c <__sflush_r+0x80>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d100      	bne.n	8009b7e <__sflush_r+0x82>
 8009b7c:	6560      	str	r0, [r4, #84]	; 0x54
 8009b7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b80:	602e      	str	r6, [r5, #0]
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d0c6      	beq.n	8009b14 <__sflush_r+0x18>
 8009b86:	0023      	movs	r3, r4
 8009b88:	3344      	adds	r3, #68	; 0x44
 8009b8a:	4299      	cmp	r1, r3
 8009b8c:	d002      	beq.n	8009b94 <__sflush_r+0x98>
 8009b8e:	0028      	movs	r0, r5
 8009b90:	f7ff fac8 	bl	8009124 <_free_r>
 8009b94:	2000      	movs	r0, #0
 8009b96:	6360      	str	r0, [r4, #52]	; 0x34
 8009b98:	e7bd      	b.n	8009b16 <__sflush_r+0x1a>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	0028      	movs	r0, r5
 8009b9e:	6a21      	ldr	r1, [r4, #32]
 8009ba0:	47b8      	blx	r7
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	d1c5      	bne.n	8009b32 <__sflush_r+0x36>
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d0c2      	beq.n	8009b32 <__sflush_r+0x36>
 8009bac:	2b1d      	cmp	r3, #29
 8009bae:	d001      	beq.n	8009bb4 <__sflush_r+0xb8>
 8009bb0:	2b16      	cmp	r3, #22
 8009bb2:	d101      	bne.n	8009bb8 <__sflush_r+0xbc>
 8009bb4:	602e      	str	r6, [r5, #0]
 8009bb6:	e7ad      	b.n	8009b14 <__sflush_r+0x18>
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	89a2      	ldrh	r2, [r4, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	e7a9      	b.n	8009b16 <__sflush_r+0x1a>
 8009bc2:	2340      	movs	r3, #64	; 0x40
 8009bc4:	430b      	orrs	r3, r1
 8009bc6:	e7fa      	b.n	8009bbe <__sflush_r+0xc2>
 8009bc8:	690f      	ldr	r7, [r1, #16]
 8009bca:	2f00      	cmp	r7, #0
 8009bcc:	d0a2      	beq.n	8009b14 <__sflush_r+0x18>
 8009bce:	680a      	ldr	r2, [r1, #0]
 8009bd0:	600f      	str	r7, [r1, #0]
 8009bd2:	1bd2      	subs	r2, r2, r7
 8009bd4:	9201      	str	r2, [sp, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	079b      	lsls	r3, r3, #30
 8009bda:	d100      	bne.n	8009bde <__sflush_r+0xe2>
 8009bdc:	694a      	ldr	r2, [r1, #20]
 8009bde:	60a2      	str	r2, [r4, #8]
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dc00      	bgt.n	8009be8 <__sflush_r+0xec>
 8009be6:	e795      	b.n	8009b14 <__sflush_r+0x18>
 8009be8:	003a      	movs	r2, r7
 8009bea:	0028      	movs	r0, r5
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	6a21      	ldr	r1, [r4, #32]
 8009bf0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bf2:	47b0      	blx	r6
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	dc06      	bgt.n	8009c06 <__sflush_r+0x10a>
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	89a2      	ldrh	r2, [r4, #12]
 8009bfe:	4240      	negs	r0, r0
 8009c00:	4313      	orrs	r3, r2
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	e787      	b.n	8009b16 <__sflush_r+0x1a>
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	183f      	adds	r7, r7, r0
 8009c0a:	1a1b      	subs	r3, r3, r0
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	e7e7      	b.n	8009be0 <__sflush_r+0xe4>
 8009c10:	20400001 	.word	0x20400001

08009c14 <_fflush_r>:
 8009c14:	690b      	ldr	r3, [r1, #16]
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	0005      	movs	r5, r0
 8009c1a:	000c      	movs	r4, r1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <_fflush_r+0x12>
 8009c20:	2500      	movs	r5, #0
 8009c22:	0028      	movs	r0, r5
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d004      	beq.n	8009c34 <_fflush_r+0x20>
 8009c2a:	6983      	ldr	r3, [r0, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <_fflush_r+0x20>
 8009c30:	f000 f892 	bl	8009d58 <__sinit>
 8009c34:	4b14      	ldr	r3, [pc, #80]	; (8009c88 <_fflush_r+0x74>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d11b      	bne.n	8009c72 <_fflush_r+0x5e>
 8009c3a:	686c      	ldr	r4, [r5, #4]
 8009c3c:	220c      	movs	r2, #12
 8009c3e:	5ea3      	ldrsh	r3, [r4, r2]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0ed      	beq.n	8009c20 <_fflush_r+0xc>
 8009c44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c46:	07d2      	lsls	r2, r2, #31
 8009c48:	d404      	bmi.n	8009c54 <_fflush_r+0x40>
 8009c4a:	059b      	lsls	r3, r3, #22
 8009c4c:	d402      	bmi.n	8009c54 <_fflush_r+0x40>
 8009c4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c50:	f000 f923 	bl	8009e9a <__retarget_lock_acquire_recursive>
 8009c54:	0028      	movs	r0, r5
 8009c56:	0021      	movs	r1, r4
 8009c58:	f7ff ff50 	bl	8009afc <__sflush_r>
 8009c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c5e:	0005      	movs	r5, r0
 8009c60:	07db      	lsls	r3, r3, #31
 8009c62:	d4de      	bmi.n	8009c22 <_fflush_r+0xe>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	059b      	lsls	r3, r3, #22
 8009c68:	d4db      	bmi.n	8009c22 <_fflush_r+0xe>
 8009c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6c:	f000 f916 	bl	8009e9c <__retarget_lock_release_recursive>
 8009c70:	e7d7      	b.n	8009c22 <_fflush_r+0xe>
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <_fflush_r+0x78>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d101      	bne.n	8009c7c <_fflush_r+0x68>
 8009c78:	68ac      	ldr	r4, [r5, #8]
 8009c7a:	e7df      	b.n	8009c3c <_fflush_r+0x28>
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <_fflush_r+0x7c>)
 8009c7e:	429c      	cmp	r4, r3
 8009c80:	d1dc      	bne.n	8009c3c <_fflush_r+0x28>
 8009c82:	68ec      	ldr	r4, [r5, #12]
 8009c84:	e7da      	b.n	8009c3c <_fflush_r+0x28>
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	0800a78c 	.word	0x0800a78c
 8009c8c:	0800a7ac 	.word	0x0800a7ac
 8009c90:	0800a76c 	.word	0x0800a76c

08009c94 <std>:
 8009c94:	2300      	movs	r3, #0
 8009c96:	b510      	push	{r4, lr}
 8009c98:	0004      	movs	r4, r0
 8009c9a:	6003      	str	r3, [r0, #0]
 8009c9c:	6043      	str	r3, [r0, #4]
 8009c9e:	6083      	str	r3, [r0, #8]
 8009ca0:	8181      	strh	r1, [r0, #12]
 8009ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ca4:	0019      	movs	r1, r3
 8009ca6:	81c2      	strh	r2, [r0, #14]
 8009ca8:	6103      	str	r3, [r0, #16]
 8009caa:	6143      	str	r3, [r0, #20]
 8009cac:	6183      	str	r3, [r0, #24]
 8009cae:	2208      	movs	r2, #8
 8009cb0:	305c      	adds	r0, #92	; 0x5c
 8009cb2:	f7fd fb1d 	bl	80072f0 <memset>
 8009cb6:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <std+0x38>)
 8009cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8009cba:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <std+0x3c>)
 8009cbc:	6224      	str	r4, [r4, #32]
 8009cbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cc0:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <std+0x40>)
 8009cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cc4:	4b04      	ldr	r3, [pc, #16]	; (8009cd8 <std+0x44>)
 8009cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8009cc8:	bd10      	pop	{r4, pc}
 8009cca:	46c0      	nop			; (mov r8, r8)
 8009ccc:	0800a01d 	.word	0x0800a01d
 8009cd0:	0800a045 	.word	0x0800a045
 8009cd4:	0800a07d 	.word	0x0800a07d
 8009cd8:	0800a0a9 	.word	0x0800a0a9

08009cdc <_cleanup_r>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4902      	ldr	r1, [pc, #8]	; (8009ce8 <_cleanup_r+0xc>)
 8009ce0:	f000 f8ba 	bl	8009e58 <_fwalk_reent>
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	08009c15 	.word	0x08009c15

08009cec <__sfmoreglue>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	2568      	movs	r5, #104	; 0x68
 8009cf0:	1e4a      	subs	r2, r1, #1
 8009cf2:	4355      	muls	r5, r2
 8009cf4:	000e      	movs	r6, r1
 8009cf6:	0029      	movs	r1, r5
 8009cf8:	3174      	adds	r1, #116	; 0x74
 8009cfa:	f7ff fa5d 	bl	80091b8 <_malloc_r>
 8009cfe:	1e04      	subs	r4, r0, #0
 8009d00:	d008      	beq.n	8009d14 <__sfmoreglue+0x28>
 8009d02:	2100      	movs	r1, #0
 8009d04:	002a      	movs	r2, r5
 8009d06:	6001      	str	r1, [r0, #0]
 8009d08:	6046      	str	r6, [r0, #4]
 8009d0a:	300c      	adds	r0, #12
 8009d0c:	60a0      	str	r0, [r4, #8]
 8009d0e:	3268      	adds	r2, #104	; 0x68
 8009d10:	f7fd faee 	bl	80072f0 <memset>
 8009d14:	0020      	movs	r0, r4
 8009d16:	bd70      	pop	{r4, r5, r6, pc}

08009d18 <__sfp_lock_acquire>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4802      	ldr	r0, [pc, #8]	; (8009d24 <__sfp_lock_acquire+0xc>)
 8009d1c:	f000 f8bd 	bl	8009e9a <__retarget_lock_acquire_recursive>
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	20000428 	.word	0x20000428

08009d28 <__sfp_lock_release>:
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	4802      	ldr	r0, [pc, #8]	; (8009d34 <__sfp_lock_release+0xc>)
 8009d2c:	f000 f8b6 	bl	8009e9c <__retarget_lock_release_recursive>
 8009d30:	bd10      	pop	{r4, pc}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	20000428 	.word	0x20000428

08009d38 <__sinit_lock_acquire>:
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	4802      	ldr	r0, [pc, #8]	; (8009d44 <__sinit_lock_acquire+0xc>)
 8009d3c:	f000 f8ad 	bl	8009e9a <__retarget_lock_acquire_recursive>
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	20000423 	.word	0x20000423

08009d48 <__sinit_lock_release>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	4802      	ldr	r0, [pc, #8]	; (8009d54 <__sinit_lock_release+0xc>)
 8009d4c:	f000 f8a6 	bl	8009e9c <__retarget_lock_release_recursive>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	20000423 	.word	0x20000423

08009d58 <__sinit>:
 8009d58:	b513      	push	{r0, r1, r4, lr}
 8009d5a:	0004      	movs	r4, r0
 8009d5c:	f7ff ffec 	bl	8009d38 <__sinit_lock_acquire>
 8009d60:	69a3      	ldr	r3, [r4, #24]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <__sinit+0x14>
 8009d66:	f7ff ffef 	bl	8009d48 <__sinit_lock_release>
 8009d6a:	bd13      	pop	{r0, r1, r4, pc}
 8009d6c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009d6e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009d70:	6523      	str	r3, [r4, #80]	; 0x50
 8009d72:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <__sinit+0x68>)
 8009d74:	4a13      	ldr	r2, [pc, #76]	; (8009dc4 <__sinit+0x6c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d101      	bne.n	8009d84 <__sinit+0x2c>
 8009d80:	2301      	movs	r3, #1
 8009d82:	61a3      	str	r3, [r4, #24]
 8009d84:	0020      	movs	r0, r4
 8009d86:	f000 f81f 	bl	8009dc8 <__sfp>
 8009d8a:	6060      	str	r0, [r4, #4]
 8009d8c:	0020      	movs	r0, r4
 8009d8e:	f000 f81b 	bl	8009dc8 <__sfp>
 8009d92:	60a0      	str	r0, [r4, #8]
 8009d94:	0020      	movs	r0, r4
 8009d96:	f000 f817 	bl	8009dc8 <__sfp>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2104      	movs	r1, #4
 8009d9e:	60e0      	str	r0, [r4, #12]
 8009da0:	6860      	ldr	r0, [r4, #4]
 8009da2:	f7ff ff77 	bl	8009c94 <std>
 8009da6:	2201      	movs	r2, #1
 8009da8:	2109      	movs	r1, #9
 8009daa:	68a0      	ldr	r0, [r4, #8]
 8009dac:	f7ff ff72 	bl	8009c94 <std>
 8009db0:	2202      	movs	r2, #2
 8009db2:	2112      	movs	r1, #18
 8009db4:	68e0      	ldr	r0, [r4, #12]
 8009db6:	f7ff ff6d 	bl	8009c94 <std>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	61a3      	str	r3, [r4, #24]
 8009dbe:	e7d2      	b.n	8009d66 <__sinit+0xe>
 8009dc0:	0800a3e8 	.word	0x0800a3e8
 8009dc4:	08009cdd 	.word	0x08009cdd

08009dc8 <__sfp>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	0007      	movs	r7, r0
 8009dcc:	f7ff ffa4 	bl	8009d18 <__sfp_lock_acquire>
 8009dd0:	4b1f      	ldr	r3, [pc, #124]	; (8009e50 <__sfp+0x88>)
 8009dd2:	681e      	ldr	r6, [r3, #0]
 8009dd4:	69b3      	ldr	r3, [r6, #24]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d102      	bne.n	8009de0 <__sfp+0x18>
 8009dda:	0030      	movs	r0, r6
 8009ddc:	f7ff ffbc 	bl	8009d58 <__sinit>
 8009de0:	3648      	adds	r6, #72	; 0x48
 8009de2:	68b4      	ldr	r4, [r6, #8]
 8009de4:	6873      	ldr	r3, [r6, #4]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	d504      	bpl.n	8009df4 <__sfp+0x2c>
 8009dea:	6833      	ldr	r3, [r6, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d022      	beq.n	8009e36 <__sfp+0x6e>
 8009df0:	6836      	ldr	r6, [r6, #0]
 8009df2:	e7f6      	b.n	8009de2 <__sfp+0x1a>
 8009df4:	220c      	movs	r2, #12
 8009df6:	5ea5      	ldrsh	r5, [r4, r2]
 8009df8:	2d00      	cmp	r5, #0
 8009dfa:	d11a      	bne.n	8009e32 <__sfp+0x6a>
 8009dfc:	0020      	movs	r0, r4
 8009dfe:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <__sfp+0x8c>)
 8009e00:	3058      	adds	r0, #88	; 0x58
 8009e02:	60e3      	str	r3, [r4, #12]
 8009e04:	6665      	str	r5, [r4, #100]	; 0x64
 8009e06:	f000 f847 	bl	8009e98 <__retarget_lock_init_recursive>
 8009e0a:	f7ff ff8d 	bl	8009d28 <__sfp_lock_release>
 8009e0e:	0020      	movs	r0, r4
 8009e10:	2208      	movs	r2, #8
 8009e12:	0029      	movs	r1, r5
 8009e14:	6025      	str	r5, [r4, #0]
 8009e16:	60a5      	str	r5, [r4, #8]
 8009e18:	6065      	str	r5, [r4, #4]
 8009e1a:	6125      	str	r5, [r4, #16]
 8009e1c:	6165      	str	r5, [r4, #20]
 8009e1e:	61a5      	str	r5, [r4, #24]
 8009e20:	305c      	adds	r0, #92	; 0x5c
 8009e22:	f7fd fa65 	bl	80072f0 <memset>
 8009e26:	6365      	str	r5, [r4, #52]	; 0x34
 8009e28:	63a5      	str	r5, [r4, #56]	; 0x38
 8009e2a:	64a5      	str	r5, [r4, #72]	; 0x48
 8009e2c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009e2e:	0020      	movs	r0, r4
 8009e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e32:	3468      	adds	r4, #104	; 0x68
 8009e34:	e7d7      	b.n	8009de6 <__sfp+0x1e>
 8009e36:	2104      	movs	r1, #4
 8009e38:	0038      	movs	r0, r7
 8009e3a:	f7ff ff57 	bl	8009cec <__sfmoreglue>
 8009e3e:	1e04      	subs	r4, r0, #0
 8009e40:	6030      	str	r0, [r6, #0]
 8009e42:	d1d5      	bne.n	8009df0 <__sfp+0x28>
 8009e44:	f7ff ff70 	bl	8009d28 <__sfp_lock_release>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	e7ef      	b.n	8009e2e <__sfp+0x66>
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	0800a3e8 	.word	0x0800a3e8
 8009e54:	ffff0001 	.word	0xffff0001

08009e58 <_fwalk_reent>:
 8009e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e5a:	0004      	movs	r4, r0
 8009e5c:	0006      	movs	r6, r0
 8009e5e:	2700      	movs	r7, #0
 8009e60:	9101      	str	r1, [sp, #4]
 8009e62:	3448      	adds	r4, #72	; 0x48
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	68a5      	ldr	r5, [r4, #8]
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	d504      	bpl.n	8009e7c <_fwalk_reent+0x24>
 8009e72:	6824      	ldr	r4, [r4, #0]
 8009e74:	2c00      	cmp	r4, #0
 8009e76:	d1f5      	bne.n	8009e64 <_fwalk_reent+0xc>
 8009e78:	0038      	movs	r0, r7
 8009e7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d908      	bls.n	8009e94 <_fwalk_reent+0x3c>
 8009e82:	220e      	movs	r2, #14
 8009e84:	5eab      	ldrsh	r3, [r5, r2]
 8009e86:	3301      	adds	r3, #1
 8009e88:	d004      	beq.n	8009e94 <_fwalk_reent+0x3c>
 8009e8a:	0029      	movs	r1, r5
 8009e8c:	0030      	movs	r0, r6
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	4798      	blx	r3
 8009e92:	4307      	orrs	r7, r0
 8009e94:	3568      	adds	r5, #104	; 0x68
 8009e96:	e7e8      	b.n	8009e6a <_fwalk_reent+0x12>

08009e98 <__retarget_lock_init_recursive>:
 8009e98:	4770      	bx	lr

08009e9a <__retarget_lock_acquire_recursive>:
 8009e9a:	4770      	bx	lr

08009e9c <__retarget_lock_release_recursive>:
 8009e9c:	4770      	bx	lr
	...

08009ea0 <__swhatbuf_r>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	000e      	movs	r6, r1
 8009ea4:	001d      	movs	r5, r3
 8009ea6:	230e      	movs	r3, #14
 8009ea8:	5ec9      	ldrsh	r1, [r1, r3]
 8009eaa:	0014      	movs	r4, r2
 8009eac:	b096      	sub	sp, #88	; 0x58
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	da07      	bge.n	8009ec2 <__swhatbuf_r+0x22>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	89b3      	ldrh	r3, [r6, #12]
 8009eb8:	061b      	lsls	r3, r3, #24
 8009eba:	d411      	bmi.n	8009ee0 <__swhatbuf_r+0x40>
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	e00f      	b.n	8009ee2 <__swhatbuf_r+0x42>
 8009ec2:	466a      	mov	r2, sp
 8009ec4:	f000 f91c 	bl	800a100 <_fstat_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	dbf2      	blt.n	8009eb2 <__swhatbuf_r+0x12>
 8009ecc:	23f0      	movs	r3, #240	; 0xf0
 8009ece:	9901      	ldr	r1, [sp, #4]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	4019      	ands	r1, r3
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <__swhatbuf_r+0x4c>)
 8009ed6:	18c9      	adds	r1, r1, r3
 8009ed8:	424b      	negs	r3, r1
 8009eda:	4159      	adcs	r1, r3
 8009edc:	6029      	str	r1, [r5, #0]
 8009ede:	e7ed      	b.n	8009ebc <__swhatbuf_r+0x1c>
 8009ee0:	2340      	movs	r3, #64	; 0x40
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	b016      	add	sp, #88	; 0x58
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	ffffe000 	.word	0xffffe000

08009ef0 <__smakebuf_r>:
 8009ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ef2:	2602      	movs	r6, #2
 8009ef4:	898b      	ldrh	r3, [r1, #12]
 8009ef6:	0005      	movs	r5, r0
 8009ef8:	000c      	movs	r4, r1
 8009efa:	4233      	tst	r3, r6
 8009efc:	d006      	beq.n	8009f0c <__smakebuf_r+0x1c>
 8009efe:	0023      	movs	r3, r4
 8009f00:	3347      	adds	r3, #71	; 0x47
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	2301      	movs	r3, #1
 8009f08:	6163      	str	r3, [r4, #20]
 8009f0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009f0c:	466a      	mov	r2, sp
 8009f0e:	ab01      	add	r3, sp, #4
 8009f10:	f7ff ffc6 	bl	8009ea0 <__swhatbuf_r>
 8009f14:	9900      	ldr	r1, [sp, #0]
 8009f16:	0007      	movs	r7, r0
 8009f18:	0028      	movs	r0, r5
 8009f1a:	f7ff f94d 	bl	80091b8 <_malloc_r>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d108      	bne.n	8009f34 <__smakebuf_r+0x44>
 8009f22:	220c      	movs	r2, #12
 8009f24:	5ea3      	ldrsh	r3, [r4, r2]
 8009f26:	059a      	lsls	r2, r3, #22
 8009f28:	d4ef      	bmi.n	8009f0a <__smakebuf_r+0x1a>
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	4393      	bics	r3, r2
 8009f2e:	431e      	orrs	r6, r3
 8009f30:	81a6      	strh	r6, [r4, #12]
 8009f32:	e7e4      	b.n	8009efe <__smakebuf_r+0xe>
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <__smakebuf_r+0x84>)
 8009f36:	62ab      	str	r3, [r5, #40]	; 0x28
 8009f38:	2380      	movs	r3, #128	; 0x80
 8009f3a:	89a2      	ldrh	r2, [r4, #12]
 8009f3c:	6020      	str	r0, [r4, #0]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	6120      	str	r0, [r4, #16]
 8009f46:	6163      	str	r3, [r4, #20]
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00d      	beq.n	8009f6a <__smakebuf_r+0x7a>
 8009f4e:	0028      	movs	r0, r5
 8009f50:	230e      	movs	r3, #14
 8009f52:	5ee1      	ldrsh	r1, [r4, r3]
 8009f54:	f000 f8e6 	bl	800a124 <_isatty_r>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d006      	beq.n	8009f6a <__smakebuf_r+0x7a>
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	4393      	bics	r3, r2
 8009f62:	001a      	movs	r2, r3
 8009f64:	2301      	movs	r3, #1
 8009f66:	4313      	orrs	r3, r2
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	89a0      	ldrh	r0, [r4, #12]
 8009f6c:	4307      	orrs	r7, r0
 8009f6e:	81a7      	strh	r7, [r4, #12]
 8009f70:	e7cb      	b.n	8009f0a <__smakebuf_r+0x1a>
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	08009cdd 	.word	0x08009cdd

08009f78 <_malloc_usable_size_r>:
 8009f78:	1f0b      	subs	r3, r1, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	1f18      	subs	r0, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da01      	bge.n	8009f86 <_malloc_usable_size_r+0xe>
 8009f82:	580b      	ldr	r3, [r1, r0]
 8009f84:	18c0      	adds	r0, r0, r3
 8009f86:	4770      	bx	lr

08009f88 <_raise_r>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	0004      	movs	r4, r0
 8009f8c:	000d      	movs	r5, r1
 8009f8e:	291f      	cmp	r1, #31
 8009f90:	d904      	bls.n	8009f9c <_raise_r+0x14>
 8009f92:	2316      	movs	r3, #22
 8009f94:	6003      	str	r3, [r0, #0]
 8009f96:	2001      	movs	r0, #1
 8009f98:	4240      	negs	r0, r0
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d004      	beq.n	8009fac <_raise_r+0x24>
 8009fa2:	008a      	lsls	r2, r1, #2
 8009fa4:	189b      	adds	r3, r3, r2
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d108      	bne.n	8009fbe <_raise_r+0x36>
 8009fac:	0020      	movs	r0, r4
 8009fae:	f000 f831 	bl	800a014 <_getpid_r>
 8009fb2:	002a      	movs	r2, r5
 8009fb4:	0001      	movs	r1, r0
 8009fb6:	0020      	movs	r0, r4
 8009fb8:	f000 f81a 	bl	8009ff0 <_kill_r>
 8009fbc:	e7ed      	b.n	8009f9a <_raise_r+0x12>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	2a01      	cmp	r2, #1
 8009fc2:	d0ea      	beq.n	8009f9a <_raise_r+0x12>
 8009fc4:	1c51      	adds	r1, r2, #1
 8009fc6:	d103      	bne.n	8009fd0 <_raise_r+0x48>
 8009fc8:	2316      	movs	r3, #22
 8009fca:	3001      	adds	r0, #1
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	e7e4      	b.n	8009f9a <_raise_r+0x12>
 8009fd0:	2400      	movs	r4, #0
 8009fd2:	0028      	movs	r0, r5
 8009fd4:	601c      	str	r4, [r3, #0]
 8009fd6:	4790      	blx	r2
 8009fd8:	0020      	movs	r0, r4
 8009fda:	e7de      	b.n	8009f9a <_raise_r+0x12>

08009fdc <raise>:
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	4b03      	ldr	r3, [pc, #12]	; (8009fec <raise+0x10>)
 8009fe0:	0001      	movs	r1, r0
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	f7ff ffd0 	bl	8009f88 <_raise_r>
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	2000003c 	.word	0x2000003c

08009ff0 <_kill_r>:
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	b570      	push	{r4, r5, r6, lr}
 8009ff4:	4d06      	ldr	r5, [pc, #24]	; (800a010 <_kill_r+0x20>)
 8009ff6:	0004      	movs	r4, r0
 8009ff8:	0008      	movs	r0, r1
 8009ffa:	0011      	movs	r1, r2
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	f7f9 fbd7 	bl	80037b0 <_kill>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d103      	bne.n	800a00e <_kill_r+0x1e>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d000      	beq.n	800a00e <_kill_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	2000041c 	.word	0x2000041c

0800a014 <_getpid_r>:
 800a014:	b510      	push	{r4, lr}
 800a016:	f7f9 fbc5 	bl	80037a4 <_getpid>
 800a01a:	bd10      	pop	{r4, pc}

0800a01c <__sread>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	000c      	movs	r4, r1
 800a020:	250e      	movs	r5, #14
 800a022:	5f49      	ldrsh	r1, [r1, r5]
 800a024:	f000 f8a4 	bl	800a170 <_read_r>
 800a028:	2800      	cmp	r0, #0
 800a02a:	db03      	blt.n	800a034 <__sread+0x18>
 800a02c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a02e:	181b      	adds	r3, r3, r0
 800a030:	6563      	str	r3, [r4, #84]	; 0x54
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	4a02      	ldr	r2, [pc, #8]	; (800a040 <__sread+0x24>)
 800a038:	4013      	ands	r3, r2
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	e7f9      	b.n	800a032 <__sread+0x16>
 800a03e:	46c0      	nop			; (mov r8, r8)
 800a040:	ffffefff 	.word	0xffffefff

0800a044 <__swrite>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	001f      	movs	r7, r3
 800a048:	898b      	ldrh	r3, [r1, #12]
 800a04a:	0005      	movs	r5, r0
 800a04c:	000c      	movs	r4, r1
 800a04e:	0016      	movs	r6, r2
 800a050:	05db      	lsls	r3, r3, #23
 800a052:	d505      	bpl.n	800a060 <__swrite+0x1c>
 800a054:	230e      	movs	r3, #14
 800a056:	5ec9      	ldrsh	r1, [r1, r3]
 800a058:	2200      	movs	r2, #0
 800a05a:	2302      	movs	r3, #2
 800a05c:	f000 f874 	bl	800a148 <_lseek_r>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	4a05      	ldr	r2, [pc, #20]	; (800a078 <__swrite+0x34>)
 800a064:	0028      	movs	r0, r5
 800a066:	4013      	ands	r3, r2
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	0032      	movs	r2, r6
 800a06c:	230e      	movs	r3, #14
 800a06e:	5ee1      	ldrsh	r1, [r4, r3]
 800a070:	003b      	movs	r3, r7
 800a072:	f000 f81f 	bl	800a0b4 <_write_r>
 800a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a078:	ffffefff 	.word	0xffffefff

0800a07c <__sseek>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	000c      	movs	r4, r1
 800a080:	250e      	movs	r5, #14
 800a082:	5f49      	ldrsh	r1, [r1, r5]
 800a084:	f000 f860 	bl	800a148 <_lseek_r>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	1c42      	adds	r2, r0, #1
 800a08c:	d103      	bne.n	800a096 <__sseek+0x1a>
 800a08e:	4a05      	ldr	r2, [pc, #20]	; (800a0a4 <__sseek+0x28>)
 800a090:	4013      	ands	r3, r2
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	bd70      	pop	{r4, r5, r6, pc}
 800a096:	2280      	movs	r2, #128	; 0x80
 800a098:	0152      	lsls	r2, r2, #5
 800a09a:	4313      	orrs	r3, r2
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	6560      	str	r0, [r4, #84]	; 0x54
 800a0a0:	e7f8      	b.n	800a094 <__sseek+0x18>
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	ffffefff 	.word	0xffffefff

0800a0a8 <__sclose>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	230e      	movs	r3, #14
 800a0ac:	5ec9      	ldrsh	r1, [r1, r3]
 800a0ae:	f000 f815 	bl	800a0dc <_close_r>
 800a0b2:	bd10      	pop	{r4, pc}

0800a0b4 <_write_r>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	0004      	movs	r4, r0
 800a0b8:	0008      	movs	r0, r1
 800a0ba:	0011      	movs	r1, r2
 800a0bc:	001a      	movs	r2, r3
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4d05      	ldr	r5, [pc, #20]	; (800a0d8 <_write_r+0x24>)
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f9 fbad 	bl	8003822 <_write>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d103      	bne.n	800a0d4 <_write_r+0x20>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d000      	beq.n	800a0d4 <_write_r+0x20>
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	bd70      	pop	{r4, r5, r6, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	2000041c 	.word	0x2000041c

0800a0dc <_close_r>:
 800a0dc:	2300      	movs	r3, #0
 800a0de:	b570      	push	{r4, r5, r6, lr}
 800a0e0:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_close_r+0x20>)
 800a0e2:	0004      	movs	r4, r0
 800a0e4:	0008      	movs	r0, r1
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f7f9 fbb7 	bl	800385a <_close>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d103      	bne.n	800a0f8 <_close_r+0x1c>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d000      	beq.n	800a0f8 <_close_r+0x1c>
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	bd70      	pop	{r4, r5, r6, pc}
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	2000041c 	.word	0x2000041c

0800a100 <_fstat_r>:
 800a100:	2300      	movs	r3, #0
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_fstat_r+0x20>)
 800a106:	0004      	movs	r4, r0
 800a108:	0008      	movs	r0, r1
 800a10a:	0011      	movs	r1, r2
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f7f9 fbae 	bl	800386e <_fstat>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d103      	bne.n	800a11e <_fstat_r+0x1e>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d000      	beq.n	800a11e <_fstat_r+0x1e>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	2000041c 	.word	0x2000041c

0800a124 <_isatty_r>:
 800a124:	2300      	movs	r3, #0
 800a126:	b570      	push	{r4, r5, r6, lr}
 800a128:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_isatty_r+0x20>)
 800a12a:	0004      	movs	r4, r0
 800a12c:	0008      	movs	r0, r1
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	f7f9 fbab 	bl	800388a <_isatty>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d103      	bne.n	800a140 <_isatty_r+0x1c>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d000      	beq.n	800a140 <_isatty_r+0x1c>
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	bd70      	pop	{r4, r5, r6, pc}
 800a142:	46c0      	nop			; (mov r8, r8)
 800a144:	2000041c 	.word	0x2000041c

0800a148 <_lseek_r>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	0004      	movs	r4, r0
 800a14c:	0008      	movs	r0, r1
 800a14e:	0011      	movs	r1, r2
 800a150:	001a      	movs	r2, r3
 800a152:	2300      	movs	r3, #0
 800a154:	4d05      	ldr	r5, [pc, #20]	; (800a16c <_lseek_r+0x24>)
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f9 fba0 	bl	800389c <_lseek>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d103      	bne.n	800a168 <_lseek_r+0x20>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d000      	beq.n	800a168 <_lseek_r+0x20>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	46c0      	nop			; (mov r8, r8)
 800a16c:	2000041c 	.word	0x2000041c

0800a170 <_read_r>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	0004      	movs	r4, r0
 800a174:	0008      	movs	r0, r1
 800a176:	0011      	movs	r1, r2
 800a178:	001a      	movs	r2, r3
 800a17a:	2300      	movs	r3, #0
 800a17c:	4d05      	ldr	r5, [pc, #20]	; (800a194 <_read_r+0x24>)
 800a17e:	602b      	str	r3, [r5, #0]
 800a180:	f7f9 fb32 	bl	80037e8 <_read>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d103      	bne.n	800a190 <_read_r+0x20>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d000      	beq.n	800a190 <_read_r+0x20>
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	46c0      	nop			; (mov r8, r8)
 800a194:	2000041c 	.word	0x2000041c

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	46c0      	nop			; (mov r8, r8)
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr
